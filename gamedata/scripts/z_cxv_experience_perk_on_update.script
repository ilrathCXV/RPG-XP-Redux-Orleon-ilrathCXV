if perk_based_artefacts then end

local af_lucifer_data = perk_based_artefacts.artefact_props.af_lucifer

local time_elapsed		 = 0
local saved_time_elapsed = 0
local old_time       	 = 0
local tick_gap 			 = 1000	-- 200

-- Credit to PBA for in-world time condition updating
local get_game_time 	 = game.get_game_time
local get_start_time 	 = level.get_start_time
local time_factor 	 	 = 6 -- Default time_factor
local floor				 = math.floor
local max 				 = math.max

local function get_time_elapsed()
	--trace(time_factor)
	return math.floor(get_game_time():diffSec(get_start_time()) / time_factor * 10) * 0.1
end

--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
-- ilrathCXV (12/16/24): "Cyber-medic" will now utilize the Bandage's Bleed Recovery Boost as its baseline + make use of actor's bleed coef to be closer to actual Bandage heal tick
--						 Current time-to-heal-for-one-bandage-tick is 2.85s/2.15s/1.175s OR bleed-recovery-per-sec is 0.7%/1.11%/2.03%
local bandage_base_boost = ini_sys:r_float_ex("bandage", "boost_bleeding_restore") or 0.004	-- Now gets true value of Bandage's boost
local actor_bleed_k = ini_sys:r_float_ex("actor_condition", "bleed_speed_k") or 1
local bleed_coef_table = {[0] = 0, [1] = 0.3509, [2] = 0.4651, [3] = 0.851 }

function perk_effects_over_time()
    if time_global() < old_time then return end
    old_time = time_global() + tick_gap
	
	time_elapsed = get_time_elapsed()
	local effect_factor = max(0, saved_time_elapsed > 0 and time_elapsed > 0 and (time_elapsed - saved_time_elapsed) or 1)

-------------------------------------------------------------> Cybermedic
    if x_cxv_perks_data.perks["perk_cybermedic"] >= 1 then
		if db.actor.bleeding > 0 then
			local bleedingCure = 0
			bleed_table_index = clamp(x_cxv_perks_data.perks["perk_cybermedic"], 1, 3)
			bleedingCure = round_idp(bandage_base_boost * x_cxv_perks_data.perks["perk_cybermedic"] * effect_factor * actor_bleed_k * bleed_coef_table[bleed_table_index], 4)
			-- printf("Bleeding Cure amt: %s", bleedingCure)
			db.actor.bleeding = bleedingCure
		end
    end
-------------------------------------------------------------> Master of the Zone
	if x_cxv_perks_data.perks["perk_master_zone"] >= 1 then 
		db.actor:iterate_belt( function(owner, obj)
			if obj:section() == "af_lucifer" then
				if af_lucifer_data.condition < 0.51 then
					local condRepair = (0.00015 * effect_factor)
					af_lucifer_data.condition = clamp(af_lucifer_data.condition + condRepair, 0, 0.51)
				end
			else
				local condition = obj:condition()
				if condition > 0.98 then return end
				
				local condRepair = (0.00015 * effect_factor)
				
				newCondition = clamp(condition + condRepair, 0, 0.98)
				obj:set_condition(newCondition)
				if (zz_item_artefact.cond_t[obj:id()] and newCondition ~= zz_item_artefact.cond_t[obj:id()]) then
					zz_item_artefact.cond_t[obj:id()] = newCondition
				end
			end
		end)
	end

-------------------------------------------------------------> Refreshness
    if x_cxv_perks_data.perks["perk_iron_resolve"] >= 1 then
		local conditions = db.actor:cast_Actor():conditions()
		if conditions then
			local dizzyRemoval = -0.00375 * x_cxv_perks_data.perks["perk_iron_resolve"] * effect_factor
			conditions:ChangeAlcohol(dizzyRemoval)
		end
    end
	
	saved_time_elapsed = time_elapsed
end

function on_game_start()
    RegisterScriptCallback("actor_on_update",               perk_effects_over_time)
end