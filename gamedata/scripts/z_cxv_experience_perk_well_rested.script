local well_rested_speed = { [0] = 1, [1] = 1.025, [2] = 1.05, [3] = 1.1}
local well_rested_weight = { [0] = 1, [1] = 1.10, [2] = 1.20, [3] = 1.40}
local well_rested_threshold = { [0] = 9000, [1] = 1800, [2] = 2250, [3] = 2700}	-- 0 = 0% / 1 = 80% / 2 = 75% / 3 = 70%

local well_rested_capstone_food = {
	"meat_tushkano_a",
	"meat_tushkano_a",
	"meat_dog_a",
	"meat_pseudodog_a",
	"meat_flesh_a",
	"meat_boar_a",
	"meat_bloodsucker_a",
	"meat_snork_a",
	"meat_snork_a",
	"meat_psysucker_a",
	"meat_lurker_a",
	"meat_chimera_a",
}

local well_rested_capstone_drink = {
	"flask",
	"flask",
	"brewed_coffee",
	"brewed_coffee",
	"brewed_coffee",
	"brewed_coffee",
	"coffee_drink",
	"coffee_drink",
	"coffee_drink",
	"water_drink",
	"drink_crow",
}

local time_g
local update_5s_timer = 0
local update_5s_timer_interval = 50	-- update every 5 seconds
-- local has_slept = false
local given_message = true
local init_status = false


local add_speed = speed.add_speed
local remove_speed = speed.remove_speed
local m_weight = weight.multiply_weight
local remove_weight = weight.remove_weight
local sms = actor_menu.set_msg
local get_last_sleep = actor_status_sleep.get_last_sleep
local math_floor = math.floor

local get_safe_sound_object = xr_sound.get_safe_sound_object

local function play_sound_on_actor(snd, volume, frequency)
	if not snd then
		trace("snd is nil")
		return
	end
	local actor = db.actor
	local snd = get_safe_sound_object(snd)
	if snd then
		snd:play(actor, 0, sound_object.s2d)
		snd.volume = volume or 1
		snd.frequency = frequency or 1
		return snd
	end
end

-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
base_sleep = actor_status_sleep.actor_on_sleep

function actor_status_sleep.actor_on_sleep(hours)
	base_sleep(hours)
	x_cxv_perks_data.has_slept = true
	given_message = false
	save_status()
end


function actor_on_update()
	if x_cxv_perks_data.perks["perk_well_rested"] == 0 then return end
	
	if not init_status then
		load_status()
		init_status = true
	end
	
	time_g = math_floor(time_global() * 0.01)	
	
	if (time_g > update_5s_timer) then
		-- printf("Sleep level: %s | Has slept? - %s", get_last_sleep(), x_cxv_perks_data.has_slept)
		-- x_cxv_perks_data.has_slept = get_last_sleep() < 200 or false
		if x_cxv_perks_data.has_slept then
			if get_last_sleep() < well_rested_threshold[x_cxv_perks_data.perks["perk_well_rested"]] then
				m_weight("perk_well_rested", well_rested_weight[x_cxv_perks_data.perks["perk_well_rested"]], true)
				add_speed("perk_well_rested", well_rested_speed[x_cxv_perks_data.perks["perk_well_rested"]], false, true)
				if not given_message then
					WellRestedNews()
					if x_cxv_perks_data.perks["perk_well_rested"] >= 3 then
						alife_create_item(well_rested_capstone_food[math.random(#well_rested_capstone_food)], db.actor)
						alife_create_item(well_rested_capstone_drink[math.random(#well_rested_capstone_drink)], db.actor)
					end
				end
			else
				remove_speed("perk_well_rested")
				remove_weight("perk_well_rested")
				WellRestedGoneNews()
				x_cxv_perks_data.has_slept = false
			end
			save_status()
		end
		
		update_5s_timer = time_g + update_5s_timer_interval
	end
end

function WellRestedNews()
	local message = game.translate_string("st_rested_1")
	sms(2, message, 5)
	play_sound_on_actor("decoder", 0.75, 0.8)
	given_message = true
end

function WellRestedGoneNews()
	local message = game.translate_string("st_rested_2")
	sms(2, message, 5)
	play_sound_on_actor("decoder", 0.75, 0.8)
end

-------------------------------------------------------------------
-- Callbacks
-------------------------------------------------------------------

function save_status()
	utils_obj.save_var(db.actor,"x_cxv_perks_data.has_slept",x_cxv_perks_data.has_slept)
	utils_obj.save_var(db.actor,"given_message",given_message)
end

function load_status()
	x_cxv_perks_data.has_slept = utils_obj.load_var(db.actor,"x_cxv_perks_data.has_slept") or x_cxv_perks_data.has_slept
	given_message = utils_obj.load_var(db.actor,"given_message") or given_message
end


function on_game_start()
	RegisterScriptCallback("actor_on_update", 		actor_on_update)
end