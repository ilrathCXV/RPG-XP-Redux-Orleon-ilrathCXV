---------------------------------------------------------------------------------------------------------------------------------
-- experience_core.script (1.X.X) OR experience_actions.script (2.X.X) ----------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------
if experience_potions then 	-- (2.X.X)
	function experience_actions.actor_on_item_before_pickup(obj, flags)
		if not IsArtefact(obj) then return end
		
		-- Hack to prevent player from exploting Artefacts Containers (gaining rank by recieving artefacts)
		if _G.ARTY_FROM_CONT then
			_G.ARTY_FROM_CONT = nil
			return
		end
		
		local artefact = obj:get_artefact()
		-- Artefacts found counter incrementation.
		-- Checks to make sure artefact id hasn't already been logged.
		if (artefact) then
			artefact:FollowByPath("NULL", 0, vector():set(500,500,500))
			if not (game_statistics.actor_artefacts[obj:id()]) then
				-- game_statistics.actor_artefacts[obj:id()] = true
				local af_rank = SYS_GetParam(2, obj:section(), "af_rank") or 0
				experience_actions.GetArtefactXP(af_rank)
			end
		end
	end
else					 	-- (1.X.X)
	function experience_core.actor_on_item_before_pickup(obj, flags)
		if not IsArtefact(obj) then return end
		
		-- Hack to prevent player from exploting Artefacts Containers (gaining rank by recieving artefacts)
		if _G.ARTY_FROM_CONT then
			_G.ARTY_FROM_CONT = nil
			return
		end
		
		local artefact = obj:get_artefact()
		-- Artefacts found counter incrementation.
		-- Checks to make sure artefact id hasn't already been logged.
		if (artefact) then
			artefact:FollowByPath("NULL", 0, vector():set(500,500,500))
			if not (game_statistics.actor_artefacts[obj:id()]) then
				-- game_statistics.actor_artefacts[obj:id()] = true
				local af_rank = SYS_GetParam(2, obj:section(), "af_rank") or 0
				experience_core.give_actor_experience_by_artefact(af_rank)
				if experience_core.get_daily_manager then
					experience_core.get_daily_manager():SendEvent("find_artefacts", 1)
				end
			else
				return
			end
		end
	end
end

---------------------------------------------------------------------------------------------------------------------------------
-- zzzz_arti_jamming_repairs.script ---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------
if zzzz_arti_jamming_repairs then
	local BaseReplacePart = zzzz_arti_jamming_repairs.replace_part
	function zzzz_arti_jamming_repairs.replace_part(id, part, kit_name, clean)	
		local add_cond
		local parts = se_load_var(id, nil, "parts")
		if parts and parts[part] then
			add_cond = 99 - parts[part]
		end
		BaseReplacePart(id, part, kit_name, clean)
		
		if experience_potions then	
			experience_actions.GetRepairItemXP(add_cond)
		else
			experience_core.give_actor_experience_by_repair_items(add_cond)
		end
	end
end
