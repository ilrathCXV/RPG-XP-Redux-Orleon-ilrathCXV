local repair_junkie = 0											
local repair_junkie_bonus = { [0] = 0, [1] = 0.05, [2] = 0.10, [3] = 0.20 , [4] = 0.40, [5] = 0.750 }	-- Repair Junkie: Grants a chance to refund a repair item
local zone_gunsmith = 0
local zone_gunsmith_bonus = { [0] = 0, [1] = 0, [2] = 0, [3] = 0.1 , [4] = 0.3, [5] = 0.6}	-- Jury Rigging: Starting Rank 3, grants bonus repair item refund chance

local function experience_skill_on_update(id, data)
	if (id == "perk_repair_junkie") then
		repair_junkie = data["curr_level"]
	end
	if (id == "perk_zone_gunsmith") then
		zone_gunsmith = data["curr_level"]
	end	
end

function on_game_start()
	if experience_potions then
		RegisterScriptCallback("experience_skill_on_update", experience_skill_on_update)
	else
		RegisterScriptCallback("experience_perk_on_update", experience_skill_on_update)
	end	
	
	-- monkey patch for the Tinkering skill
	local originalOnRepair = item_repair.UIRepair.OnRepair
	item_repair.UIRepair.OnRepair = function (self)
	
		if (repair_junkie > 0) then
			local repairkit = nil
			local supportitem = nil
			local supportitemid = 0
			local kitremaininguses = 0
			local supportremaininguses = 0
			local waslastuse = false
			local support_waslastuse = false
			if not zz_item_repair_keep_crafting_window_open then
				repairkit = self.obj
			elseif self.isMultiUse and self.multiUseItemsObj[1] then -- Compatibility code for "Keep Crafting Windows Open"
				local repair_item = nil
				self:CollectValidItems(self.obj, self.section)
				for id, amount in pairs(self.multiUseItemsObj[1]) do
					repair_item = get_object_by_id(id)
					if (repair_item) then
						repairkit = repair_item
					end 
				end
			else
				repairkit = self.obj
			end
			
			if self.CC[2]:GetCell_Selected(true) then
				supportitem = self.CC[2]:GetCell_Selected(true)
				supportitemid = self.CC[2]:GetCell_Selected(true):id()
			end
							
			if repairkit then
				local degrade_factor = ini_sys:r_float_ex(repairkit:section(), "degradation_factor") or 0.2
				--if degrade_factor == 0.2 then
				--	printf("POOP - Failed to get degradation_factor - default to 0.2")
				--	printe("POOP - Failed to get degradation_factor - default to 0.2")
				--end
				if IsItem("multiuse", repairkit:section()) then
					kitremaininguses = repairkit:get_remaining_uses()
					if kitremaininguses == 1 then
						waslastuse = true
						local seed = repairkit:id() + kitremaininguses + supportitemid + self.con_val[1]
						math.randomseed(seed)
						
						local refundbool = math.random() < repair_junkie_bonus[repair_junkie]
						
						if refundbool then
							TinkerNews()
						
							repairkit:set_remaining_uses(repairkit:get_remaining_uses() + 1)
						end
					end
				elseif utils_item.is_degradable(repairkit) and repairkit:condition() <= degrade_factor then
					waslastuse = true
					local seed = repairkit:id() + repairkit:condition() + supportitemid + self.con_val[1]
					math.randomseed(seed)
					
					local refundbool = math.random() < repair_junkie_bonus[repair_junkie]
					
					if refundbool then
						TinkerNews()
						repairkit:set_condition(math.min(repairkit:condition() + degrade_factor,1))
					end
				end
			end
			
			if supportitem then
				local degrade_factor = ini_sys:r_float_ex(supportitem:section(), "degradation_factor") or 0.2
				if IsItem("multiuse", supportitem:section()) then
					supportremaininguses = supportitem:get_remaining_uses()
					if supportremaininguses == 1 then
						support_waslastuse = true
						local seed = supportremaininguses + supportitemid + self.con_val[1]
						math.randomseed(seed)
						
						local refundbool = math.random() < zone_gunsmith_bonus[zone_gunsmith]
						
						if refundbool then
							BonusNews()
						
							supportitem:set_remaining_uses(supportitem:get_remaining_uses() + 1)
						end
					end
				elseif utils_item.is_degradable(supportitem) and supportitem:condition() <= degrade_factor then
					support_waslastuse = true
					local seed = supportitem:condition() + supportitemid + self.con_val[1]
					math.randomseed(seed)
					
					local refundbool = math.random() < zone_gunsmith_bonus[zone_gunsmith]
					
					if refundbool then
						BonusNews()
						supportitem:set_condition(math.min(supportitem:condition() + degrade_factor,1))
					end
				else
					local seed = supportitemid + self.con_val[1]
					math.randomseed(seed)
					
					local refundbool = math.random() < zone_gunsmith_bonus[zone_gunsmith]
					
					if refundbool then
						BonusNews()
						alife_create_item(supportitem:section(), db.actor)
					end
				end
			end
			
			originalOnRepair(self)
			
			
			if repairkit then
				local degrade_factor = ini_sys:r_float_ex(repairkit:section(), "degradation_factor") or 0.2
				--if degrade_factor == 0.2 then
				--	printf("POOP - Failed to get degradation_factor - default to 0.2")
				--	printe("POOP - Failed to get degradation_factor - default to 0.2")
				--end	
				if not waslastuse and IsItem("multiuse", repairkit:section()) then
					local seed = repairkit:id() + kitremaininguses + supportitemid + self.con_val[1]
					math.randomseed(seed)
					local refundbool = math.random() < repair_junkie_bonus[repair_junkie]
					
					if refundbool then
						TinkerNews()
						repairkit:set_remaining_uses(repairkit:get_remaining_uses() + 1)
					end
				elseif not waslastuse and utils_item.is_degradable(repairkit) then
					local seed = repairkit:id() + repairkit:condition() + supportitemid + self.con_val[1]
					math.randomseed(seed)
					
					local refundbool = math.random() < repair_junkie_bonus[repair_junkie]
					
					if refundbool then
						TinkerNews()
						repairkit:set_condition(math.min(repairkit:condition() + degrade_factor,1))
					end
				end
			end
			
	
			if supportitem then
				local degrade_factor = ini_sys:r_float_ex(supportitem:section(), "degradation_factor") or 0.2
				if not support_waslastuse and IsItem("multiuse", supportitem:section()) then
					local seed = supportremaininguses + supportitemid + self.con_val[1]
					math.randomseed(seed)
					local refundbool = math.random() < zone_gunsmith_bonus[zone_gunsmith]
					
					if refundbool then
						BonusNews()
						supportitem:set_remaining_uses(supportitem:get_remaining_uses() + 1)
					end
				elseif not support_waslastuse and utils_item.is_degradable(supportitem) then
					local seed = supportitem:condition() + supportitemid + self.con_val[1]
					math.randomseed(seed)
					
					local refundbool = math.random() < zone_gunsmith_bonus[zone_gunsmith]
					
					if refundbool then
						BonusNews()
						supportitem:set_condition(math.min(supportitem:condition() + degrade_factor,1))
					end
				end
			end
		else
			originalOnRepair(self)
		end
	end
	-- monkey patch end
	
	-- WPO patch
	if zzzz_arti_jamming_repairs then
		local BaseReplacePart = zzzz_arti_jamming_repairs.replace_part
		function zzzz_arti_jamming_repairs.replace_part(id, part, kit_name, clean)
			local repairkit = db.actor:object(kit_name)
			local waslastuse = false
			local remaining_uses = repairkit:get_remaining_uses()
			local parts = se_load_var(id, nil, "parts")
			local part_cond = 0
			if parts and parts[part] then
				part_cond = parts[part]
			end
			local seed = repairkit:id() + remaining_uses + id + part_cond
			math.randomseed(seed)
			local refundbool = math.random() < (repair_junkie * 0.05)
			
			if clean and remaining_uses == 1 then
				waslastuse = true
				if refundbool then
					TinkerNews()
					repairkit:set_remaining_uses(repairkit:get_remaining_uses() + 1)
				end
			end
			
			BaseReplacePart(id, part, kit_name, clean)
			
			if clean and not waslastuse then
				if refundbool then
					TinkerNews()
					repairkit:set_remaining_uses(repairkit:get_remaining_uses() + 1)
				end
			end
		end
	end
	-- WPO patch end
end

local get_safe_sound_object = xr_sound.get_safe_sound_object

local function play_sound_on_actor(snd, volume, frequency)
	if not snd then
		trace("snd is nil")
		return
	end
	local actor = db.actor
	local snd = get_safe_sound_object(snd)
	if snd then
		snd:play(actor, 0, sound_object.s2d)
		snd.volume = volume or 1
		snd.frequency = frequency or 1
		return snd
	end
end

function TinkerNews()
	local sms = actor_menu.set_msg
	local message = "Repair item refunded!"
	sms(2, message, 5)
	play_sound_on_actor("decoder", 0.75, 0.8)
end

function BonusNews()
	local sms = actor_menu.set_msg
	local message = "Bonus item refunded!"
	sms(2, message, 5)
	play_sound_on_actor("decoder", 0.75, 0.8)
end