-- Repair Junkie: Grants a chance to refund a repair item
local repair_junkie_bonus = { [0] = 0, [1] = 0.05, [2] = 0.10, [3] = 0.20 , [4] = 0.40, [5] = 0.750 }

-- Jury Rigging: Starting Rank 3, grants bonus repair item refund chance
local zone_gunsmith_bonus = { [0] = 0, [1] = 0, [2] = 0, [3] = 0.1 , [4] = 0.3, [5] = 0.6}

local play_sound_on_actor = x_cxv_perks_data.play_sound_on_actor

is_repairing = false
is_repairing_wpo = false
repairkit = nil
repairkit_id = 0
supportitem = nil
supportitem_id = 0

function on_game_start()
	
	-- New way to do monkeypatch for "Repair Junkie" and "Zone Gunsmith" in the Repair UI
	-- Will mainly monkeypatch the degrade/discharge functions ONLY if "is_repairing" is true (set within the OnRepair function before doing the normal functionality)
	local origDischarge = utils_item.discharge
	function utils_item.discharge(obj, num)
		if not obj then return end
		if not is_repairing then return origDischarge(obj, num) end
		
		-- Repair Junkie for repair items (check IDs to see if they match)
		-- Simply return to skip discharge
		local obj_id = obj:id()
		printf("Obj ID (%s) | Repair Kit ID (%s)", obj_id, repairkit_id)
		if obj_id and obj_id == repairkit_id and x_cxv_perks_data.perks["perk_repair_junkie"] > 0 then
			if math.random() <= repair_junkie_bonus[x_cxv_perks_data.perks["perk_repair_junkie"]] then
				if is_repairing_wpo then
					TinkerNewsParts()
				else
					TinkerNews()
				end
				return
			else
				return origDischarge(obj, num)
			end
		end
		
		-- Zone Gunsmith for bonus items (Rank 3+) (check IDs to see if they match)
		-- Simply return to skip discharge
		printf("Obj ID (%s) | Support Item ID (%s)", obj_id, supportitem_id)
		if obj_id and obj_id == supportitem_id and x_cxv_perks_data.perks["perk_zone_gunsmith"] > 2 then
			if math.random() <= zone_gunsmith_bonus[x_cxv_perks_data.perks["perk_zone_gunsmith"]] then
				BonusNews()
				return
			else
				return origDischarge(obj, num)
			end
		end
		
		-- in case nothing goes right, do normal route
		return origDischarge(obj, num)
	end
	
	local origDegrade = utils_item.degrade
	function utils_item.degrade(obj, num)
		if not obj then return end
		if not is_repairing then return origDegrade(obj, num) end
		
		-- Repair Junkie for repair items (check IDs to see if they match)
		-- Send degrade factor (num) to 0 to have it skip
		local obj_id = obj:id()
		printf("Obj ID (%s) | Repair Kit ID (%s)", obj_id, repairkit_id)
		if obj_id and obj_id == repairkit_id and x_cxv_perks_data.perks["perk_repair_junkie"] > 0 then
			if math.random() <= repair_junkie_bonus[x_cxv_perks_data.perks["perk_repair_junkie"]] then
				if is_repairing_wpo then
					TinkerNewsParts()
				else
					TinkerNews()
				end
				return origDegrade(obj, 0)
			else
				return origDegrade(obj, num)
			end
		end
		
		-- Zone Gunsmith for bonus items (Rank 3+) (check IDs to see if they match)
		-- Send degrade factor (num) to 0 to have it skip
		printf("Obj ID (%s) | Support Item ID (%s)", obj_id, supportitem_id)
		if obj_id and obj_id == supportitem_id and x_cxv_perks_data.perks["perk_zone_gunsmith"] > 2 then
			if math.random() <= zone_gunsmith_bonus[x_cxv_perks_data.perks["perk_zone_gunsmith"]] then
				BonusNews()
				return origDegrade(obj, 0)
			else
				return origDegrade(obj, num)
			end
		end
		
		-- in case nothing goes right, do normal route
		return origDegrade(obj, num)
	end
	
	-- WPO patch
	-- utilizing the new approach explained above
	if zzzz_arti_jamming_repairs then
		local BaseReplacePart = zzzz_arti_jamming_repairs.replace_part
		function zzzz_arti_jamming_repairs.replace_part(id, part, kit_name, clean)
			if x_cxv_perks_data.perks["perk_repair_junkie"] < 1 then
				BaseReplacePart(id, part, kit_name, clean)
			else
				repairkit = db.actor:object(kit_name)
				repairkit_id = repairkit and repairkit:id()
				is_repairing = true
				is_repairing_wpo = true
				BaseReplacePart(id, part, kit_name, clean)
				is_repairing = false
				is_repairing_wpo = false
			end
		end
	end
	-- WPO patch end
	
	-- monkey patch for the Tinkering skill
	-- utilizing the new approach explained above
	local originalOnRepair = item_repair.UIRepair.OnRepair
	item_repair.UIRepair.OnRepair = function (self)
		if (x_cxv_perks_data.perks["perk_repair_junkie"] > 0) or (x_cxv_perks_data.perks["perk_zone_gunsmith"] > 0) then
			is_repairing = true
			repairkit = nil
			repairkit_id = 0
			supportitem = nil
			supportitem_id = 0
			if not zz_item_repair_keep_crafting_window_open then
				repairkit = self.obj
				repairkit_id = (repairkit and repairkit:id()) or 0
			elseif self.isMultiUse and self.multiUseItemsObj[1] then -- Compatibility code for "Keep Crafting Windows Open"
				local repair_item = nil
				self:CollectValidItems(self.obj, self.section)
				for id, amount in pairs(self.multiUseItemsObj[1]) do
					repair_item = get_object_by_id(id)
					if (repair_item) then
						repairkit = repair_item
						repairkit_id = (repairkit and repairkit:id()) or 0
					end 
				end
			else
				repairkit = self.obj
				repairkit_id = (repairkit and repairkit:id()) or 0
			end
			
			if self.CC[2]:GetCell_Selected(true) then
				supportitem = self.CC[2]:GetCell_Selected(true)
				supportitem_id = supportitem:id()
			end
			
			originalOnRepair(self)
			is_repairing = false
			
		else
			originalOnRepair(self)
		end
	end
end

function TinkerNews()
	local sms = actor_menu.set_msg
	local message = game.translate_string("st_refund_1")
	sms(2, message, 5)
	play_sound_on_actor("decoder", 0.75, 0.8)
end

function BonusNews()
	local sms = actor_menu.set_msg
	local message = game.translate_string("st_refund_2")
	sms(2, message, 5)
	play_sound_on_actor("decoder", 0.75, 0.8)
end

function TinkerNewsParts()
	local message = game.translate_string("st_refund_1")
	news_manager.send_tip(db.actor, message, nil, "swiss_knife", 6000)
	play_sound_on_actor("decoder", 0.75, 0.8)
end