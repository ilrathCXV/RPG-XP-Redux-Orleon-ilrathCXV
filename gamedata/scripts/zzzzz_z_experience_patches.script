---------------------------------------------------------------------------------------------------------------------------------
-- Experience Framework
-- Monkey patches

-- !!! DO NOT REFER TO THIS SCRIPT !!!

---------------------------------------------------------------------------------------------------------------------------------
if not experience_utils.CanStartFramework() then
	return
end


local Banjaji_CSI_Installed = (aa_load_recipes_Banjaji_CSI ~= nil)


function on_game_start()

	-- Banjaji's Crafting System Improvements v4+ - Compatibility Patch
	if Banjaji_CSI_Installed then
		RegisterScriptCallback("craft_finished", function(recipe, self)
			if (type(recipe) == "table" and type(recipe.components) == "table") then
				experience_actions.GetWorkshopXP("craft", size_table(recipe.components))
			end
		end)
	end

end

---------------------------------------------------------------------------------------------------------------------------------
-- _G.script --------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------
-- NPC Leveling System
-- Implementation of a leveled damage system for NPCs and Actor, before calling callbacks, for maximum compatibility with other mods.
----------------------------------------------------
local GActor_OnBforeHitBase = _G.CActor__BeforeHitCallback
_G.CActor__BeforeHitCallback = function(actor, shit, bone_id)
	experience_npcs.Actor_OnBeforeHit(shit, bone_id)
	return GActor_OnBforeHitBase(actor, shit, bone_id)
end

local GStalker_OnBeforeHitBase = _G.CAI_Stalker__BeforeHitCallback
_G.CAI_Stalker__BeforeHitCallback = function(npc, shit, bone_id)
	experience_npcs.Stalker_OnBeforeHit(npc, shit, bone_id)
	return GStalker_OnBeforeHitBase(npc, shit, bone_id)
end

local GMonster_OnBeforeHitBase = _G.CBaseMonster__BeforeHitCallback
_G.CBaseMonster__BeforeHitCallback = function(monster, shit, bone_id)
	experience_npcs.Monster_OnBeforeHit(monster, shit, bone_id)
	return GMonster_OnBeforeHitBase(monster, shit, bone_id)
end
----------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------------
-- bind_stalker_ext.script ------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------
-- Give the actor experience for completing tasks
local ignore_task_ids = {
	["hide_from_surge"]				= true,
	["hide_from_psi_storm"]			= true,
	["task_placeable_waypoint"]		= true
}
local ActorOnTaskCallback = bind_stalker_ext.actor_on_task_callback
bind_stalker_ext.actor_on_task_callback = function(binder, _task, _state)
	ActorOnTaskCallback(binder, _task, _state)

	if _state == task.completed then
		local task_id = _task:get_id()
		if (not experience_utils.IGNORE_TASK_IDS[task_id]) or (not ignore_task_ids[task_id]) then
			experience_actions.GetTaskXP(task_manager.task_ini:r_bool_ex(task_id, "storyline", false))
		end
	end
end

---------------------------------------------------------------------------------------------------------------------------------
-- treasure_manager.script ------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------
local TrySpawnTreasure = treasure_manager.try_spawn_treasure
treasure_manager.try_spawn_treasure = function(box)
	local id = box:id()

	if not (treasure_manager.caches[id] and type(treasure_manager.caches[id]) == "string") then
		return
	end

	TrySpawnTreasure(box)
	experience_potions.try_spawn_potions(box)
	experience_traits.try_spawn_trait(box, "stash")
	experience_actions.GetStashXP()
end

---------------------------------------------------------------------------------------------------------------------------------
-- death_manager.script ---------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------
local CreateReleaseItem = death_manager.create_release_item
death_manager.create_release_item = function(npc)
    CreateReleaseItem(npc)
	experience_potions.try_spawn_potions(npc)
	experience_traits.try_spawn_trait(npc, "stalker")
end

---------------------------------------------------------------------------------------------------------------------------------
-- item_parts.script ------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------
local DisassemblyWeapon = item_parts.disassembly_weapon
item_parts.disassembly_weapon = function(obj, obj_d)
	local npc = obj:parent()
	if (not npc) then
		printf("~ item_parts | no owner found for [%s]", obj:name())
		return
	end
	DisassemblyWeapon(obj, obj_d)
	experience_actions.GetDisassemblyItemsXP(obj)
end

local DisassemblyOutfit = item_parts.disassembly_outfit
item_parts.disassembly_outfit = function(obj, obj_d)
	local npc = obj:parent()
	if (not npc) then
		printf("~ item_parts | no owner found for [%s]", obj:name())
		return
	end
	DisassemblyOutfit(obj, obj_d)
	experience_actions.GetDisassemblyItemsXP(obj)
end

local DisassemblyItem = item_parts.disassembly_item
item_parts.disassembly_item = function(obj, obj_d)
	local npc = obj:parent()
	if (not npc) then
		printf("~ item_parts | no owner found for [%s]", obj:name())
		return
	end
	local sec = obj:section()
	local parts = itms_manager.ini_parts:r_string_ex("nor_parts_list",sec)
	if (not parts) then
		return
	end
	DisassemblyItem(obj, obj_d)
	experience_actions.GetDisassemblyItemsXP(obj)
end

---------------------------------------------------------------------------------------------------------------------------------
-- ui_mutant_loot.script --------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------
local UIMutantOnLoot = ui_mutant_loot.UIMutantLoot.Loot
ui_mutant_loot.UIMutantLoot.Loot = function(self, loot_all)
	local obj_mutant = level.object_by_id(self.id)
	if (not obj_mutant) then
		self:Close()
		return
	end
	
	local loot_count = 0
	
	if loot_all then
		local tbl = self.loot
		for sec,t in pairs(tbl) do
			for i=1,t.count do
				loot_count = loot_count + 1
			end
		end
	else
		for idx,ci in pairs(self.CC.cell) do
			if ci.flags.selected then
				loot_count = loot_count + 1
			end
		end
	end
	
	UIMutantOnLoot(self, loot_all)
	experience_actions.GetMutantLootXP(loot_count)
end

---------------------------------------------------------------------------------------------------------------------------------
-- item_repair.script -----------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------
local UIOnRepair = item_repair.UIRepair.OnRepair
item_repair.UIRepair.OnRepair = function(self)
	local obj_1 = self.CC[1]:GetCell_Selected(true)
	if not (obj_1 and self.con_val[4]) then
		return
	end

	local add_cond = self.con_val[2] + self.con_val[3]
	if IsItem("part",nil,obj_1) then
		add_cond = math.floor(add_cond / 4)
	end

	UIOnRepair(self)
	experience_actions.GetRepairItemXP(add_cond)
end

---------------------------------------------------------------------------------------------------------------------------------
-- item_cooking.script ----------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------
local UIOnCook = item_cooking.UICook.OnCook
item_cooking.UICook.OnCook = function(self)
	local meal = self:GetSelectedMeal()
	if (not meal) then
		return
	end
	
	UIOnCook(self)
	experience_actions.GetCookingXP()
end

---------------------------------------------------------------------------------------------------------------------------------
-- ui_workshop.script -----------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------
if not Banjaji_CSI_Installed then
	local UIWorkShopOnCraft = ui_workshop.UIWorkshopCraft.Craft
	ui_workshop.UIWorkshopCraft.Craft = function(self)
		if (not self.craft_allow_r) then 
			return 
		end
		
		local cnt = #self.craft_item
		
		UIWorkShopOnCraft(self)
		experience_actions.GetWorkshopXP("craft", cnt)
	end
end

local UIWorkShopOnRepair	= ui_workshop.UIWorkshopRepair.Repair
ui_workshop.UIWorkshopRepair.Repair = function(self)
	local obj = self.CC["inventory"]:GetCell_Selected(true)
	if (not obj) then
		return
	end
	
	local cnt = 0
	
	if is_not_empty(self.new_con) then
		for i=1,6 do
			if self.parts[i] and self.parts[i].sec and (self.parts[i].sec ~= "na") then
				if self.new_con[i] and self.new_con[i].id then
					cnt = cnt + 1
				end
			end
		end
	else
		ui_workshop.print_ws("! UIWorkshopRepair:Repair() | no new parts have been replaced")
		return
	end
	
	UIWorkShopOnRepair(self)
	experience_actions.GetWorkshopXP("repair", cnt)
end

local UIWorkShopOnUpgrade	= ui_workshop.UIWorkshopUpgrade.Upgrade
ui_workshop.UIWorkshopUpgrade.Upgrade = function(self)
	local obj = self.CC:GetCell_Selected(true)
	if (not obj) then
		return
	end
	
	local cnt = 0
	
	for k, v in pairs(self.inst_upgr) do
		if (not obj:has_upgrade(k)) then
			cnt = cnt + 1
		end
	end
	
	UIWorkShopOnUpgrade(self)
	experience_actions.GetWorkshopXP("upgrade", cnt)
end

---------------------------------------------------------------------------------------------------------------------------------
-- haru_skills.script (Anomaly Skill System Mod) --------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------
if haru_skills and haru_skills.level_up_skill then
	local HarukaLevelUpSkills = haru_skills.level_up_skill
	haru_skills.level_up_skill = function(name)
		HarukaLevelUpSkills(name)
		local current_level = haru_skills.skills_levels and haru_skills.skills_levels[name].current_level or 1
		experience_actions.GetHarukaSkillXP(current_level)
	end
end

---------------------------------------------------------------------------------------------------------------------------------
-- ui_item.script ---------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------
local BuildDescFooterOrig = ui_item.build_desc_footer
ui_item.build_desc_footer = function(obj, sec, str)
	str = str or game.translate_string(ini_sys:r_string_ex(sec, "description"))
	if not str then
		return ""
	end

	if experience_utils.IsTraitItem(sec) then
		str = game.translate_string("st_xp_trait_desc_header") .. str

	elseif experience_potions.POTIONS[sec] then
		local buff = experience_potions.POTIONS[sec].buff_value and math.ceil(experience_potions.POTIONS[sec].buff_value * 100) or 0
		if buff > 0 then
			buff = "%c[d_green]+" .. tostring(buff) .. "%"
		else
			buff = "%c[d_red]" .. tostring(buff) .. "%"
		end
		str = strformat(str, experience_potions.get_xp_buff_duration(sec), buff)
	end

	return BuildDescFooterOrig(obj, sec, str)
end

---------------------------------------------------------------------------------------------------------------------------------
-- itms_manager.script ----------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------
local ItmsManagerOnItemBeforeUseOrig = itms_manager.actor_on_item_before_use
itms_manager.actor_on_item_before_use = function(obj, flags)
	local sec = obj:section()

	if experience_potions.POTIONS[sec] then
		local props = experience_potions.POTIONS[sec]
		local buff = experience_potions.get_xp_buff()
		local dont_use_msg = nil

		if not (props.duration and props.buff_value) then
			dont_use_msg = game.translate_string("st_xp_unknown_experience_potion_msg")

		elseif (buff.oblivion_flag and not props.is_oblivion) then
			dont_use_msg = game.translate_string("st_xp_you_have_oblivion_potion_debuff_msg")

		elseif (not props.is_oblivion and buff.value > props.buff_value) then
			dont_use_msg = game.translate_string("st_xp_experience_potion_greater_effect_msg")
		end

		if dont_use_msg ~= nil then
			hide_hud_inventory()
			actor_menu.set_msg(2, dont_use_msg)
			flags.ret_value = false
			return
		end
	end

	ItmsManagerOnItemBeforeUseOrig(obj, flags)
end

---------------------------------------------------------------------------------------------------------------------------------
-- sim_offline_combat.script ----------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------
local SetBattleOutcomeOrig = sim_offline_combat.set_battle_outcome
sim_offline_combat.set_battle_outcome = function(victory, id_1, id_2, squad_1, squad_2, community_1, community_2, se_attacker, se_victim, damage)
	SetBattleOutcomeOrig(victory, id_1, id_2, squad_1, squad_2, community_1, community_2, se_attacker, se_victim, damage)
	experience_npcs.process_killing_npcs(se_attacker.id, se_victim.id)
end

local CalculateNPCPowerOrig = sim_offline_combat.calculate_npc_power
sim_offline_combat.calculate_npc_power = function(se_obj, community)
	local power = CalculateNPCPowerOrig(se_obj, community)
	local npc_level = experience_npcs.get_npc_level(se_obj.id)
	return npc_level and power + npc_level / experience_npcs.get_npc_max_level() or power
end

---------------------------------------------------------------------------------------------------------------------------------
-- game_statistics.script -------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------
local IncrementNPCStatisticOrig = game_statistics.increment_npc_statistic
game_statistics.increment_npc_statistic = function(npc, value, custom_rank, custom_rept)
	IncrementNPCStatisticOrig(npc, value, custom_rank, custom_rept)

	if (npc and npc:alive()) then
		local exp = experience_npcs.get_exp_by_statistic(value)
		if exp then
			experience_npcs.increase_npc_exp(npc:id(), exp)
		end
	end
end