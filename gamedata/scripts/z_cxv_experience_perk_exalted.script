local goodwill_honored = 999
local goodwill_exalted = 1499

local function is_actor_ally(first_speaker, second_speaker)
	local npc = dialogs.who_is_npc(first_speaker, second_speaker)
	local sec = npc:section()
	
	local comm = sim_offline_combat.story_id_communities[sec] or character_community(npc)
	if (comm == "trader") then comm = "stalker" end
	
	local goodwill = relation_registry.community_goodwill(comm, AC_ID)
	return goodwill > goodwill_honored
end

-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------

base_stalker_faction = dialogs.actor_stalker
function dialogs.actor_stalker(first_speaker, second_speaker)
	local is_stalker = character_community(db.actor) == "actor_stalker"
	if x_cxv_perks_data.perks["perk_the_exalted"] <= 0 or is_stalker then
		return is_stalker
	elseif x_cxv_perks_data.perks["perk_the_exalted"] > 0 then
		local is_ally = is_actor_ally(first_speaker, second_speaker)
		return (is_stalker or is_ally)
	end
end

base_bandit_faction = dialogs.actor_bandit
function dialogs.actor_bandit(first_speaker, second_speaker)
	local is_bandit = character_community(db.actor) == "actor_bandit"
	if x_cxv_perks_data.perks["perk_the_exalted"] <= 0 or is_bandit then
		return is_bandit
	elseif x_cxv_perks_data.perks["perk_the_exalted"] > 0 then
		local is_ally = is_actor_ally(first_speaker, second_speaker)
		return (is_bandit or is_ally)
	end
end

base_freedom_faction = dialogs.actor_freedom
function dialogs.actor_freedom(first_speaker, second_speaker)
	local is_freedom = character_community(db.actor) == "actor_freedom"
	if x_cxv_perks_data.perks["perk_the_exalted"] <= 0 or is_freedom then
		return is_freedom
	elseif x_cxv_perks_data.perks["perk_the_exalted"] > 0 then
		local is_ally = is_actor_ally(first_speaker, second_speaker)
		return (is_freedom or is_ally)
	end
end


base_dolg_faction = dialogs.actor_dolg
function dialogs.actor_dolg(first_speaker, second_speaker)
	local is_dolg = character_community(db.actor) == "actor_dolg"
	if x_cxv_perks_data.perks["perk_the_exalted"] <= 0 or is_dolg then
		return is_dolg
	elseif x_cxv_perks_data.perks["perk_the_exalted"] > 0 then
		local is_ally = is_actor_ally(first_speaker, second_speaker)
		return (is_dolg or is_ally)
	end
end


base_killer_faction = dialogs.actor_killer
function dialogs.actor_killer(first_speaker, second_speaker)
	local is_killer = character_community(db.actor) == "actor_killer"
	if x_cxv_perks_data.perks["perk_the_exalted"] <= 0 or is_killer then
		return is_killer
	elseif x_cxv_perks_data.perks["perk_the_exalted"] > 0 then
		local is_ally = is_actor_ally(first_speaker, second_speaker)
		return (is_killer or is_ally)
	end
end


base_army_faction = dialogs.actor_army
function dialogs.actor_army(first_speaker, second_speaker)
	local is_army = character_community(db.actor) == "actor_army"
	if x_cxv_perks_data.perks["perk_the_exalted"] <= 0 or is_army then
		return is_army
	elseif x_cxv_perks_data.perks["perk_the_exalted"] > 0 then
		local is_ally = is_actor_ally(first_speaker, second_speaker)
		return (is_army or is_ally)
	end
end


base_ecolog_faction = dialogs.actor_ecolog
function dialogs.actor_ecolog(first_speaker, second_speaker)
	local is_ecolog = character_community(db.actor) == "actor_ecolog"
	if x_cxv_perks_data.perks["perk_the_exalted"] <= 0 or is_ecolog then
		return is_ecolog
	elseif x_cxv_perks_data.perks["perk_the_exalted"] > 0 then
		local is_ally = is_actor_ally(first_speaker, second_speaker)
		return (is_ecolog or is_ally)
	end
end


base_csky_faction = dialogs.actor_csky
function dialogs.actor_csky(first_speaker, second_speaker)
	local is_csky = character_community(db.actor) == "actor_csky"
	if x_cxv_perks_data.perks["perk_the_exalted"] <= 0 or is_csky then
		return is_csky
	elseif x_cxv_perks_data.perks["perk_the_exalted"] > 0 then
		local is_ally = is_actor_ally(first_speaker, second_speaker)
		return (is_csky or is_ally)
	end
end

base_monolith_faction = dialogs.actor_monolith
function dialogs.actor_monolith(first_speaker, second_speaker)
	local is_monolith = character_community(db.actor) == "actor_monolith"
	if x_cxv_perks_data.perks["perk_the_exalted"] <= 0 or is_monolith then
		return is_monolith
	elseif x_cxv_perks_data.perks["perk_the_exalted"] > 0 then
		return (is_monolith or is_ally)
	end
end


base_renegade_faction = dialogs.actor_renegade
function dialogs.actor_renegade(first_speaker, second_speaker)
	local is_renegade = character_community(db.actor) == "actor_renegade"
	if x_cxv_perks_data.perks["perk_the_exalted"] <= 0 or is_monolith then
		return is_renegade
	elseif x_cxv_perks_data.perks["perk_the_exalted"] > 0 then
		local is_ally = is_actor_ally(first_speaker, second_speaker)
		return (is_renegade or is_ally)
	end
end


base_greh_faction = dialogs.actor_greh
function dialogs.actor_greh(first_speaker, second_speaker)
	local is_greh = character_community(db.actor) == "actor_greh"
	if x_cxv_perks_data.perks["perk_the_exalted"] <= 0 or is_greh then
		return is_greh
	elseif x_cxv_perks_data.perks["perk_the_exalted"] > 0 then
		local is_ally = is_actor_ally(first_speaker, second_speaker)
		return (is_greh or is_ally)
	end
end


base_isg_faction = dialogs.actor_isg
function dialogs.actor_isg(first_speaker, second_speaker)
	local is_isg = character_community(db.actor) == "actor_isg"
	if x_cxv_perks_data.perks["perk_the_exalted"] <= 0 or is_isg then
		return is_isg
	elseif x_cxv_perks_data.perks["perk_the_exalted"] > 0 then
		local is_ally = is_actor_ally(first_speaker, second_speaker)
		return (is_isg or is_ally)
	end
end

-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------
base_not_stalker = dialogs.actor_not_stalker
function dialogs.actor_not_stalker(first_speaker, second_speaker)

	local is_not_stalker = character_community(db.actor) ~= "actor_stalker"
	if x_cxv_perks_data.perks["perk_the_exalted"] <= 0 or is_not_stalker then
		return is_not_stalker
	elseif x_cxv_perks_data.perks["perk_the_exalted"] > 0 then
		local goodwill = relation_registry.community_goodwill("stalker", AC_ID)
		return goodwill <= goodwill_honored
	end
	
end

base_not_bandit = dialogs.actor_not_bandit
function dialogs.actor_not_bandit(first_speaker, second_speaker)
	local is_not_bandit = character_community(db.actor) ~= "actor_bandit"
	if x_cxv_perks_data.perks["perk_the_exalted"] <= 0 or is_not_bandit then
		return is_not_bandit
	elseif x_cxv_perks_data.perks["perk_the_exalted"] > 0 then
		local goodwill = relation_registry.community_goodwill("bandit", AC_ID)
		return goodwill <= goodwill_honored
	end
end

base_not_freedom = dialogs.actor_not_freedom
function dialogs.actor_not_freedom(first_speaker, second_speaker)
	local is_not_freedom = character_community(db.actor) ~= "actor_freedom"
	if x_cxv_perks_data.perks["perk_the_exalted"] <= 0 or is_not_freedom then
		return is_not_freedom
	elseif x_cxv_perks_data.perks["perk_the_exalted"] > 0 then
		local goodwill = relation_registry.community_goodwill("freedom", AC_ID)
		return goodwill <= goodwill_honored
	end
end

base_not_dolg = dialogs.actor_not_dolg
function dialogs.actor_not_dolg(first_speaker, second_speaker)
	local is_not_dolg = character_community(db.actor) ~= "actor_dolg"
	if x_cxv_perks_data.perks["perk_the_exalted"] <= 0 or is_not_dolg then
		return is_not_dolg
	elseif x_cxv_perks_data.perks["perk_the_exalted"] > 0 then
		local goodwill = relation_registry.community_goodwill("dolg", AC_ID)
		return goodwill <= goodwill_honored
	end
end

base_not_killer = dialogs.actor_not_killer
function dialogs.actor_not_killer(first_speaker, second_speaker)
	local is_not_killer = character_community(db.actor) ~= "actor_killer"
	if x_cxv_perks_data.perks["perk_the_exalted"] <= 0 or is_not_killer then
		return is_not_killer
	elseif x_cxv_perks_data.perks["perk_the_exalted"] > 0 then
		local goodwill = relation_registry.community_goodwill("killer", AC_ID)
		return goodwill <= goodwill_honored
	end
end

base_not_army = dialogs.actor_not_army
function dialogs.actor_not_army(first_speaker, second_speaker)
	local is_not_army = character_community(db.actor) ~= "actor_army"
	if x_cxv_perks_data.perks["perk_the_exalted"] <= 0 or is_not_army then
		return is_not_army
	elseif x_cxv_perks_data.perks["perk_the_exalted"] > 0 then
		local goodwill = relation_registry.community_goodwill("army", AC_ID)
		return goodwill <= goodwill_honored
	end
end

base_not_ecolog = dialogs.actor_not_ecolog
function dialogs.actor_not_ecolog(first_speaker, second_speaker)
	local is_not_ecolog = character_community(db.actor) ~= "actor_ecolog"
	if x_cxv_perks_data.perks["perk_the_exalted"] <= 0 or is_not_ecolog then
		return is_not_ecolog
	elseif x_cxv_perks_data.perks["perk_the_exalted"] > 0 then
		local goodwill = relation_registry.community_goodwill("ecolog", AC_ID)
		return goodwill <= goodwill_honored
	end
end

base_not_csky = dialogs.actor_not_csky
function dialogs.actor_not_csky(first_speaker, second_speaker)
	local is_not_csky = character_community(db.actor) ~= "actor_csky"
	if x_cxv_perks_data.perks["perk_the_exalted"] <= 0 or is_not_csky then
		return is_not_csky
	elseif x_cxv_perks_data.perks["perk_the_exalted"] > 0 then
		local goodwill = relation_registry.community_goodwill("csky", AC_ID)
		return goodwill <= goodwill_honored
	end
end

base_not_monolith = dialogs.actor_not_monolith
function dialogs.actor_not_monolith(first_speaker, second_speaker)
	local is_not_monolith = character_community(db.actor) ~= "actor_monolith"
	if x_cxv_perks_data.perks["perk_the_exalted"] <= 0 or is_not_monolith then
		return is_not_monolith
	elseif x_cxv_perks_data.perks["perk_the_exalted"] > 0 then
		local goodwill = relation_registry.community_goodwill("monolith", AC_ID)
		return goodwill <= goodwill_honored
	end
end

base_not_renegade = dialogs.actor_not_renegade
function dialogs.actor_not_renegade(first_speaker, second_speaker)
	local is_not_renegade = character_community(db.actor) ~= "actor_renegade"
	if x_cxv_perks_data.perks["perk_the_exalted"] <= 0 or is_not_renegade then
		return is_not_renegade
	elseif x_cxv_perks_data.perks["perk_the_exalted"] > 0 then
		local goodwill = relation_registry.community_goodwill("renegade", AC_ID)
		return goodwill <= goodwill_honored
	end
end

base_not_greh = dialogs.actor_not_greh
function dialogs.actor_not_greh(first_speaker, second_speaker)
	local is_not_greh = character_community(db.actor) ~= "actor_greh"
	if x_cxv_perks_data.perks["perk_the_exalted"] <= 0 or is_not_greh then
		return is_not_greh
	elseif x_cxv_perks_data.perks["perk_the_exalted"] > 0 then
		local goodwill = relation_registry.community_goodwill("greh", AC_ID)
		return goodwill <= goodwill_honored
	end
end

base_not_isg = dialogs.actor_not_isg
function dialogs.actor_not_isg(first_speaker, second_speaker)
	local is_not_isg = character_community(db.actor) ~= "actor_isg"
	if x_cxv_perks_data.perks["perk_the_exalted"] <= 0 or is_not_isg then
		return is_not_isg
	elseif x_cxv_perks_data.perks["perk_the_exalted"] > 0 then
		local goodwill = relation_registry.community_goodwill("isg", AC_ID)
		return goodwill <= goodwill_honored
	end
end

-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------

base_true_stalker = dialogs.actor_true_stalker
function dialogs.actor_true_stalker(first_speaker, second_speaker)
	local is_stalker = get_actor_true_community() == "stalker"
	if x_cxv_perks_data.perks["perk_the_exalted"] <= 0 or is_stalker then
		return is_stalker
	elseif x_cxv_perks_data.perks["perk_the_exalted"] > 0 then
		local goodwill = relation_registry.community_goodwill("stalker", AC_ID)
		return goodwill > goodwill_exalted
	end
end

base_true_bandit = dialogs.actor_true_bandit
function dialogs.actor_true_bandit(first_speaker, second_speaker)
	local is_bandit = get_actor_true_community() == "bandit"
	if x_cxv_perks_data.perks["perk_the_exalted"] <= 0 or is_bandit then
		return is_bandit
	elseif x_cxv_perks_data.perks["perk_the_exalted"] > 0 then
		local goodwill = relation_registry.community_goodwill("bandit", AC_ID)
		return goodwill > goodwill_exalted
	end
end

base_true_freedom = dialogs.actor_true_freedom
function dialogs.actor_true_freedom(first_speaker, second_speaker)
	local is_freedom = get_actor_true_community() == "freedom"
	if x_cxv_perks_data.perks["perk_the_exalted"] <= 0 or is_freedom then
		return is_freedom
	elseif x_cxv_perks_data.perks["perk_the_exalted"] > 0 then
		local goodwill = relation_registry.community_goodwill("freedom", AC_ID)
		return goodwill > goodwill_exalted
	end
end

base_true_dolg = dialogs.actor_true_dolg
function dialogs.actor_true_dolg(first_speaker, second_speaker)
	local is_dolg = get_actor_true_community() == "dolg"
	if x_cxv_perks_data.perks["perk_the_exalted"] <= 0 or is_dolg then
		return is_dolg
	elseif x_cxv_perks_data.perks["perk_the_exalted"] > 0 then
		local goodwill = relation_registry.community_goodwill("dolg", AC_ID)
		return goodwill > goodwill_exalted
	end
end

base_true_killer = dialogs.actor_true_killer
function dialogs.actor_true_killer(first_speaker, second_speaker)
	local is_killer = get_actor_true_community() == "killer"
	if x_cxv_perks_data.perks["perk_the_exalted"] <= 0 or is_killer then
		return is_killer
	elseif x_cxv_perks_data.perks["perk_the_exalted"] > 0 then
		local goodwill = relation_registry.community_goodwill("killer", AC_ID)
		return goodwill > goodwill_exalted
	end
end

base_true_army = dialogs.actor_true_army
function dialogs.actor_true_army(first_speaker, second_speaker)
	local is_army = get_actor_true_community() == "army"
	if x_cxv_perks_data.perks["perk_the_exalted"] <= 0 or is_army then
		return is_army
	elseif x_cxv_perks_data.perks["perk_the_exalted"] > 0 then
		local goodwill = relation_registry.community_goodwill("army", AC_ID)
		return goodwill > goodwill_exalted
	end
end

base_true_ecolog = dialogs.actor_true_ecolog
function dialogs.actor_true_ecolog(first_speaker, second_speaker)
	local is_ecolog = get_actor_true_community() == "ecolog"
	if x_cxv_perks_data.perks["perk_the_exalted"] <= 0 or is_ecolog then
		return is_ecolog
	elseif x_cxv_perks_data.perks["perk_the_exalted"] > 0 then
		local goodwill = relation_registry.community_goodwill("ecolog", AC_ID)
		return goodwill > goodwill_exalted
	end
end

base_true_csky = dialogs.actor_true_csky
function dialogs.actor_true_csky(first_speaker, second_speaker)
	local is_csky = get_actor_true_community() == "csky"
	if x_cxv_perks_data.perks["perk_the_exalted"] <= 0 or is_csky then
		return is_csky
	elseif x_cxv_perks_data.perks["perk_the_exalted"] > 0 then
		local goodwill = relation_registry.community_goodwill("csky", AC_ID)
		return goodwill > goodwill_exalted
	end
end

base_true_monolith = dialogs.actor_true_monolith
function dialogs.actor_true_monolith(first_speaker, second_speaker)
	local is_monolith = get_actor_true_community() == "monolith"
	if x_cxv_perks_data.perks["perk_the_exalted"] <= 0 or is_monolith then
		return is_monolith
	elseif x_cxv_perks_data.perks["perk_the_exalted"] > 0 then
		local goodwill = relation_registry.community_goodwill("monolith", AC_ID)
		return goodwill > goodwill_exalted
	end
end

base_true_renegade = dialogs.actor_true_renegade
function dialogs.actor_true_renegade(first_speaker, second_speaker)
	local is_renegade = get_actor_true_community() == "renegade"
	if x_cxv_perks_data.perks["perk_the_exalted"] <= 0 or is_renegade then
		return is_renegade
	elseif x_cxv_perks_data.perks["perk_the_exalted"] > 0 then
		local goodwill = relation_registry.community_goodwill("renegade", AC_ID)
		return goodwill > goodwill_exalted
	end
end

base_true_greh = dialogs.actor_true_greh
function dialogs.actor_true_greh(first_speaker, second_speaker)
	local is_greh = get_actor_true_community() == "greh"
	if x_cxv_perks_data.perks["perk_the_exalted"] <= 0 or is_greh then
		return is_greh
	elseif x_cxv_perks_data.perks["perk_the_exalted"] > 0 then
		local goodwill = relation_registry.community_goodwill("greh", AC_ID)
		return goodwill > goodwill_exalted
	end
end

base_true_isg = dialogs.actor_true_isg
function dialogs.actor_true_isg(first_speaker, second_speaker)
	local is_isg = get_actor_true_community() == "isg"
	if x_cxv_perks_data.perks["perk_the_exalted"] <= 0 or is_isg then
		return is_isg
	elseif x_cxv_perks_data.perks["perk_the_exalted"] > 0 then
		local goodwill = relation_registry.community_goodwill("isg", AC_ID)
		return goodwill > goodwill_exalted
	end
end

-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------

base_not_true_stalker = dialogs.actor_not_true_stalker
function dialogs.actor_not_true_stalker(first_speaker, second_speaker)
	local is_not_stalker = get_actor_true_community() ~= "stalker"
	if x_cxv_perks_data.perks["perk_the_exalted"] <= 0 or is_not_stalker then
		return is_not_stalker
	elseif x_cxv_perks_data.perks["perk_the_exalted"] > 0 then
		local goodwill = relation_registry.community_goodwill("stalker", AC_ID)
		return goodwill <= goodwill_exalted
	end
end

base_not_true_bandit = dialogs.actor_not_true_bandit
function dialogs.actor_not_true_bandit(first_speaker, second_speaker)
	local is_not_bandit = get_actor_true_community() ~= "bandit"
	if x_cxv_perks_data.perks["perk_the_exalted"] <= 0 or is_not_bandit then
		return is_not_bandit
	elseif x_cxv_perks_data.perks["perk_the_exalted"] > 0 then
		local goodwill = relation_registry.community_goodwill("bandit", AC_ID)
		return goodwill <= goodwill_exalted
	end
end

base_not_true_freedom = dialogs.actor_not_true_freedom
function dialogs.actor_not_true_freedom(first_speaker, second_speaker)
	local is_not_freedom = get_actor_true_community() ~= "freedom"
	if x_cxv_perks_data.perks["perk_the_exalted"] <= 0 or is_not_freedom then
		return is_not_freedom
	elseif x_cxv_perks_data.perks["perk_the_exalted"] > 0 then
		local goodwill = relation_registry.community_goodwill("freedom", AC_ID)
		return goodwill <= goodwill_exalted
	end
end

base_not_true_dolg = dialogs.actor_not_true_dolg
function dialogs.actor_not_true_dolg(first_speaker, second_speaker)
	local is_not_dolg = get_actor_true_community() ~= "dolg"
	if x_cxv_perks_data.perks["perk_the_exalted"] <= 0 or is_not_dolg then
		return is_not_dolg
	elseif x_cxv_perks_data.perks["perk_the_exalted"] > 0 then
		local goodwill = relation_registry.community_goodwill("dolg", AC_ID)
		return goodwill <= goodwill_exalted
	end
end

base_not_true_killer = dialogs.actor_not_true_killer
function dialogs.actor_not_true_killer(first_speaker, second_speaker)
	local is_not_killer = get_actor_true_community() ~= "killer"
	if x_cxv_perks_data.perks["perk_the_exalted"] <= 0 or is_not_killer then
		return is_not_killer
	elseif x_cxv_perks_data.perks["perk_the_exalted"] > 0 then
		local goodwill = relation_registry.community_goodwill("killer", AC_ID)
		return goodwill <= goodwill_exalted
	end
end

base_not_true_army = dialogs.actor_not_true_army
function dialogs.actor_not_true_army(first_speaker, second_speaker)
	local is_not_army = get_actor_true_community() ~= "army"
	if x_cxv_perks_data.perks["perk_the_exalted"] <= 0 or is_not_army then
		return is_not_army
	elseif x_cxv_perks_data.perks["perk_the_exalted"] > 0 then
		local goodwill = relation_registry.community_goodwill("army", AC_ID)
		return goodwill <= goodwill_exalted
	end
end

base_not_true_ecolog = dialogs.actor_not_true_ecolog
function dialogs.actor_not_true_ecolog(first_speaker, second_speaker)
	local is_not_ecolog = get_actor_true_community() ~= "ecolog"
	if x_cxv_perks_data.perks["perk_the_exalted"] <= 0 or is_not_ecolog then
		return is_not_ecolog
	elseif x_cxv_perks_data.perks["perk_the_exalted"] > 0 then
		local goodwill = relation_registry.community_goodwill("ecolog", AC_ID)
		return goodwill <= goodwill_exalted
	end
end

base_not_true_csky = dialogs.actor_not_true_csky
function dialogs.actor_not_true_csky(first_speaker, second_speaker)
	local is_not_csky = get_actor_true_community() ~= "csky"
	if x_cxv_perks_data.perks["perk_the_exalted"] <= 0 or is_not_csky then
		return is_not_csky
	elseif x_cxv_perks_data.perks["perk_the_exalted"] > 0 then
		local goodwill = relation_registry.community_goodwill("csky", AC_ID)
		return goodwill <= goodwill_exalted
	end
end

base_not_true_monolith = dialogs.actor_not_true_monolith
function dialogs.actor_not_true_monolith(first_speaker, second_speaker)
	local is_not_monolith = get_actor_true_community() ~= "monolith"
	if x_cxv_perks_data.perks["perk_the_exalted"] <= 0 or is_not_monolith then
		return is_not_monolith
	elseif x_cxv_perks_data.perks["perk_the_exalted"] > 0 then
		local goodwill = relation_registry.community_goodwill("monolith", AC_ID)
		return goodwill <= goodwill_exalted
	end
end

base_not_true_renegade = dialogs.actor_not_true_renegade
function dialogs.actor_not_true_renegade(first_speaker, second_speaker)
	local is_not_renegade = get_actor_true_community() ~= "renegade"
	if x_cxv_perks_data.perks["perk_the_exalted"] <= 0 or is_not_renegade then
		return is_not_renegade
	elseif x_cxv_perks_data.perks["perk_the_exalted"] > 0 then
		local goodwill = relation_registry.community_goodwill("renegade", AC_ID)
		return goodwill <= goodwill_exalted
	end
end

base_not_true_greh = dialogs.actor_not_true_greh
function dialogs.actor_not_true_greh(first_speaker, second_speaker)
	local is_not_greh = get_actor_true_community() ~= "greh"
	if x_cxv_perks_data.perks["perk_the_exalted"] <= 0 or is_not_greh then
		return is_not_greh
	elseif x_cxv_perks_data.perks["perk_the_exalted"] > 0 then
		local goodwill = relation_registry.community_goodwill("greh", AC_ID)
		return goodwill <= goodwill_exalted
	end
end

base_not_true_isg = dialogs.actor_not_true_isg
function dialogs.actor_not_true_isg(first_speaker, second_speaker)
	local is_not_isg = get_actor_true_community() ~= "isg"
	if x_cxv_perks_data.perks["perk_the_exalted"] <= 0 or is_not_isg then
		return is_not_isg
	elseif x_cxv_perks_data.perks["perk_the_exalted"] > 0 then
		local goodwill = relation_registry.community_goodwill("isg", AC_ID)
		return goodwill <= goodwill_exalted
	end
end

-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------

base_valid_faction_actor = utils_slht.valid_faction_actor
function utils_slht.valid_faction_actor()

	if x_cxv_perks_data.perks["perk_the_exalted"] == 0 then return base_valid_faction_actor() end 
	
	local actor_com = get_actor_true_community()
	local factions = { ["army"] = true }
	if actor_com and factions[actor_com] then 
	    return true 
	elseif not factions[actor_com] then
		local goodwill = relation_registry.community_goodwill("army", AC_ID)
		printf("Goodwill w/ Army: %s", goodwill)
		if goodwill > goodwill_exalted then 
			return true
		end
	end
	return false
end

function ah_dialogs.check_community_actor(first_speaker, second_speaker) 
	if x_cxv_perks_data.perks["perk_the_exalted"] == 0 then
		return (db.actor:character_community() == "actor_monolith" )
	else
		local goodwill = relation_registry.community_goodwill("monolith", AC_ID)
		return goodwill > goodwill_honored
	end
end