local the_exalted = 0

local function experience_skill_on_update(id, data)
	if (id == "perk_the_exalted") then
		the_exalted = data["curr_level"]
	end
end

local goodwill_honored = 999
local goodwill_exalted = 1499

local function is_actor_ally(first_speaker, second_speaker)
	local npc = dialogs.who_is_npc(first_speaker, second_speaker)
	local sec = npc:section()
	
	local comm = sim_offline_combat.story_id_communities[sec] or character_community(npc)
	if (comm == "trader") then comm = "stalker" end
	
	local goodwill = relation_registry.community_goodwill(comm, AC_ID)
	return goodwill > goodwill_honored
end

-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------

base_stalker_faction = dialogs.actor_stalker
function dialogs.actor_stalker(first_speaker, second_speaker)
	local is_stalker = character_community(db.actor) == "actor_stalker"
	if the_exalted <= 0 or is_stalker then
		return is_stalker
	elseif the_exalted > 0 then
		local is_ally = is_actor_ally(first_speaker, second_speaker)
		return (is_stalker or is_ally)
	end
end

base_bandit_faction = dialogs.actor_bandit
function dialogs.actor_bandit(first_speaker, second_speaker)
	local is_bandit = character_community(db.actor) == "actor_bandit"
	if the_exalted <= 0 or is_bandit then
		return is_bandit
	elseif the_exalted > 0 then
		local is_ally = is_actor_ally(first_speaker, second_speaker)
		return (is_bandit or is_ally)
	end
end

base_freedom_faction = dialogs.actor_freedom
function dialogs.actor_freedom(first_speaker, second_speaker)
	local is_freedom = character_community(db.actor) == "actor_freedom"
	if the_exalted <= 0 or is_freedom then
		return is_freedom
	elseif the_exalted > 0 then
		local is_ally = is_actor_ally(first_speaker, second_speaker)
		return (is_freedom or is_ally)
	end
end


base_dolg_faction = dialogs.actor_dolg
function dialogs.actor_dolg(first_speaker, second_speaker)
	local is_dolg = character_community(db.actor) == "actor_dolg"
	if the_exalted <= 0 or is_dolg then
		return is_dolg
	elseif the_exalted > 0 then
		local is_ally = is_actor_ally(first_speaker, second_speaker)
		return (is_dolg or is_ally)
	end
end


base_killer_faction = dialogs.actor_killer
function dialogs.actor_killer(first_speaker, second_speaker)
	local is_killer = character_community(db.actor) == "actor_killer"
	if the_exalted <= 0 or is_killer then
		return is_killer
	elseif the_exalted > 0 then
		local is_ally = is_actor_ally(first_speaker, second_speaker)
		return (is_killer or is_ally)
	end
end


base_army_faction = dialogs.actor_army
function dialogs.actor_army(first_speaker, second_speaker)
	local is_army = character_community(db.actor) == "actor_army"
	if the_exalted <= 0 or is_army then
		return is_army
	elseif the_exalted > 0 then
		local is_ally = is_actor_ally(first_speaker, second_speaker)
		return (is_army or is_ally)
	end
end


base_ecolog_faction = dialogs.actor_ecolog
function dialogs.actor_ecolog(first_speaker, second_speaker)
	local is_ecolog = character_community(db.actor) == "actor_ecolog"
	if the_exalted <= 0 or is_ecolog then
		return is_ecolog
	elseif the_exalted > 0 then
		local is_ally = is_actor_ally(first_speaker, second_speaker)
		return (is_ecolog or is_ally)
	end
end


base_csky_faction = dialogs.actor_csky
function dialogs.actor_csky(first_speaker, second_speaker)
	local is_csky = character_community(db.actor) == "actor_csky"
	if the_exalted <= 0 or is_csky then
		return is_csky
	elseif the_exalted > 0 then
		local is_ally = is_actor_ally(first_speaker, second_speaker)
		return (is_csky or is_ally)
	end
end

base_monolith_faction = dialogs.actor_monolith
function dialogs.actor_monolith(first_speaker, second_speaker)
	local is_monolith = character_community(db.actor) == "actor_monolith"
	if the_exalted <= 0 or is_monolith then
		return is_monolith
	elseif the_exalted > 0 then
		return (is_monolith or is_ally)
	end
end


base_renegade_faction = dialogs.actor_renegade
function dialogs.actor_renegade(first_speaker, second_speaker)
	local is_renegade = character_community(db.actor) == "actor_renegade"
	if the_exalted <= 0 or is_monolith then
		return is_renegade
	elseif the_exalted > 0 then
		local is_ally = is_actor_ally(first_speaker, second_speaker)
		return (is_renegade or is_ally)
	end
end


base_greh_faction = dialogs.actor_greh
function dialogs.actor_greh(first_speaker, second_speaker)
	local is_greh = character_community(db.actor) == "actor_greh"
	if the_exalted <= 0 or is_greh then
		return is_greh
	elseif the_exalted > 0 then
		local is_ally = is_actor_ally(first_speaker, second_speaker)
		return (is_greh or is_ally)
	end
end


base_isg_faction = dialogs.actor_isg
function dialogs.actor_isg(first_speaker, second_speaker)
	local is_isg = character_community(db.actor) == "actor_isg"
	if the_exalted <= 0 or is_isg then
		return is_isg
	elseif the_exalted > 0 then
		local is_ally = is_actor_ally(first_speaker, second_speaker)
		return (is_isg or is_ally)
	end
end

-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------
base_not_stalker = dialogs.actor_not_stalker
function dialogs.actor_not_stalker(first_speaker, second_speaker)

	local is_not_stalker = character_community(db.actor) ~= "actor_stalker"
	if the_exalted <= 0 or is_not_stalker then
		return is_not_stalker
	elseif the_exalted > 0 then
		local goodwill = relation_registry.community_goodwill("stalker", AC_ID)
		return goodwill <= goodwill_honored
	end
	
end

base_not_bandit = dialogs.actor_not_bandit
function dialogs.actor_not_bandit(first_speaker, second_speaker)
	local is_not_bandit = character_community(db.actor) ~= "actor_bandit"
	if the_exalted <= 0 or is_not_bandit then
		return is_not_bandit
	elseif the_exalted > 0 then
		local goodwill = relation_registry.community_goodwill("bandit", AC_ID)
		return goodwill <= goodwill_honored
	end
end

base_not_freedom = dialogs.actor_not_freedom
function dialogs.actor_not_freedom(first_speaker, second_speaker)
	local is_not_freedom = character_community(db.actor) ~= "actor_freedom"
	if the_exalted <= 0 or is_not_freedom then
		return is_not_freedom
	elseif the_exalted > 0 then
		local goodwill = relation_registry.community_goodwill("freedom", AC_ID)
		return goodwill <= goodwill_honored
	end
end

base_not_dolg = dialogs.actor_not_dolg
function dialogs.actor_not_dolg(first_speaker, second_speaker)
	local is_not_dolg = character_community(db.actor) ~= "actor_dolg"
	if the_exalted <= 0 or is_not_dolg then
		return is_not_dolg
	elseif the_exalted > 0 then
		local goodwill = relation_registry.community_goodwill("dolg", AC_ID)
		return goodwill <= goodwill_honored
	end
end

base_not_killer = dialogs.actor_not_killer
function dialogs.actor_not_killer(first_speaker, second_speaker)
	local is_not_killer = character_community(db.actor) ~= "actor_killer"
	if the_exalted <= 0 or is_not_killer then
		return is_not_killer
	elseif the_exalted > 0 then
		local goodwill = relation_registry.community_goodwill("killer", AC_ID)
		return goodwill <= goodwill_honored
	end
end

base_not_army = dialogs.actor_not_army
function dialogs.actor_not_army(first_speaker, second_speaker)
	local is_not_army = character_community(db.actor) ~= "actor_army"
	if the_exalted <= 0 or is_not_army then
		return is_not_army
	elseif the_exalted > 0 then
		local goodwill = relation_registry.community_goodwill("army", AC_ID)
		return goodwill <= goodwill_honored
	end
end

base_not_ecolog = dialogs.actor_not_ecolog
function dialogs.actor_not_ecolog(first_speaker, second_speaker)
	local is_not_ecolog = character_community(db.actor) ~= "actor_ecolog"
	if the_exalted <= 0 or is_not_ecolog then
		return is_not_ecolog
	elseif the_exalted > 0 then
		local goodwill = relation_registry.community_goodwill("ecolog", AC_ID)
		return goodwill <= goodwill_honored
	end
end

base_not_csky = dialogs.actor_not_csky
function dialogs.actor_not_csky(first_speaker, second_speaker)
	local is_not_csky = character_community(db.actor) ~= "actor_csky"
	if the_exalted <= 0 or is_not_csky then
		return is_not_csky
	elseif the_exalted > 0 then
		local goodwill = relation_registry.community_goodwill("csky", AC_ID)
		return goodwill <= goodwill_honored
	end
end

base_not_monolith = dialogs.actor_not_monolith
function dialogs.actor_not_monolith(first_speaker, second_speaker)
	local is_not_monolith = character_community(db.actor) ~= "actor_monolith"
	if the_exalted <= 0 or is_not_monolith then
		return is_not_monolith
	elseif the_exalted > 0 then
		local goodwill = relation_registry.community_goodwill("monolith", AC_ID)
		return goodwill <= goodwill_honored
	end
end

base_not_renegade = dialogs.actor_not_renegade
function dialogs.actor_not_renegade(first_speaker, second_speaker)
	local is_not_renegade = character_community(db.actor) ~= "actor_renegade"
	if the_exalted <= 0 or is_not_renegade then
		return is_not_renegade
	elseif the_exalted > 0 then
		local goodwill = relation_registry.community_goodwill("renegade", AC_ID)
		return goodwill <= goodwill_honored
	end
end

base_not_greh = dialogs.actor_not_greh
function dialogs.actor_not_greh(first_speaker, second_speaker)
	local is_not_greh = character_community(db.actor) ~= "actor_greh"
	if the_exalted <= 0 or is_not_greh then
		return is_not_greh
	elseif the_exalted > 0 then
		local goodwill = relation_registry.community_goodwill("greh", AC_ID)
		return goodwill <= goodwill_honored
	end
end

base_not_isg = dialogs.actor_not_isg
function dialogs.actor_not_isg(first_speaker, second_speaker)
	local is_not_isg = character_community(db.actor) ~= "actor_isg"
	if the_exalted <= 0 or is_not_isg then
		return is_not_isg
	elseif the_exalted > 0 then
		local goodwill = relation_registry.community_goodwill("isg", AC_ID)
		return goodwill <= goodwill_honored
	end
end

-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------

base_true_stalker = dialogs.actor_true_stalker
function dialogs.actor_true_stalker(first_speaker, second_speaker)
	local is_stalker = get_actor_true_community() == "stalker"
	if the_exalted <= 0 or is_stalker then
		return is_stalker
	elseif the_exalted > 0 then
		local goodwill = relation_registry.community_goodwill("stalker", AC_ID)
		return goodwill > goodwill_exalted
	end
end

base_true_bandit = dialogs.actor_true_bandit
function dialogs.actor_true_bandit(first_speaker, second_speaker)
	local is_bandit = get_actor_true_community() == "bandit"
	if the_exalted <= 0 or is_bandit then
		return is_bandit
	elseif the_exalted > 0 then
		local goodwill = relation_registry.community_goodwill("bandit", AC_ID)
		return goodwill > goodwill_exalted
	end
end

base_true_freedom = dialogs.actor_true_freedom
function dialogs.actor_true_freedom(first_speaker, second_speaker)
	local is_freedom = get_actor_true_community() == "freedom"
	if the_exalted <= 0 or is_freedom then
		return is_freedom
	elseif the_exalted > 0 then
		local goodwill = relation_registry.community_goodwill("freedom", AC_ID)
		return goodwill > goodwill_exalted
	end
end

base_true_dolg = dialogs.actor_true_dolg
function dialogs.actor_true_dolg(first_speaker, second_speaker)
	local is_dolg = get_actor_true_community() == "dolg"
	if the_exalted <= 0 or is_dolg then
		return is_dolg
	elseif the_exalted > 0 then
		local goodwill = relation_registry.community_goodwill("dolg", AC_ID)
		return goodwill > goodwill_exalted
	end
end

base_true_killer = dialogs.actor_true_killer
function dialogs.actor_true_killer(first_speaker, second_speaker)
	local is_killer = get_actor_true_community() == "killer"
	if the_exalted <= 0 or is_killer then
		return is_killer
	elseif the_exalted > 0 then
		local goodwill = relation_registry.community_goodwill("killer", AC_ID)
		return goodwill > goodwill_exalted
	end
end

base_true_army = dialogs.actor_true_army
function dialogs.actor_true_army(first_speaker, second_speaker)
	local is_army = get_actor_true_community() == "army"
	if the_exalted <= 0 or is_army then
		return is_army
	elseif the_exalted > 0 then
		local goodwill = relation_registry.community_goodwill("army", AC_ID)
		return goodwill > goodwill_exalted
	end
end

base_true_ecolog = dialogs.actor_true_ecolog
function dialogs.actor_true_ecolog(first_speaker, second_speaker)
	local is_ecolog = get_actor_true_community() == "ecolog"
	if the_exalted <= 0 or is_ecolog then
		return is_ecolog
	elseif the_exalted > 0 then
		local goodwill = relation_registry.community_goodwill("ecolog", AC_ID)
		return goodwill > goodwill_exalted
	end
end

base_true_csky = dialogs.actor_true_csky
function dialogs.actor_true_csky(first_speaker, second_speaker)
	local is_csky = get_actor_true_community() == "csky"
	if the_exalted <= 0 or is_csky then
		return is_csky
	elseif the_exalted > 0 then
		local goodwill = relation_registry.community_goodwill("csky", AC_ID)
		return goodwill > goodwill_exalted
	end
end

base_true_monolith = dialogs.actor_true_monolith
function dialogs.actor_true_monolith(first_speaker, second_speaker)
	local is_monolith = get_actor_true_community() == "monolith"
	if the_exalted <= 0 or is_monolith then
		return is_monolith
	elseif the_exalted > 0 then
		local goodwill = relation_registry.community_goodwill("monolith", AC_ID)
		return goodwill > goodwill_exalted
	end
end

base_true_renegade = dialogs.actor_true_renegade
function dialogs.actor_true_renegade(first_speaker, second_speaker)
	local is_renegade = get_actor_true_community() == "renegade"
	if the_exalted <= 0 or is_renegade then
		return is_renegade
	elseif the_exalted > 0 then
		local goodwill = relation_registry.community_goodwill("renegade", AC_ID)
		return goodwill > goodwill_exalted
	end
end

base_true_greh = dialogs.actor_true_greh
function dialogs.actor_true_greh(first_speaker, second_speaker)
	local is_greh = get_actor_true_community() == "greh"
	if the_exalted <= 0 or is_greh then
		return is_greh
	elseif the_exalted > 0 then
		local goodwill = relation_registry.community_goodwill("greh", AC_ID)
		return goodwill > goodwill_exalted
	end
end

base_true_isg = dialogs.actor_true_isg
function dialogs.actor_true_isg(first_speaker, second_speaker)
	local is_isg = get_actor_true_community() == "isg"
	if the_exalted <= 0 or is_isg then
		return is_isg
	elseif the_exalted > 0 then
		local goodwill = relation_registry.community_goodwill("isg", AC_ID)
		return goodwill > goodwill_exalted
	end
end

-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------

base_not_true_stalker = dialogs.actor_not_true_stalker
function dialogs.actor_not_true_stalker(first_speaker, second_speaker)
	local is_not_stalker = get_actor_true_community() ~= "stalker"
	if the_exalted <= 0 or is_not_stalker then
		return is_not_stalker
	elseif the_exalted > 0 then
		local goodwill = relation_registry.community_goodwill("stalker", AC_ID)
		return goodwill <= goodwill_exalted
	end
end

base_not_true_bandit = dialogs.actor_not_true_bandit
function dialogs.actor_not_true_bandit(first_speaker, second_speaker)
	local is_not_bandit = get_actor_true_community() ~= "bandit"
	if the_exalted <= 0 or is_not_bandit then
		return is_not_bandit
	elseif the_exalted > 0 then
		local goodwill = relation_registry.community_goodwill("bandit", AC_ID)
		return goodwill <= goodwill_exalted
	end
end

base_not_true_freedom = dialogs.actor_not_true_freedom
function dialogs.actor_not_true_freedom(first_speaker, second_speaker)
	local is_not_freedom = get_actor_true_community() ~= "freedom"
	if the_exalted <= 0 or is_not_freedom then
		return is_not_freedom
	elseif the_exalted > 0 then
		local goodwill = relation_registry.community_goodwill("freedom", AC_ID)
		return goodwill <= goodwill_exalted
	end
end

base_not_true_dolg = dialogs.actor_not_true_dolg
function dialogs.actor_not_true_dolg(first_speaker, second_speaker)
	local is_not_dolg = get_actor_true_community() ~= "dolg"
	if the_exalted <= 0 or is_not_dolg then
		return is_not_dolg
	elseif the_exalted > 0 then
		local goodwill = relation_registry.community_goodwill("dolg", AC_ID)
		return goodwill <= goodwill_exalted
	end
end

base_not_true_killer = dialogs.actor_not_true_killer
function dialogs.actor_not_true_killer(first_speaker, second_speaker)
	local is_not_killer = get_actor_true_community() ~= "killer"
	if the_exalted <= 0 or is_not_killer then
		return is_not_killer
	elseif the_exalted > 0 then
		local goodwill = relation_registry.community_goodwill("killer", AC_ID)
		return goodwill <= goodwill_exalted
	end
end

base_not_true_army = dialogs.actor_not_true_army
function dialogs.actor_not_true_army(first_speaker, second_speaker)
	local is_not_army = get_actor_true_community() ~= "army"
	if the_exalted <= 0 or is_not_army then
		return is_not_army
	elseif the_exalted > 0 then
		local goodwill = relation_registry.community_goodwill("army", AC_ID)
		return goodwill <= goodwill_exalted
	end
end

base_not_true_ecolog = dialogs.actor_not_true_ecolog
function dialogs.actor_not_true_ecolog(first_speaker, second_speaker)
	local is_not_ecolog = get_actor_true_community() ~= "ecolog"
	if the_exalted <= 0 or is_not_ecolog then
		return is_not_ecolog
	elseif the_exalted > 0 then
		local goodwill = relation_registry.community_goodwill("ecolog", AC_ID)
		return goodwill <= goodwill_exalted
	end
end

base_not_true_csky = dialogs.actor_not_true_csky
function dialogs.actor_not_true_csky(first_speaker, second_speaker)
	local is_not_csky = get_actor_true_community() ~= "csky"
	if the_exalted <= 0 or is_not_csky then
		return is_not_csky
	elseif the_exalted > 0 then
		local goodwill = relation_registry.community_goodwill("csky", AC_ID)
		return goodwill <= goodwill_exalted
	end
end

base_not_true_monolith = dialogs.actor_not_true_monolith
function dialogs.actor_not_true_monolith(first_speaker, second_speaker)
	local is_not_monolith = get_actor_true_community() ~= "monolith"
	if the_exalted <= 0 or is_not_monolith then
		return is_not_monolith
	elseif the_exalted > 0 then
		local goodwill = relation_registry.community_goodwill("monolith", AC_ID)
		return goodwill <= goodwill_exalted
	end
end

base_not_true_renegade = dialogs.actor_not_true_renegade
function dialogs.actor_not_true_renegade(first_speaker, second_speaker)
	local is_not_renegade = get_actor_true_community() ~= "renegade"
	if the_exalted <= 0 or is_not_renegade then
		return is_not_renegade
	elseif the_exalted > 0 then
		local goodwill = relation_registry.community_goodwill("renegade", AC_ID)
		return goodwill <= goodwill_exalted
	end
end

base_not_true_greh = dialogs.actor_not_true_greh
function dialogs.actor_not_true_greh(first_speaker, second_speaker)
	local is_not_greh = get_actor_true_community() ~= "greh"
	if the_exalted <= 0 or is_not_greh then
		return is_not_greh
	elseif the_exalted > 0 then
		local goodwill = relation_registry.community_goodwill("greh", AC_ID)
		return goodwill <= goodwill_exalted
	end
end

base_not_true_isg = dialogs.actor_not_true_isg
function dialogs.actor_not_true_isg(first_speaker, second_speaker)
	local is_not_isg = get_actor_true_community() ~= "isg"
	if the_exalted <= 0 or is_not_isg then
		return is_not_isg
	elseif the_exalted > 0 then
		local goodwill = relation_registry.community_goodwill("isg", AC_ID)
		return goodwill <= goodwill_exalted
	end
end

-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------

local is_exalted = false
local current_exalted_faction = 0
local faction_checklist =
{
	"csky",
	"dolg",
	"ecolog",
	"freedom",
	"killer",
	"stalker",
}
	
local story_factions = {
	["csky"] = true,
	["dolg"] = true,
	["ecolog"] = true,
	["freedom"] = true,
	["killer"] = true,
	["stalker"] = true,
}

base_story_func = dialogs.can_do_task_mysteries_of_the_zone
function dialogs.can_do_task_mysteries_of_the_zone(a,b)
	
	local actor_comm = character_community(db.actor):sub(7)
	
	load_exalted_status()
	if the_exalted > 0 and ((not is_exalted) or (current_exalted_faction == 0) or (not story_factions[actor_comm])) then
		
		if current_exalted_faction ~= 0 then
			actor_comm = current_exalted_faction
			is_exalted = true
			save_exalted_status()
		else
			for i=1, #faction_checklist do
				if not is_exalted then
					local goodwill = relation_registry.community_goodwill(faction_checklist[i], AC_ID)
					is_exalted = goodwill > goodwill_exalted
					actor_comm = faction_checklist[i]
					current_exalted_faction = faction_checklist[i]
					save_exalted_status()
				end
			end
		end
	end
	
	if actor_comm and story_factions[actor_comm] and (not has_alife_info("story_mode_disabled")) then
		return true
	end
	return false
end

-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------

local lttz_faction_infos = {
	["csky"] = {
		info = {
			[1] = "living_legend_csky",
			[2] = "living_legend_csky_answer",
			[3] = "mortal_sin_csky",
			[4] = "operation_afterglow_csky",
			[5] = "living_legend_st",
		},
		task = {
			[1] = "lttz_ll_finish_csky",
			[2] = "lttz_ms_start_csky",
			[3] = "lttz_ms_report_csky",
			[4] = "lttz_ms_ambush_csky",
			[5] = "lttz_ms_urban_warfare_csky",
			[6] = "lttz_ms_zone_hero_csky",
			[7] = "lttz_ll_visit_barkeep",
		}
	},
	
	["dolg"] = {
		info = {
			[1] = "living_legend_dolg",
			[2] = "living_legend_dolg_answer",
			[3] = "mortal_sin_dolg",
			[4] = "operation_afterglow_dolg",
			[5] = "living_legend_st",
		},
		task = {
			[1] = "lttz_ll_finish_dolg",
			[2] = "lttz_ms_start_dolg",
			[3] = "lttz_ms_report_dolg",
			[4] = "lttz_ms_ambush_dolg",
			[5] = "lttz_ms_urban_warfare_dolg",
			[6] = "lttz_ms_zone_hero_dolg",
			[7] = "lttz_ll_visit_barkeep",
		}
	},
	
	["freedom"] = {
		info = {
			[1] = "living_legend_freedom",
			[2] = "living_legend_freedom_answer",
			[3] = "mortal_sin_freedom",
			[4] = "operation_afterglow_freedom",
			[5] = "living_legend_alt",
		},
		task = {
			[1] = "lttz_ll_finish_freedom",
			[2] = "lttz_ms_start_freedom",
			[3] = "lttz_ms_report_freedom",
			[4] = "lttz_ms_ambush_freedom",
			[5] = "lttz_ms_urban_warfare_freedom",
			[6] = "lttz_ms_zone_hero_freedom",
			[7] = "lttz_ll_visit_blackjack",
		}
	},
	
	["ecolog"] = {
		info = {
			[1] = "living_legend_ecolog",
			[2] = "living_legend_ecolog_answer",
			[3] = "mortal_sin_ecolog",
			[4] = "operation_afterglow_ecolog",
			[5] = "living_legend_st",
		},
		task = {
			[1] = "lttz_ll_finish_ecolog",
			[2] = "lttz_ms_start_ecolog",
			[3] = "lttz_ms_report_ecolog",
			[4] = "lttz_ms_ambush_ecolog",
			[5] = "lttz_ms_urban_warfare_ecolog",
			[6] = "lttz_ms_zone_hero_ecolog",
			[7] = "lttz_ll_visit_barkeep",
		}
	},
	
	["killer"] = {
		info = {
			[1] = "living_legend_killer",
			[2] = "living_legend_killer_answer",
			[3] = "mortal_sin_killer",
			[4] = "operation_afterglow_killer",
			[5] = "living_legend_alt",
		},
		task = {
			[1] = "lttz_ll_finish_killer",
			[2] = "lttz_ms_start_killer",
			[3] = "lttz_ms_report_killer",
			[4] = "lttz_ms_ambush_killer",
			[5] = "lttz_ms_urban_warfare_killer",
			[6] = "lttz_ms_zone_hero_killer",
			[7] = "lttz_ll_visit_blackjack",
		}
	},
	
	["stalker"] = {
		info = {
			[1] = "living_legend_stalker",
			[2] = "living_legend_stalker_answer",
			[3] = "mortal_sin_stalker",
			[4] = "operation_afterglow_stalker",
			[5] = "living_legend_st",
		},
		task = {
			[1] = "lttz_ll_finish_stalker",
			[2] = "lttz_ms_start_stalker",
			[3] = "lttz_ms_report_stalker",
			[4] = "lttz_ms_ambush_stalker",
			[5] = "lttz_ms_urban_warfare_stalker",
			[6] = "lttz_ms_zone_hero_stalker",
			[7] = "lttz_ll_visit_barkeep",
		}
	},
}

local was_assigned_faction = false

base_lttz_check = dialogs_lostzone.check_lttz_faction_task
function dialogs_lostzone.check_lttz_faction_task(a, b)
	local old_faction = get_actor_true_community()
	
	load_exalted_status()
	if the_exalted > 0 and ((not was_assigned_faction) or (current_exalted_faction == 0) or (not story_factions[old_faction]))then
		
		if current_exalted_faction ~= 0 then
			old_faction = current_exalted_faction
			was_assigned_faction = true
			save_exalted_status()
		else
			for i=1, #faction_checklist do
				if not was_assigned_faction then
					local goodwill = relation_registry.community_goodwill(faction_checklist[i], AC_ID)
					if goodwill > goodwill_exalted then
						old_faction = faction_checklist[i]
						was_assigned_faction = true
						current_exalted_faction = faction_checklist[i]
						save_exalted_status()
					end
				end
			end
		end
	end
	
	local task_old = old_faction and lttz_faction_infos[old_faction] and lttz_faction_infos[old_faction].task
	if task_old then
		local tm = task_manager.get_task_manager()
		for k,v in pairs(task_old) do
			if tm.task_info[v] then
				return false
			end
		end
	end
	return true
end

function save_exalted_status()
	utils_obj.save_var(db.actor,"current_exalted_faction",current_exalted_faction)
	utils_obj.save_var(db.actor,"was_assigned_faction",was_assigned_faction)
	utils_obj.save_var(db.actor,"is_exalted",is_exalted)
end

function load_exalted_status()
	current_exalted_faction = utils_obj.load_var(db.actor,"current_exalted_faction") or current_exalted_faction
	is_exalted = utils_obj.load_var(db.actor,"is_exalted") or is_exalted
end

function on_game_start()
	if experience_potions then
		RegisterScriptCallback("experience_skill_on_update", experience_skill_on_update)
	else
		RegisterScriptCallback("experience_perk_on_update", experience_skill_on_update)
	end	
end