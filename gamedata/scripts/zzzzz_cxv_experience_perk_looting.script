local minCondition = 0
local maxCondition = 0

local artefinder_bonus = {[0] = 0, [1] = 1, [2] = 3, [3] = 7, [4] = 12, [5] = 18 }

local medicine_man = 0
local arte_finder = 0
local scavenger = 0
local midas_touch = 0

local zone_slayer = 0

local ammo_finder = 0
local ammo_finder_chance = 0
local was_ammo_found = false
local was_medicine_found = false
local careful_handler = 0
local careful_handler_bonus = 0

local plus_one = 0

-- Lists for Zone Slayer/Plus One ammo looting
local shotgun_list = {}
local weapon_list = {}


local function experience_skill_on_update(id, data)
	if (id == "perk_medicine_man") then
		medicine_man = data["curr_level"]
	end
	if (id == "perk_artefinder") then
		arte_finder = data["curr_level"]
		if zz_item_artefact then
			if zz_item_artefact.cond_t then
				if minCondition == 0 then
					minCondition = zz_item_artefact.arti_min_eff
				end
				zz_item_artefact.arti_min_eff = minCondition + artefinder_bonus[arte_finder]
				if maxCondition == 0 then
					maxCondition = zz_item_artefact.arti_max_eff
				end
				zz_item_artefact.arti_max_eff = maxCondition + artefinder_bonus[arte_finder]
				printf('Old Arte. Min: %s | New Arte. Min %s | Old Arte. Max: %s | New Arte. Max %s', minCondition, zz_item_artefact.arti_min_eff, maxCondition, zz_item_artefact.arti_max_eff)
			end
		end
	end
	if (id == "perk_scavenger") then
		scavenger = data["curr_level"]
	end
	if (id == "perk_careful_handler") then
		careful_handler = data["curr_level"]
		careful_handler_bonus = careful_handler * 3
	end
	if (id == "perk_midas_touch") then
		midas_touch = data["curr_level"]
	end
	if (id == "perk_zone_slayer") then
		zone_slayer = data["curr_level"]
		if (zone_slayer > 0) and (#shotgun_list < 1) and (#weapon_list < 1) then
			build_weapon_list()
		end
	end
	if (id == "perk_ammo_finder") then
		local temp_old_ammo_level = ammo_finder
		ammo_finder = data["curr_level"]
		ammo_finder_chance = ammo_finder * 2
	end
	if (id == "perk_plus_one") then
		plus_one = data["curr_level"]
		if (plus_one > 0) and (#weapon_list < 1) then
			build_weapon_list()
		end
	end
end

--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
local shotgun_ammo_check = {
	["ammo_12x70_buck"] = true,
	["ammo_23x75_shrapnel"] = true,
	["ammo_23_eco"] = true,
	["ammo_20x70_buck"] = true,
}

local ammo_parts_check = {
	["casing_p"] = true,
	["casing_s"] = true,
	["casing_r5"] = true,
	["casing_r7"] = true,
	["powder_1"] = true,
	["powder_2"] = true,
	["powder_3"] = true,
	["bullet_pistol"] = true,
	["bullet_pistol_ap"] = true,
	["bullet_shotgun"] = true,
	["bullet_shotgun_ap"] = true,
	["bullet_r5"] = true,
	["bullet_r5_ap"] = true,
	["bullet_r7"] = true,
	["bullet_r7_ap"] = true,
}

-- Arti's/ArtiGrok's Ballistics Compat.
local ammo_blocklist = {
	["powder_fire"] = true,
	["powder_gravi"] = true,
	["powder_gravi"] = true,
	["powder_fireball"] = true,
	["powder_nightstar"] = true,
	["powder_blood"] = true,
	["powder_battery"] = true,
	["powder_medusa"] = true,
}

local rand = math.random

--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

-- creates an item with a random amount of uses or condition
local function create_item_random_uses(i, box)
    --smr_debug.get_log().info("loot/general", "Creating item with random uses: %s", i)
    local max_uses = ini_sys:r_float_ex(i, "max_uses")
	local box_size = ini_sys:r_float_ex(i, "box_size")
    local se_item = alife_create_item(i, box)
	if not se_item then
		printf("[RPG - Looting] This item does not exist: %s. Skipping...", i)
		return
	end
	if max_uses then
		printf('Max uses: %s', max_uses)
        alife_process_item(i, se_item.id, {uses = (rand(1, max_uses))})
	elseif box_size then
		printf('Box size: %s', box_size)
		alife_process_item(i, se_item.id, {ammo = (rand(1, box_size))})
    elseif utils_item.is_degradable(nil, se_item.id) then
		printf('Degradable')
		alife_process_item(i, se_item.id, {cond = (rand(50 + (careful_handler_bonus[careful_handler]),100) * 0.01)})
	else
		alife_create_item(i, box)
	end
end

local function roll_item_tiered(t, box, looter_level)
    local r = looter_level
    table.sort(t, function(a, b) return a[1] > b[1] end)
    for i, n in ipairs(t) do
        if (r >= n[1]) then
            local itm = n[2][rand(#n[2])]
            --smr_debug.get_log().info("loot/rolls", "Rolled succesfully for %s (%s >= %s)", itm, r, n[1])
            create_item_random_uses(itm, box)
            return true
        end
    end
    return false
end

--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

meds_tier1 = {}
meds_tier2 = {}
meds_tier3 = {}
meds_tier4 = {}
meds_tier5 = {}

if eftmeds_util then
	
	meds_tier1 = {
		"splint",
		"caffeine",
		"drug_sleepingpills",
		"bandage",
		"glucose_s",
	}
	
	meds_tier2 = {
		"swiss_knife",			-- swiss army knife
		"caffeine",				-- caffine tablets
		"drug_sleepingpills",	-- sleeping pills
		"glucose",				-- large glucose shot
		"drug_psy_blockade",	-- Psy-block
		"drug_coagulant",		-- Vinca
		"antirad_kalium",		-- potassium iodide
		"akvatab",				-- Ibuprofen
	}
	
	meds_tier3 = {
		"alu_splint",
		"yadylin",				-- yadulin
		"medkit",
		"drug_radioprotector",	-- radioprotectant
		"drug_antidot",		-- anabiotics
		"drug_booster",			-- Hercules
		"antirad",				-- anti-radiation drugs
		"jgut",					-- tourniquet
		"salicidic_acid",		-- metamizole ampoule
	}
	
	meds_tier4 = {
		"drug_radioprotector",	-- radioprotectant
		"medkit_army",
		"cms",
		"stimpack",
		"cocaine",				-- cocaine
		"rebirth",				-- Axyltallisal "The Rebirth"
		"antirad_cystamine",	-- cystamine
	}
	
	meds_tier5 = {
		"medkit_scientic",
		"cms",
		"adrenalin",			-- epinephrine shot
		"morphine",				-- morphine ampoule
		"rebirth",				-- Axyltallisal "The Rebirth"
		"stimpack_army",
		"survival_kit",			-- small survival kit
		"medkit_ai1",			-- basic medical package
	}
	
else

	meds_tier1 = {
		"bandage",				-- bandage
		"caffeine",				-- caffine tablets
		"drug_sleepingpills",	-- sleeping pills
		"yadylin",				-- yadulin
		"glucose_s",			-- glucose shot
	}
	
	meds_tier2 = {
		"medkit",				-- AI-2 medkit
		"caffeine",				-- caffine tablets
		"drug_sleepingpills",	-- sleeping pills
		"analgetic",			-- diclofenac sodium
		"glucose",				-- large glucose shot
		"drug_psy_blockade",	-- Psy-block
		"drug_coagulant",		-- Vinca
		"antirad_kalium",		-- potassium iodide
		"yadylin",				-- yadulin
		"tetanus",				-- fentanyl
	}
	
	meds_tier3 = {
		"akvatab",				-- Ibuprofen
		"medkit_army",			-- Army medkit
		"stimpack",				-- improvised stimpack
		"drug_radioprotector",	-- radioprotectant
		"drug_anabiotic",		-- anabiotics
		"drug_booster",			-- Hercules
		"antirad",				-- anti-radiation drugs
		"jgut",					-- tourniquet
		"salicidic_acid",		-- metamizole ampoule
		"tetanus",				-- fentanyl
	}
	
	meds_tier4 = {
		"drug_anabiotic",		-- anabiotics
		"drug_radioprotector",	-- radioprotectant
		"medkit_scientic",		-- Scientific medkit
		"stimpack_army",		-- Military stimpack
		"cocaine",				-- cocaine
		"rebirth",				-- Axyltallisal "The Rebirth"
		"antirad_cystamine",	-- cystamine
	}
	
	meds_tier5 = {
		"adrenalin",			-- epinephrine shot
		"morphine",				-- morphine ampoule
		"rebirth",				-- Axyltallisal "The Rebirth"
		"stimpack_scientic",	-- Scientific stimpack
		"survival_kit",			-- small survival kit
		"medkit_ai1",			-- basic medical package
	}

end

function try_spawn_meds(box)
	local medChance = math.floor((medicine_man * 7) * round_idp(rand(0.5,3.0),2) )
	local tbl = {
		{ 100, meds_tier5},
		{ 70, meds_tier4},
		{ 35, meds_tier3},
		{ 22, meds_tier2},
		{ 0, meds_tier1},
	}
	roll_item_tiered(tbl, box, medChance)
end

function medicine_man_proc(box)
	-- printf("Medicine Man proc!")
	if IsInvbox(box) then
		box:iterate_inventory_box(iter_create_meds, box)
	else
		box:iterate_inventory(iter_create_meds, box)
	end
	
	if not was_medicine_found and medicine_man > 2 then
		try_spawn_meds(box)
	end
end

function iter_create_meds(box, obj)
	local sec = obj:section()
	if SYS_GetParam(0, sec, "kind") == "i_medical" then
		local ammo_count = obj:ammo_get_count()
		-- printf("[RPG - Looting] Meds Found: %s", sec)
		create_item_random_uses(sec, box)
		was_medicine_found = true
	end
end

--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

scav_tier1 = {
	"prt_i_paper",			-- paper sheets
	"prt_i_wood",			-- wooden parts
	"prt_i_plastic",		-- plastic film
	"e_syringe",			-- empty syringe
	"prt_i_textolite",		-- textolite base
}

scav_tier2 = {
	"prt_i_scrap",			-- scrap metal
	"prt_i_copper",			-- copper wire
	"prt_i_fasteners",		-- fasteners
	"ball_hammer",			-- ball-peen hammer
	"e_syringe",			-- empty syringe
}

scav_tier3 = {
	"prt_i_scrap",			-- scrap metal
	"prt_i_copper",			-- copper wire
	"prt_i_fasteners",		-- fasteners
	"prt_i_capacitors",		-- capacitors
	"prt_i_transistors",	-- transistors
	"prt_i_resistors",		-- resistors
	"swiss_knife",			-- swiss army knife
	"grooming",				-- grooming kit
	"batteries_dead",		-- batteries
}

scav_tier4 = {
	"prt_i_copper",			-- copper wire
	"prt_i_capacitors",		-- capacitors
	"prt_i_transistors",	-- transistors
	"prt_i_resistors",		-- resistors
	"broken_detector",		-- broken detector
	"flashlight_broken",	-- broken flashlight
	"walkie",				-- walkie talkie
	"batteries_dead",		-- batteries
	"cleaning_kit_p",
	"cleaning_kit_s",
	"glue_b",
	"glue_a",
}

scav_tier5 = {	
	"lead_box",				-- artefact lead box
	"sharpening_stones",
	"cleaning_kit_p",
	"cleaning_kit_s",
	"cleaning_kit_r5",
	"glue_b",
	"glue_a",
	"glue_e",
}

function try_spawn_scav(box)
	-- printf("Scavenger proc!")
	local scavChance = math.floor((scavenger * 7) * rand(1.0,3.0))
    local tbl = {
		{ 100, scav_tier5},
        { 70, scav_tier4},
        { 35, scav_tier3},
        { 22, scav_tier2},
        { 0, scav_tier1},
    }
    roll_item_tiered(tbl, box, scavChance)
end

--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

ammo_parts_tier1 = {
	"powder_1",				-- pistol/shotgun powder
	"powder_1",				-- pistol/shotgun powder
	"casing_s",				-- shotgun casings
	"casing_s",				-- shotgun casings
	"bullet_shotgun",		-- shotgun pellets
	"bullet_shotgun",		-- shotgun pellets
	"casing_p",				-- pistol casings
	"bullet_pistol",		-- pistol heads
}

ammo_parts_tier2 = {
	"powder_1",				-- pistol/shotgun powder
	"powder_1",				-- pistol/shotgun powder
	"casing_s",				-- shotgun casings
	"bullet_shotgun",		-- shotgun pellets
	"bullet_shotgun_ap",	-- sabot dart/shotgun AP heads
	"casing_p",				-- pistol casings
	"bullet_pistol",		-- pistol heads
	"bullet_pistol_ap",		-- pistol heads
}

ammo_parts_tier3 = {
	"powder_1",				-- pistol/shotgun powder
	"bullet_shotgun_ap",	-- sabot dart/shotgun AP heads
	"casing_p",				-- pistol casings
	"bullet_pistol",		-- pistol heads
	"bullet_pistol_ap",		-- pistol heads
	"powder_2",				-- small rifle powder
	"casing_r5",			-- small-rifle casings
	"bullet_r5",			-- small-rifle heads
}

ammo_parts_tier4 = {
	"powder_2",				-- small rifle powder
	"casing_r5",			-- small-rifle casings
	"casing_r5",			-- small-rifle casings
	"bullet_r5",			-- small-rifle heads
	"bullet_r5",			-- small-rifle heads
	"bullet_r5_ap",			-- small-rifle AP heads
	"powder_3",				-- large-rifle powder
	"casing_r7",			-- large-rifle casings
	"bullet_r7",			-- large-rifle bullet heads
}

ammo_parts_tier5 = {
	"powder_2",				-- small rifle powder
	"casing_r5",			-- small-rifle casings
	"bullet_r5_ap",			-- small-rifle AP heads
	"powder_3",				-- large-rifle powder
	"casing_r7",			-- large-rifle casings
	"casing_r7",			-- large-rifle casings
	"bullet_r7",			-- large-rifle bullet heads
	"bullet_r7",			-- large-rifle bullet heads
	"bullet_r7",			-- large-rifle AP heads
}

function try_spawn_ammo_parts(box, looter_level)
	-- printf("Ammo Finder proc!")
	local a_parts_chance = math.floor((ammo_finder * 7) * rand(1.0,3.0))
    local tbl = {
		{ 100, ammo_parts_tier5},
        { 70, ammo_parts_tier4},
        { 35, ammo_parts_tier3},
        { 22, ammo_parts_tier2},
        { 0, ammo_parts_tier1},
    }
    roll_item_tiered(tbl, box, a_parts_chance)
end

function ammo_finder_proc(box)
	local is_stash = false
	if IsInvbox(box) then
		box:iterate_inventory_box(iter_ammo_finder_inv, box)
		is_stash = true
	else
		box:iterate_inventory(iter_ammo_finder_inv, box)
	end
end

local ammo_double_chance = { [0] = 0, [1] = 0, [2] = 0, [3] = 1, [4] = 3, [5] = 5, }
function iter_ammo_finder_inv(box, obj)
	try_spawn_ammo_parts(box)

	local sec = obj:section()
	if ammo_finder > 2 then
		if not ammo_parts_check[sec] and IsAmmo(obj) and (ammo_double_chance[ammo_finder] > rand(1,100)) then
			local ammo_count = obj:ammo_get_count()
--			printf("[RPG - Looting] Ammo Found: %s of %s", ammo_count, sec)
			alife_create_item(sec, box, {ammo = ammo_count})
--			was_ammo_found = true
		end
	end
end

--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
base_death_loot = death_manager.create_release_item
death_manager.create_release_item = function(npc)
	if not npc then return end
	local id = npc:id()
	base_death_loot(npc)
	looting_enemy(npc)
end

base_stash_loot = treasure_manager.try_spawn_treasure
treasure_manager.try_spawn_treasure = function(box, ...)
	local id = box:id()
	if not treasure_manager.caches[id] then return end
	-- if not (type(treasure_manager.caches[id]) == "string") then return end
	base_stash_loot(box, ...)

	looting_enemy(box)
end

function looting_enemy(victim)

	if not victim then printf("[RPG] No NPC/box found... No loot for you!") return end
	
	was_ammo_found = false
	was_medicine_found = false
	
	-- Gather NPC info
	local npc_id = victim:id() or 0
	
	-- ensure this goes first before creating any items to avoid double-dipping
	if careful_handler > 0 then
		careful_handler_proc(victim)
	end
	
-----------------------------------------------------------> Medicine Man
	if medicine_man > 0 then
		if rand(1,100) <= (medicine_man * 2) then
			medicine_man_proc(victim)
		end
	end
	
-----------------------------------------------------------> Scavenger
	if scavenger > 0 then
		if rand(1,1000) <= (scavenger * 15) then
			try_spawn_scav(victim)
		end
	end
	
------------------------------------------------------------> Arte-finder
	local artyDrop = (arte_finder > rand(1,100))
	if artyDrop and not IsInvbox(victim) then
		local allowed_artefacts = drx_da_main_artefacts.allowed_artefacts
		alife_create_item(allowed_artefacts[rand(#allowed_artefacts)], victim)
	end
	
------------------------------------------------------------> Ammo Finder
	local ammo_drop = (ammo_finder_chance > rand(1,100))
	if ammo_drop then
		ammo_finder_proc(victim)
	end
	
------------------------------------------------------------> Zone Slayer
	if (#shotgun_list > 0) and not IsInvbox(victim) then
		if (rand(1,100) <= 30) then
			find_zone_slayer_ammo(shotgun_list[rand(1,#shotgun_list)], victim)
		end
	end
	
------------------------------------------------------------> Plus One
	if plus_one > 0 then
		find_spare_ammo(victim)
	end
end

function careful_handler_proc(box)
	if IsInvbox(box) then
		box:iterate_inventory_box(iter_careful_cond_increase, box)
	else
		box:iterate_inventory(iter_careful_cond_increase, box)
	end
	--return true
end

local function IsValidWeapon(obj)
	return IsWeapon(obj) and not IsItem("fake_ammo_wpn",obj:section())
end

local function IsValidMelee(obj)
	if not obj then return false end
	local o_sec = obj:section()
	local get_slot = SYS_GetParam(2, o_sec, "animation_slot") or 0
    return (SYS_GetParam(0, o_sec, "kind") == "w_melee") and (get_slot ~= 13)
end

function iter_careful_cond_increase(box, obj)
	sec = obj:section()
	if IsOutfit(obj) or IsValidWeapon(obj) then
		-- printf("[RPG - Looting] Weapon/Armor being Carefully Handled: %s", sec)
		-- increase armor and weapon drop conditions
		local item_cond = obj:condition()
		obj:set_condition(clamp(item_cond + (careful_handler_bonus * 0.01), 0, 1))
	elseif utils_item.is_degradable(nil, sec) then
		-- printf("[RPG - Looting] Item being Carefully Handled: %s", sec)
		local item_cond = obj:condition()
		obj:set_condition(clamp(item_cond + (careful_handler_bonus * 0.01), 0, 1))
	end
end
--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
------[NEW] Zone Slayer ammo selecion and creation

local string_find   = string.find
local string_gsub   = string.gsub

function find_zone_slayer_ammo(weapon,npc)
	local wpn_id = weapon:id()
	local ammo_type_number = weapon:get_ammo_type()
	local ammo_list = utils_item.get_ammo(weapon:section(), wpn_id)
	local shells = ammo_list[rand(1,#ammo_list)]
	if (shells) then
		if string_find(shells,"_verybad") then
			local new_section = string_gsub(shells,"_verybad","")
			if ini_sys:section_exist(new_section) then
				shells = new_section
			end
		end
		if arti_ammo_utils then	-- for those using Arti's Ammo or ArtiGrok, downgrade ammo to avoid granting rare ammo
			shells = arti_ammo_utils.downgrade_ammo(shells, true)
		end
		alife_create_item(shells, npc, {ammo = 2})
		-- printf('[RPG - Looting] Zone Slayer ammo for %s: %s', weapon:section(), shells)
	end
end

function find_spare_ammo(box)
	local attempt_count = 0
	local rounds = nil
	local weapon = nil
	local ammo_upgrade_list = {
		["ammo_m209_bad"] = "ammo_m209",
		["ammo_vog-25_bad"] = "ammo_vog-25",
		["ammo_og-7b_bad"] = "ammo_og-7b",
		["ammo_gauss_bad"] = "ammo_gauss",
	}
	
	
	while ((attempt_count < 10) and (not rounds)) do
		weapon = weapon_list[rand(1,#weapon_list)]
		local wpn_id = weapon:id()
		local ammo_type_number = weapon:get_ammo_type()
		local ammo_list = utils_item.get_ammo(weapon:section(), wpn_id)
		rounds = ammo_list[rand(1,#ammo_list)]
		attempt_count = attempt_count + 1
	end
	
	if ((attempt_count >= 10) or (not rounds)) then 
		printf("[RPG Looting] No weapon was found to give spare ammo!")
		return
	end

	if string_find(rounds,"_verybad") then
		local new_section = string_gsub(rounds,"_verybad","")
		if ini_sys:section_exist(new_section) then
			rounds = new_section
		end
	end
	if arti_ammo_utils then	-- for those using Arti's Ammo or ArtiGrok, downgrade ammo to avoid granting rare ammo
		rounds = arti_ammo_utils.downgrade_ammo(rounds, true)
	end
	if upgrade_list[rounds] then
		rounds = upgrade_list[rounds]
	end
	
	local box_size = ini_sys:r_float_ex(rounds, "box_size") or 1
	local amount = (IsInvbox(box) and (rand(1,100) == 1) and box_size) or 1
	
	alife_create_item(rounds, box, {ammo = amount})
	
	printf('[RPG - Looting] ||Plus One|| gave %s extra round(s) for %s: %s', amount, weapon:section(), rounds)
	
end

--------------------------------------------------------------------------------------------------------------
----------------- [WIP] Arte-finder Rank 5 Mutant Looting Chance (1%)  (Credit to Orleon) --------------------
--------------------------------------------------------------------------------------------------------------
function monster_on_loot_init(victim, loot_table)
	if arte_finder == 5 then
		local rng_roll = math.random(1,100)
		if rng_roll > 1 then
			-- printf("[RPG Looting] Artefinder mutant loot: %s", rng_roll == 1)
			return
		end
		try_spawn_artefact(loot_table, "mutant")
		-- printf("[RPG Looting] Artefinder mutant loot: %s", rng_roll == 1)
	end
end

function try_spawn_artefact(box, typ)
    local allowed_artefacts = drx_da_main_artefacts.allowed_artefacts
	if not allowed_artefacts then return end
	-- printf("[RPG Looting] Allowed Artefacts found")
	
	local spawned_artefact = allowed_artefacts[rand(#allowed_artefacts)]
	if not spawned_artefact then return end
	-- printf("[RPG Looting] Artefact selected: %s", spawned_artefact)

    if not box[spawned_artefact] then
        box[spawned_artefact] = {count = 0}
    end
	
    box[spawned_artefact].count = box[spawned_artefact].count + 1
end


--------------------------------------------------------------------------------------------------------------
---------------------- [WIP] Midas' Touch - Better Task Rewards  (Credit to Orleon) --------------------------
--------------------------------------------------------------------------------------------------------------
local GetEcoFactor = game_difficulties.get_eco_factor
game_difficulties.get_eco_factor = function(key)
	if (key == "rewards") and (midas_touch > 0) then
		return GetEcoFactor(key) + (0.05 * midas_touch)
	end
	return GetEcoFactor(key)
end

--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

function midas_touch_money_increase(item)------------------> actor_on_item_take(item)		
	if midas_touch > 0 then
		local money_amount = parse_list(ini_sys,item:section(),"money_amount")
		if #money_amount > 0 then
			local mult = 1
            mult = 1 + (0.05 * midas_touch)
			if money_amount[2] then
				local min_amt = math.floor(tonumber(money_amount[1])) * mult or 10
				local max_amt = math.floor(tonumber(money_amount[2])) * mult or 30
				db.actor:give_money(rand(min_amt, max_amt))
			else
				local amount = math.floor(tonumber(money_amount[1])) * mult or 10
				db.actor:give_money(amount)
			end
		end
    end
end

if arti_lootboxes then
	base_arti_money = arti_money.func_cash
	function arti_money.func_cash(obj)

		local money_range = SYS_GetParam(0, obj:section(), "money_value")
		if money_range then
			local mult = 1
            mult = 1 + (0.05 * midas_touch)
			money = arti_lootboxes.str_explode_num(money_range, ",")
			if money[2] then
				local min_amt = math.floor(tonumber(money[1])) * mult or 10
				local max_amt = math.floor(tonumber(money[2])) * mult or 30
				db.actor:give_money(math.random(min_amt, max_amt))
			else
				local amount = math.floor(tonumber(money[1])) * mult or 10
				db.actor:give_money(amount)
			end
			alife_release(obj)
		end
	end
end

--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
function build_weapon_list()

	weapon_list = {}
	shotgun_list = {}
	
	if (zone_slayer < 1) and (plus_one < 1) then return end
	local w1, w2, w3, w4 = db.actor:item_in_slot(3), db.actor:item_in_slot(2), db.actor:item_in_slot(1), db.actor:item_in_slot(5)
		
	if w1 and not IsValidMelee(w1) then
		weapon_list[#weapon_list + 1] = w1 
		printf('Weapon 1: %s', w1:section())
		local clip = ini_sys:r_float_ex(w1:section(), "ammo_mag_size") or 3
		if clip <= 2 then
			local ammo_table = parse_list(ini_sys,w1:section(),"ammo_class")
			if ammo_table and ammo_table[1] and shotgun_ammo_check[ammo_table[1]] then
				shotgun_list[#shotgun_list + 1] = w1
			end
		end
	end
	if w2 and not IsValidMelee(w2) then
		weapon_list[#weapon_list + 1] = w2 
		printf('Weapon 2: %s', w2:section())
		local clip = ini_sys:r_float_ex(w2:section(), "ammo_mag_size") or 3
		if clip <= 2 then
			local ammo_table = parse_list(ini_sys,w2:section(),"ammo_class")
			if ammo_table and ammo_table[1] and shotgun_ammo_check[ammo_table[1]] then
				shotgun_list[#shotgun_list + 1] = w2
			end
		end
	end
	if w3 and not IsValidMelee(w3) then
		weapon_list[#weapon_list + 1] = w3
		printf('Weapon 3: %s', w3:section())
		local clip = ini_sys:r_float_ex(w3:section(), "ammo_mag_size") or 3
		if clip <= 2 then
			local ammo_table = parse_list(ini_sys,w3:section(),"ammo_class")
			if ammo_table and ammo_table[1] and shotgun_ammo_check[ammo_table[1]] then
				shotgun_list[#shotgun_list + 1] = w3
			end
		end
	end
	if w4 and not IsValidMelee(w4) then
		weapon_list[#weapon_list + 1] = w4
		printf('Weapon 4: %s', w4:section())
		local clip = ini_sys:r_float_ex(w4:section(), "ammo_mag_size") or 3
		if clip <= 2 then
			local ammo_table = parse_list(ini_sys,w4:section(),"ammo_class")
			if ammo_table and ammo_table[1] and shotgun_ammo_check[ammo_table[1]] then
				shotgun_list[#shotgun_list + 1] = w4
			end
		end
	end
end
--
--

function on_game_start()
	if experience_potions then
		RegisterScriptCallback("experience_skill_on_update", experience_skill_on_update)
	else
		RegisterScriptCallback("experience_perk_on_update", experience_skill_on_update)
	end
	-- RegisterScriptCallback("save_state",					save_state)
    -- RegisterScriptCallback("load_state",					load_state)
	-- RegisterScriptCallback("npc_on_use",                     looting_enemy)
	RegisterScriptCallback("actor_on_item_take",			midas_touch_money_increase)
	RegisterScriptCallback("actor_item_to_ruck",			midas_touch_money_increase)
	RegisterScriptCallback("actor_on_first_update",			build_weapon_list)
	RegisterScriptCallback("actor_item_to_ruck",			build_weapon_list)
	RegisterScriptCallback("actor_item_to_slot",			build_weapon_list)
	RegisterScriptCallback("monster_on_loot_init",			monster_on_loot_init)
end

-- Weapon Parts Monkey Patching
local ini_parts   = itms_manager.ini_parts
local good_breakpoint = 60
EvaluateParts = item_parts.evaluate_parts

OrgPartEval = zzzz_arti_jamming_repairs.weapon_eval_parts
function zzzz_arti_jamming_repairs.weapon_eval_parts(wpn)
    local sec = ini_sys:r_string_ex(wpn:section(),"parent_section") or wpn:section()
    local parts = ini_parts:r_string_ex("con_parts_list", sec)
	parts = str_explode(parts,",")
	local base_chance = tonumber(a_arti_jamming_mcm.get_config("newdropschance")) or 50
	local adjusted = base_chance * wpn:condition()
	local parts_data = {}
	parts_data[sec] = math.ceil(wpn:condition() * 100)
	for i=1,#parts do
		local part = parts[i]
		local final_chance = math.ceil(adjusted)-- * parts_info[part].weight)
		arti_jamming.print_dbg("Part %s has a %s chance to be good.", part, final_chance)
		
		if wpn:condition() > 0.9 then
			arti_jamming.print_dbg("Short circuiting")
			parts_data[part] = rand(90, 99)
		elseif rand(100) < final_chance then
			parts_data[part] = rand(good_breakpoint, 99) + careful_handler_bonus
			parts_data[part] = clamp(parts_data[part], 0, 100)
		else
			parts_data[part] = rand(1, good_breakpoint - 1) + careful_handler_bonus
			parts_data[part] = clamp(parts_data[part], 0, 100)
		end
    end
	se_save_var( wpn:id(), wpn:name(), "parts", parts_data )
end