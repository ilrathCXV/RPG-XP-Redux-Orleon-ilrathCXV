local medicine_man = 0
local arte_finder = 0
local scavenger = 0
local careful_handler = 0
local midas_touch = 0

local zone_slayer = 0

local careful_handler_bonus = { [0] = 0, [1] = 3, [2] = 6, [3] = 9, [4] = 12, [5] = 15 }

local function experience_skill_on_update(id, data)
	if (id == "perk_medicine_man") then
		medicine_man = data["curr_level"]
	end
	if (id == "perk_artefinder") then
		arte_finder = data["curr_level"]
	end
	if (id == "perk_scavenger") then
		scavenger = data["curr_level"]
	end
	if (id == "perk_careful_handler") then
		careful_handler = data["curr_level"]
	end
	if (id == "perk_midas_touch") then
		midas_touch = data["curr_level"]
	end
	if (id == "perk_zone_slayer") then
		zone_slayer = data["curr_level"]
	end
end

--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
local looted_npc = {}

local shotgun_ammo_check = {
	["ammo_12x70_buck"] = true,
	["ammo_23x75_shrapnel"] = true,
	["ammo_23_eco"] = true,
	["ammo_20x70_buck"] = true,
}

local shotgun_list = {}
local rand = math.random

function save_state(m_data)
    m_data.looted_npc = looted_npc
end

function load_state(m_data)
    if m_data.looted_npc then looted_npc = m_data.looted_npc end
end
--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

-- creates an item with a random amount of uses or condition
local function create_item_random_uses(i, box)
    --smr_debug.get_log().info("loot/general", "Creating item with random uses: %s", i)
    local max_uses = ini_sys:r_float_ex(i, "max_uses")
	local box_size = ini_sys:r_float_ex(i, "box_size")
    local se_item = alife_create_item(i, box)
	if not se_item then
		printf("[RPG Crash Catch] This item does not exist: %s", i)
		return
	end
	if max_uses then
		printf('Max uses: %s', max_uses)
        alife_process_item(i, se_item.id, {uses = (rand(1, max_uses))})
	elseif box_size then
		printf('Box size: %s', box_size)
		alife_process_item(i, se_item.id, {ammo = (rand(1, box_size))})
    elseif utils_item.is_degradable(nil, se_item.id) then
		printf('Degradable')
		alife_process_item(i, se_item.id, {cond = (rand(50 + (careful_handler_bonus[careful_handler]),100) * 0.01)})
	else
		alife_create_item(i, box)
	end
end

local function roll_item_tiered(t, box, looter_level)
    local r = looter_level
    table.sort(t, function(a, b) return a[1] > b[1] end)
    for i, n in ipairs(t) do
        if (r >= n[1]) then
            local itm = n[2][rand(#n[2])]
            --smr_debug.get_log().info("loot/rolls", "Rolled succesfully for %s (%s >= %s)", itm, r, n[1])
            create_item_random_uses(itm, box)
            return true
        end
    end
    return false
end

function try_spawn_meds(box, looter_level)
    if rand(1,1000) <= looter_level then
		printf("Medicine Man proc!")
		local medChance = math.floor((medicine_man * 7) * rand(1.0,3.0))
        local tbl = {
			{ 100, meds_tier5},
            { 90, meds_tier4},
            { 70, meds_tier3},
            { 40, meds_tier2},
            { 0, meds_tier1},
        }
        roll_item_tiered(tbl, box, medChance)
    end
end

meds_tier1 = {
    "bandage",
    "caffeine",
    "drug_sleepingpills",
    "yadylin",
    "medkit",
    "glucose_s",
}

meds_tier2 = {
	"medkit",
	"caffeine",
    "drug_sleepingpills",
    "medkit_army",
    "stimpack",
    "salicidic_acid",
    "glucose",
    "drug_psy_blockade",
	"drug_coagulant",
	"antirad",
	"yadylin",
}

meds_tier3 = {
	"akvatab",
    "medkit_scientic",
    "stimpack_army",
    "drug_radioprotector",
    "drug_anabiotic",
	"drug_booster",
    "antirad_cystamine",
	"antirad_kalium",
	"jgut",
}

meds_tier4 = {
	"drug_radioprotector",
	"medkit_scientic",
    "stimpack_army",
    "stimpack_scientic",
	"adrenalin",
	"morphine",
	"survival_kit",
	"tetanus",
	"rebirth",
}

meds_tier5 = {
	"rebirth",
	"stimpack_scientic",
	"survival_kit",
	"medkit_ai1",
}


function try_spawn_scav(box, looter_level)
    if rand(1,1000) <= looter_level then
		printf("Scavenger proc!")
		local scavChance = math.floor((scavenger * 7) * rand(1.0,3.0))
        local tbl = {
			{ 100, scav_tier5},
            { 90, scav_tier4},
            { 70, scav_tier3},
            { 40, scav_tier2},
            { 0, scav_tier1},
        }
        roll_item_tiered(tbl, box, scavChance)
    end
end

scav_tier1 = {
	"prt_i_paper",
	"prt_i_wood",
	"prt_i_plastic",
	"e_syringe",
	"prt_i_textolite",
}

scav_tier2 = {
	"prt_i_scrap",
	"prt_i_copper",
	"prt_i_fasteners",
	"ball_hammer",
	"e_syringe",
}

scav_tier3 = {
	"prt_i_scrap",
	"prt_i_copper",
	"prt_i_fasteners",
	"prt_i_capacitors",
	"prt_i_transistors",
	"prt_i_resistors",
	"swiss_knife",
	"grooming",
	"casing_s",
	"powder_1",
	"bullet_shotgun",
	"casing_p",
	"bullet_pistol",
}

scav_tier4 = {
	"casing_s",
	"powder_1",
	"bullet_shotgun",
	"casing_p",
	"bullet_pistol",
	"prt_i_scrap",
	"prt_i_copper",
	"prt_i_fasteners",
	"prt_i_capacitors",
	"prt_i_transistors",
	"prt_i_resistors",
	"broken_detector",
	"flashlight_broken",
	"walkie",
	"batteries_dead",
	"powder_2",
	"casing_r5",
	"bullet_r5",
	"bullet_shotgun_ap",
	"bullet_pistol_ap",
}

scav_tier5 = {
	"batteries_dead",
	"powder_2",
	"casing_r5",
	"bullet_r5",
	"bullet_shotgun_ap",
	"bullet_pistol_ap",
	"lead_box",
	"lead_box",
	"powder_3",
	"casing_r7",
	"bullet_r5_ap",
	"bullet_r7",
}

local minCondition, maxCondition
if drx_da_main then
	minCondition = 15
	maxCondition = 35
else
	minCondition = 20
	maxCondition = 35
end

local artefinder_bonus = {[0] = 0, [1] = 1, [2] = 3, [3] = 7, [4] = 12, [5] = 18 }
--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
base_death_loot = death_manager.create_release_item
death_manager.create_release_item = function(npc)
	if not npc then return end
	local id = npc:id()
	base_death_loot(npc)
	CreateTimeEvent("rpg_looting", id, 0.05, looting_enemy, npc)
end

function looting_enemy(victim)

	if not victim then printf("[RPG] No NPC found... No loot for you!") return end
	
	-- Gather NPC info
	local npc_id = victim:id() or 0
	
	-- Return if corpse has been looted already
	if looted_npc[npc_id] or npc_id == 0 then
        return
	end
	looted_npc[npc_id] = true
		
-----------------------------------------------------------> Medicine Man
	if medicine_man >= 1 then
		local medQuality = medicine_man * 15
		try_spawn_meds(victim, medQuality)
	end
	
-----------------------------------------------------------> Scavenger
	if scavenger >= 1 then
		local scavQuality = scavenger * 15
		try_spawn_scav(victim, scavQuality)
	end
	
------------------------------------------------------------> Arte-finder
	local artyDrop = (rand(100) <= arte_finder)
	if artyDrop then
		local allowed_artefacts = drx_da_main_artefacts.allowed_artefacts
		local minArte = minCondition + artefinder_bonus[arte_finder]
		local maxArte = maxCondition + artefinder_bonus[arte_finder]
		local conditionArty = rand(minArte, maxArte)
		alife_create_item(allowed_artefacts[rand(#allowed_artefacts)], victim, {cond = (conditionArty * 0.01)})
	end
		
	if (#shotgun_list > 0) then
		find_zone_slayer_ammo(shotgun_list[rand(1,#shotgun_list)], victim)
	end
	
	return true
end
--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
------[NEW] Zone Slayer ammo selecion and creation

local string_find   = string.find
local string_gsub   = string.gsub

function find_zone_slayer_ammo(weapon,npc)
	if (rand(100) <= 30) then return end
	local ammo_table = parse_list(ini_sys,weapon:section(),"ammo_class")
	local shells = ammo_table[rand(1,#ammo_table)]
	if (shells) then
		if string_find(shells,"_verybad") then
			local new_section = string_gsub(shells,"_verybad","")
			if ini_sys:section_exist(new_section) then
				shells = new_section
			end
		end
		if arti_ammo_utils then	-- for those using Arti's Ammo or ArtiGrok, downgrade ammo to avoid granting rare ammo
			shells = arti_ammo_utils.downgrade_ammo(shells, true)
		end
		alife_create_item(shells, npc, {ammo = 2})
		printf('Zone Slayer ammo for %s: %s', weapon:section(), shells)
	end
end

--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
------[NEW] Arte-finder functionality (increases to GAMMA's min and max thresholds)
base_grok_condition = grok_artefacts_random_condition.grok_arti_random_efficiency


function grok_artefacts_random_condition.grok_arti_random_efficiency(obj)
	kind = SYS_GetParam(0, obj:section(), "kind")
	if (obj:condition() == 1.0 and kind == "i_arty" or kind == "i_arty_cont" and obj:condition() == 1.0) then
		local minArte = minCondition + artefinder_bonus[arte_finder]
		local maxArte = maxCondition + artefinder_bonus[arte_finder]
		local cond = (rand(minArte, maxArte) * 0.01)
		if obj:section() == "af_ah_f1" then
			cond = 0.98
		end
		obj:set_condition(cond)
	end

end


function perk_loot_improvement(item)------------------> actor_on_item_take(item)		
------Мародёр-6: увеличивает количество собираемого бабла на 3% за уровень. --------> May need looking at for same reason as above
	if midas_touch >= 1 then
		local money_amount = parse_list(ini_sys,item:section(),"money_amount")
		if #money_amount > 0 then
			if used_wallet then
			used_wallet = false
				return
			end
			local mult = 1
            mult = 1 + (0.05 * midas_touch)
			if money_amount[2] then
				local min_amt = math.floor(tonumber(money_amount[1])) * mult or 10
				local max_amt = math.floor(tonumber(money_amount[2])) * mult or 30
				db.actor:give_money(rand(min_amt, max_amt))
			else
				local amount = math.floor(tonumber(money_amount[1])) * mult or 10
				db.actor:give_money(amount)
			end
			--db.actor:drop_item(item)
		end
    end
end

if arti_lootboxes then
	base_arti_money = arti_money.func_cash
	function arti_money.func_cash(obj)

		local money_range = SYS_GetParam(0, obj:section(), "money_value")
		if money_range then
			local mult = 1
            mult = 1 + (0.05 * midas_touch)
			money = arti_lootboxes.str_explode_num(money_range, ",")
			if money[2] then
				local min_amt = math.floor(tonumber(money[1])) * mult or 10
				local max_amt = math.floor(tonumber(money[2])) * mult or 30
				db.actor:give_money(math.random(min_amt, max_amt))
			else
				local amount = math.floor(tonumber(money[1])) * mult or 10
				db.actor:give_money(amount)
			end
			alife_release(obj)
		end
	end
end

--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
function build_shotgun_list()
	if (zone_slayer < 1) then return end
	shotgun_list = {}
	local w1, w2, w3, w4 = db.actor:item_in_slot(3), db.actor:item_in_slot(2), db.actor:item_in_slot(1), db.actor:item_in_slot(5)
		
	if w1 then
		local clip = ini_sys:r_float_ex(w1:section(), "ammo_mag_size") or 3
		if clip <= 2 then
			local ammo_table = parse_list(ini_sys,w1:section(),"ammo_class")
			if ammo_table and ammo_table[1] and shotgun_ammo_check[ammo_table[1]] then
				shotgun_list[#shotgun_list + 1] = w1
			end
		end
	end
	if w2 then
		local clip = ini_sys:r_float_ex(w2:section(), "ammo_mag_size") or 3
		if clip <= 2 then
			local ammo_table = parse_list(ini_sys,w2:section(),"ammo_class")
			if ammo_table and ammo_table[1] and shotgun_ammo_check[ammo_table[1]] then
				shotgun_list[#shotgun_list + 1] = w2
			end
		end
	end
	if w3 then
		local clip = ini_sys:r_float_ex(w3:section(), "ammo_mag_size") or 3
		if clip <= 2 then
			local ammo_table = parse_list(ini_sys,w3:section(),"ammo_class")
			if ammo_table and ammo_table[1] and shotgun_ammo_check[ammo_table[1]] then
				shotgun_list[#shotgun_list + 1] = w3
			end
		end
	end
	if w4 then
		local clip = ini_sys:r_float_ex(w4:section(), "ammo_mag_size") or 3
		if clip <= 2 then
			local ammo_table = parse_list(ini_sys,w4:section(),"ammo_class")
			if ammo_table and ammo_table[1] and shotgun_ammo_check[ammo_table[1]] then
				shotgun_list[#shotgun_list + 1] = w4
			end
		end
	end
end
--
--

function on_game_start()
	if experience_potions then
		RegisterScriptCallback("experience_skill_on_update", experience_skill_on_update)
	else
		RegisterScriptCallback("experience_perk_on_update", experience_skill_on_update)
	end
	RegisterScriptCallback("save_state",                     save_state)
    RegisterScriptCallback("load_state",                     load_state)
	-- RegisterScriptCallback("npc_on_use",                     looting_enemy)
	RegisterScriptCallback("actor_on_item_take",             perk_loot_improvement)
	RegisterScriptCallback("actor_item_to_ruck",             perk_loot_improvement)
	RegisterScriptCallback("actor_on_first_update",          build_shotgun_list)
	RegisterScriptCallback("actor_item_to_ruck",             build_shotgun_list)
	RegisterScriptCallback("actor_item_to_slot",             build_shotgun_list)
end

-- Weapon Parts Monkey Patching
local ini_parts   = itms_manager.ini_parts
local good_breakpoint = 60
EvaluateParts = item_parts.evaluate_parts

OrgPartEval = zzzz_arti_jamming_repairs.weapon_eval_parts
function zzzz_arti_jamming_repairs.weapon_eval_parts(wpn)
    local sec = ini_sys:r_string_ex(wpn:section(),"parent_section") or wpn:section()
    local parts = ini_parts:r_string_ex("con_parts_list", sec)
	parts = str_explode(parts,",")
	local base_chance = tonumber(a_arti_jamming_mcm.get_config("newdropschance")) or 50
	local adjusted = base_chance * wpn:condition()
	local parts_data = {}
	parts_data[sec] = math.ceil(wpn:condition() * 100)
	for i=1,#parts do
		local part = parts[i]
		local final_chance = math.ceil(adjusted)-- * parts_info[part].weight)
		arti_jamming.print_dbg("Part %s has a %s chance to be good.", part, final_chance)
		
		if wpn:condition() > 0.9 then
			arti_jamming.print_dbg("Short circuiting")
			parts_data[part] = rand(90, 99)
		elseif rand(100) < final_chance then
			parts_data[part] = rand(good_breakpoint + careful_handler_bonus[careful_handler], 99)
		else
			parts_data[part] = rand(1, good_breakpoint - 1) + careful_handler_bonus[careful_handler]
		end
    end
	se_save_var( wpn:id(), wpn:name(), "parts", parts_data )
end