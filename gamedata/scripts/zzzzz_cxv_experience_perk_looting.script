local medicine_man = 0
local arte_finder = 0
local scavenger = 0
local midas_touch = 0

local zone_slayer = 0

local ammo_finder = 0
local ammo_finder_chance = 0
local was_ammo_found = false
local careful_handler = 0
local careful_handler_bonus = 0

local function experience_skill_on_update(id, data)
	if (id == "perk_medicine_man") then
		medicine_man = data["curr_level"]
	end
	if (id == "perk_artefinder") then
		arte_finder = data["curr_level"]
	end
	if (id == "perk_scavenger") then
		scavenger = data["curr_level"]
	end
	if (id == "perk_careful_handler") then
		careful_handler = data["curr_level"]
		careful_handler_bonus = careful_handler * 3
	end
	if (id == "perk_midas_touch") then
		midas_touch = data["curr_level"]
	end
	if (id == "perk_zone_slayer") then
		zone_slayer = data["curr_level"]
	end
	if (id == "perk_ammo_finder") then
		ammo_finder = data["curr_level"]
		ammo_finder_chance = ammo_finder * 2
	end
end

--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
local looted_npc = {}

local shotgun_ammo_check = {
	["ammo_12x70_buck"] = true,
	["ammo_23x75_shrapnel"] = true,
	["ammo_23_eco"] = true,
	["ammo_20x70_buck"] = true,
}

local ammo_parts_check = {
	["casing_p"] = true,
	["casing_s"] = true,
	["casing_r5"] = true,
	["casing_r7"] = true,
	["powder_1"] = true,
	["powder_2"] = true,
	["powder_3"] = true,
	["bullet_pistol"] = true,
	["bullet_pistol_ap"] = true,
	["bullet_shotgun"] = true,
	["bullet_shotgun_ap"] = true,
	["bullet_r5"] = true,
	["bullet_r5_ap"] = true,
	["bullet_r7"] = true,
	["bullet_r7_ap"] = true,
	["powder_gravi"] = true,
	-- Arti's/ArtiGrok's Ballistics Compat.
	["powder_fire"] = true,
	["powder_gravi"] = true,
	["powder_fireball"] = true,
	["powder_nightstar"] = true,
	["powder_blood"] = true,
	["powder_battery"] = true,
	["powder_medusa"] = true,
}

local shotgun_list = {}
local weapon_list = {}
local rand = math.random

function save_state(m_data)
    m_data.looted_npc = looted_npc
end

function load_state(m_data)
    if m_data.looted_npc then looted_npc = m_data.looted_npc end
end
--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

-- creates an item with a random amount of uses or condition
local function create_item_random_uses(i, box)
    --smr_debug.get_log().info("loot/general", "Creating item with random uses: %s", i)
    local max_uses = ini_sys:r_float_ex(i, "max_uses")
	local box_size = ini_sys:r_float_ex(i, "box_size")
    local se_item = alife_create_item(i, box)
	if not se_item then
		printf("[RPG - Looting] This item does not exist: %s. Skipping...", i)
		return
	end
	if max_uses then
		printf('Max uses: %s', max_uses)
        alife_process_item(i, se_item.id, {uses = (rand(1, max_uses))})
	elseif box_size then
		printf('Box size: %s', box_size)
		alife_process_item(i, se_item.id, {ammo = (rand(1, box_size))})
    elseif utils_item.is_degradable(nil, se_item.id) then
		printf('Degradable')
		alife_process_item(i, se_item.id, {cond = (rand(50 + (careful_handler_bonus[careful_handler]),100) * 0.01)})
	else
		alife_create_item(i, box)
	end
end

local function roll_item_tiered(t, box, looter_level)
    local r = looter_level
    table.sort(t, function(a, b) return a[1] > b[1] end)
    for i, n in ipairs(t) do
        if (r >= n[1]) then
            local itm = n[2][rand(#n[2])]
            --smr_debug.get_log().info("loot/rolls", "Rolled succesfully for %s (%s >= %s)", itm, r, n[1])
            create_item_random_uses(itm, box)
            return true
        end
    end
    return false
end

function try_spawn_meds(box, looter_level)
    if rand(1,1000) <= looter_level then
		-- printf("Medicine Man proc!")
		local medChance = math.floor((medicine_man * 7) * rand(1.0,3.0))
        local tbl = {
			{ 100, meds_tier5},
            { 70, meds_tier4},
            { 35, meds_tier3},
            { 22, meds_tier2},
            { 0, meds_tier1},
        }
        roll_item_tiered(tbl, box, medChance)
    end
end

meds_tier1 = {
    "bandage",				-- bandage
    "caffeine",				-- caffine tablets
    "drug_sleepingpills",	-- sleeping pills
    "yadylin",				-- yadulin
    "glucose_s",			-- glucose shot
}

meds_tier2 = {
	"medkit",				-- AI-2 medkit
    "caffeine",				-- caffine tablets
    "drug_sleepingpills",	-- sleeping pills
    "analgetic",			-- diclofenac sodium
    "glucose",				-- large glucose shot
    "drug_psy_blockade",	-- Psy-block
	"drug_coagulant",		-- Vinca
	"antirad_kalium",		-- potassium iodide
    "yadylin",				-- yadulin
	"tetanus",				-- fentanyl
}

meds_tier3 = {
	"akvatab",				-- Ibuprofen
    "medkit_army",			-- Army medkit
    "stimpack",				-- improvised stimpack
    "drug_radioprotector",	-- radioprotectant
    "drug_anabiotic",		-- anabiotics
	"drug_booster",			-- Hercules
	"antirad",				-- anti-radiation drugs
	"jgut",					-- tourniquet
	"salicidic_acid",		-- metamizole ampoule
	"tetanus",				-- fentanyl
}

meds_tier4 = {
    "drug_anabiotic",		-- anabiotics
    "drug_radioprotector",	-- radioprotectant
    "medkit_scientic",		-- Scientific medkit
    "stimpack_army",		-- Military stimpack
	"cocaine",				-- cocaine
	"rebirth",				-- Axyltallisal "The Rebirth"
    "antirad_cystamine",	-- cystamine
}

meds_tier5 = {
	"adrenalin",			-- epinephrine shot
	"morphine",				-- morphine ampoule
	"rebirth",				-- Axyltallisal "The Rebirth"
    "stimpack_scientic",	-- Scientific stimpack
	"survival_kit",			-- small survival kit
	"medkit_ai1",			-- basic medical package
}


function try_spawn_scav(box, looter_level)
    if rand(1,1000) <= looter_level then
		-- printf("Scavenger proc!")
		local scavChance = math.floor((scavenger * 7) * rand(1.0,3.0))
        local tbl = {
			{ 100, scav_tier5},
            { 70, scav_tier4},
            { 35, scav_tier3},
            { 22, scav_tier2},
            { 0, scav_tier1},
        }
        roll_item_tiered(tbl, box, scavChance)
    end
end

scav_tier1 = {
	"prt_i_paper",			-- paper sheets
	"prt_i_wood",			-- wooden parts
	"prt_i_plastic",		-- plastic film
	"e_syringe",			-- empty syringe
	"prt_i_textolite",		-- textolite base
}

scav_tier2 = {
	"prt_i_scrap",			-- scrap metal
	"prt_i_copper",			-- copper wire
	"prt_i_fasteners",		-- fasteners
	"ball_hammer",			-- ball-peen hammer
	"e_syringe",			-- empty syringe
}

scav_tier3 = {
	"prt_i_scrap",			-- scrap metal
	"prt_i_copper",			-- copper wire
	"prt_i_fasteners",		-- fasteners
	"prt_i_capacitors",		-- capacitors
	"prt_i_transistors",	-- transistors
	"prt_i_resistors",		-- resistors
	"swiss_knife",			-- swiss army knife
	"grooming",				-- grooming kit
	"casing_s",				-- shotgun casings
	"powder_1",				-- pistol/shotgun powder
	"bullet_shotgun",		-- shotgun pellets
	"casing_p",				-- pistol casings
	"bullet_pistol",		-- pistol heads
}

scav_tier4 = {
	"casing_s",				-- shotgun casings
	"powder_1",				-- pistol/shotgun powder
	"bullet_shotgun",		-- shotgun pellets
	"casing_p",				-- pistol casings
	"bullet_pistol",		-- pistol heads
	"prt_i_scrap",			-- scrap metal
	"prt_i_copper",			-- copper wire
	"prt_i_fasteners",		-- fasteners
	"prt_i_capacitors",		-- capacitors
	"prt_i_transistors",	-- transistors
	"prt_i_resistors",		-- resistors
	"broken_detector",		-- broken detector
	"flashlight_broken",	-- broken flashlight
	"walkie",				-- walkie talkie
	"batteries_dead",		-- batteries
	"powder_2",				-- small rifle powder
	"casing_r5",			-- small-rifle casings
	"bullet_r5",			-- small-rifle heads
	"bullet_shotgun_ap",	-- sabot dart/shotgun AP heads
	"bullet_pistol_ap",		-- pistol AP heads
}

scav_tier5 = {
	"batteries_dead",		-- batteries
	"powder_2",				-- small rifle powder
	"casing_r5",			-- small-rifle casings
	"bullet_r5",			-- small-rifle heads
	"bullet_shotgun_ap",	-- sabot dart/shotgun AP heads
	"bullet_pistol_ap",		-- pistol AP heads
	"lead_box",				-- artefact lead box
	"lead_box",
	"powder_3",				-- large-rifle powder
	"casing_r7",			-- large-rifle casings
	"bullet_r5_ap",			-- small-rifle AP heads
	"bullet_r7",			-- large-rifle bullet heads
}

local minCondition, maxCondition
if drx_da_main then
	minCondition = 20
	maxCondition = 30
else
	minCondition = 20
	maxCondition = 40
end

local artefinder_bonus = {[0] = 0, [1] = 1, [2] = 3, [3] = 7, [4] = 12, [5] = 18 }
--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
base_death_loot = death_manager.create_release_item
death_manager.create_release_item = function(npc)
	if not npc then return end
	local id = npc:id()
	base_death_loot(npc)
	looting_enemy(npc)
end

base_stash_loot = treasure_manager.try_spawn_treasure
treasure_manager.try_spawn_treasure = function(box, ...)
	local id = box:id()
	if not treasure_manager.caches[id] then return end
	if not (type(treasure_manager.caches[id]) == "string") then return end
	base_stash_loot(box, ...)

	looting_enemy(box)
end

function looting_enemy(victim)

	if not victim then printf("[RPG] No NPC/box found... No loot for you!") return end
	
	was_ammo_found = false
	
	-- Gather NPC info
	local npc_id = victim:id() or 0
	
	if not IsInvbox(victim) then
		-- Return if corpse has been looted already
		if looted_npc[npc_id] or npc_id == 0 then
			return
		end
		looted_npc[npc_id] = true
	end
	
	-- ensure this goes first before creating any items to avoid double-dipping
	if careful_handler > 0 then
		CreateTimeEvent("careful_handler_proc", npc_id, 0.1, careful_handler_proc, victim)
	end
	
-----------------------------------------------------------> Medicine Man
	if medicine_man > 0 then
		local medChance = medicine_man * 15
		try_spawn_meds(victim, medChance)
	end
	
-----------------------------------------------------------> Scavenger
	if scavenger > 0 then
		local scavChance = scavenger * 15
		try_spawn_scav(victim, scavChance)
	end
	
------------------------------------------------------------> Arte-finder
	local artyDrop = (arte_finder > rand(1,100))
	if artyDrop and not IsInvbox(victim) then
		local allowed_artefacts = drx_da_main_artefacts.allowed_artefacts
		local minArte = minCondition + artefinder_bonus[arte_finder]
		local maxArte = maxCondition + artefinder_bonus[arte_finder]
		local conditionArty = rand(minArte, maxArte)
		alife_create_item(allowed_artefacts[rand(#allowed_artefacts)], victim, {cond = (conditionArty * 0.01)})
	end
	
	if ammo_finder_chance > rand(1,100) then
		CreateTimeEvent("ammo_finder_proc", npc_id, 0.1, ammo_finder_proc, victim)
	end
	
	if (#shotgun_list > 0) and not IsInvbox(victim) then
		if (rand(1,100) > 30) then
			find_zone_slayer_ammo(shotgun_list[rand(1,#shotgun_list)], victim)
		end
	end
end

function ammo_finder_proc(box)
	if IsInvbox(box) then
		box:iterate_inventory_box(iter_create_ammo, box)
	else
		box:iterate_inventory(iter_create_ammo, box)
	end
	
	if not was_ammo_found and ammo_finder > 2 and (#weapon_list > 0) then
		find_spare_ammo(weapon_list[rand(1,#weapon_list)], box)
	end
	return true
end

function iter_create_ammo(box, obj)
	local sec = obj:section()
	if IsAmmo(obj) and not ammo_parts_check[sec] then
		local ammo_count = obj:ammo_get_count()
		printf("[RPG - Looting] Ammo Found: %s of %s", ammo_count, sec)
		alife_create_item(sec, box, {ammo = ammo_count})
		was_ammo_found = true
--	else
--		printf("[RPG - Looting] Item is not ammo: %s", sec)
	end
end

function careful_handler_proc(box)
	if IsInvbox(box) then
		box:iterate_inventory_box(iter_careful_cond_increase, box)
	else
		box:iterate_inventory(iter_careful_cond_increase, box)
	end
	return true
end

local function IsValidWeapon(obj)
	return IsWeapon(obj) and not IsItem("fake_ammo_wpn",obj:section())
end

local function IsValidMelee(obj)
	if not obj then return false end
	local o_sec = obj:section()
	local get_slot = SYS_GetParam(2, o_sec, "animation_slot") or 0
    return (SYS_GetParam(0, o_sec, "kind") == "w_melee") and (get_slot ~= 13)
end

function iter_careful_cond_increase(box, obj)
	sec = obj:section()
	if IsOutfit(obj) or IsValidWeapon(obj) then
		-- printf("[RPG - Looting] Weapon/Armor being Carefully Handled: %s", sec)
		-- increase armor and weapon drop conditions
		local item_cond = obj:condition()
		obj:set_condition(clamp(item_cond + (careful_handler_bonus * 0.01), 0, 1))
		
		--[[
		if IsValidWeapon(obj) then
			local saved_parts = item_parts.get_parts_con(obj) or 0
			if saved_parts ~= 0 then
				for k,v in pairs(saved_parts) do
					saved_parts[k] = clamp((v + careful_handler_bonus), 0, 100)
				end
			end
		end
		--]]
	elseif utils_item.is_degradable(nil, sec) then
		-- printf("[RPG - Looting] Item being Carefully Handled: %s", sec)
		local item_cond = obj:condition()
		obj:set_condition(clamp(item_cond + (careful_handler_bonus * 0.01), 0, 1))
	end
end
--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
------[NEW] Zone Slayer ammo selecion and creation

local string_find   = string.find
local string_gsub   = string.gsub

function find_zone_slayer_ammo(weapon,npc)
	local ammo_table = parse_list(ini_sys,weapon:section(),"ammo_class")
	local shells = ammo_table[rand(1,#ammo_table)]
	if (shells) then
		if string_find(shells,"_verybad") then
			local new_section = string_gsub(shells,"_verybad","")
			if ini_sys:section_exist(new_section) then
				shells = new_section
			end
		end
		if arti_ammo_utils then	-- for those using Arti's Ammo or ArtiGrok, downgrade ammo to avoid granting rare ammo
			shells = arti_ammo_utils.downgrade_ammo(shells, true)
		end
		alife_create_item(shells, npc, {ammo = 2})
		-- printf('[RPG - Looting] Zone Slayer ammo for %s: %s', weapon:section(), shells)
	end
end

function find_spare_ammo(weapon,npc)
	local ammo_table = parse_list(ini_sys,weapon:section(),"ammo_class")
	local rounds = ammo_table[rand(1,#ammo_table)]
	if (rounds) then
		if string_find(rounds,"_verybad") then
			local new_section = string_gsub(rounds,"_verybad","")
			if ini_sys:section_exist(new_section) then
				rounds = new_section
			end
		end
		if arti_ammo_utils then	-- for those using Arti's Ammo or ArtiGrok, downgrade ammo to avoid granting rare ammo
			rounds = arti_ammo_utils.downgrade_ammo(rounds, true)
		end
		alife_create_item(rounds, npc, {ammo = ammo_finder})
		printf('[RPG - Looting] Ammo Finder extra ammo for %s: %s', weapon:section(), rounds)
	end
end

--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
------[NEW] Arte-finder functionality (updated to match GAMMA's 2nd Anniversary update new functionality)
local in_actor_ruck = utils_item.in_actor_ruck
local rad_factor = 0.5 -- multiplier to artefact rad effect in ruck
local rad_tg_step = 300 --[ms]

zz_dbg = false
function pr(...) if zz_dbg then printf(...) end end
function r(v) return round_idp(v, 3) end

item_artefact.artefact_binder.update = function(self, delta)
	object_binder.update(self, delta)
--	printf("pl:art [%s] pos %s", self.object:name(), vec_to_str(self.object:position()))

	-- randomizer (first update)
	local kind = SYS_GetParam(0, self.object:section(), "kind")
	local kind_fits = kind and (kind == "i_arty" or kind == "i_arty_cont")
	if (not zz_item_artefact.cond_t[self.object:id()] and self.object:condition() >= 1 and kind_fits) then
		local cond = (math.random(minCondition + artefinder_bonus[arte_finder], maxCondition + artefinder_bonus[arte_finder]) / 100)
		if self.object:section() == "af_ah_f1" then
			cond = 0.98
		end
		self.object:set_condition(cond)
		zz_item_artefact.cond_t[self.object:id()] = cond
		pr("~randomizer set cond to: %s", r(cond))
	end

	-- if condition of stored artefact was changed by online transition / loading
	if zz_item_artefact.cond_t[self.object:id()] and self.object:condition() >= 1 then
		-- set stored condition back
		pr("condition changed from online/loading, prev: %s || curr: %s", r(self.object:condition()), r(zz_item_artefact.cond_t[self.object:id()]))
		self.object:set_condition(zz_item_artefact.cond_t[self.object:id()])
	end

	-- if condition was changed by other addons
	if (zz_item_artefact.cond_t[self.object:id()] and self.object:condition() ~= zz_item_artefact.cond_t[self.object:id()]) or (not zz_item_artefact.cond_t[self.object:id()] and self.object:condition() < 1) then
		pr("condition changed by other addons, prev: %s || curr: %s", zz_item_artefact.cond_t[self.object:id()] and r(zz_item_artefact.cond_t[self.object:id()]) or "nil", r(self.object:condition()))
		-- update this condition
		zz_item_artefact.cond_t[self.object:id()] = self.object:condition()
	end

    if self.first_call == true then
		local se_obj = alife_object(self.object:id())
		if (se_obj) then
			local m_data = alife_storage_manager.get_se_obj_state(se_obj, true)
			if (m_data and m_data.offline_condition and m_data.name == self.object:name()) then
				printf("loaded condition for %s "..tonumber(m_data.offline_condition), se_obj:section_name())
			--	self.object:set_condition(tonumber(m_data.offline_condition) or 0.9999999)
				--m_data.offline_condition = nil
			end
		end								  
		local ini = self.object:spawn_ini()
		if not (ini and ini:section_exist("fixed_bone")) then
			self.first_call = false
			return
		end
		local bone_name = ini:r_string_ex("fixed_bone", "name")

		local ph_shell = self.object:get_physics_shell()
		if not ph_shell then
			--printf("no ph shell")
			return
		end

		local ph_element = ph_shell:get_element_by_bone_name(bone_name)

		if ph_element:is_fixed() then
			--printf("OBJECT FIXED")
		else
			--printf("FIXING OBJECT")
			ph_element:fix()
		end
		
		self.first_call = false


    end	
	
		local obj = self.object
		local cobj = obj:cast_Artefact()
		if (not cobj) then
			return
		end
		local tg = time_global()
		local val = 0
		
		if (tg > self._tmr_rad) and (not self.no_rad) and in_actor_ruck(obj) then
			self._tmr_rad = tg + rad_tg_step
	
		-- Get radiation restore speed
		local rad_val = cobj.m_fRadiationRestoreSpeed or 0
		
		-- No process for artefacts with no / healing rad effect
		if (self.no_rad == nil) then
			self.no_rad = (rad_val <= 0)
			if self.no_rad then
				--print_dbg("Inventory radiation | artefact [%s] is not harmful -> exclude!", obj:name())
				return
			end
		end

		-- Apply radiation on actor
		local rad_delta = rad_val * rad_factor
		db.actor:change_radiation(rad_delta)
		
		--print_dbg("Inventory radiation | artefact: %s - radiation effect: %s", obj:name(), rad_delta)
		end
end

-- Item to backpack version added in a recent GAMMA update (2/10/24)
-- Quick check in case someone has not updated to most recent GAMMA update/in case function is deleted in GAMMA
if zz_item_artefact.actor_item_to_ruck then
	function zz_item_artefact.actor_item_to_ruck(item)
		local kind = SYS_GetParam(0, item:section(), "kind")
		
		local junk = kind and (kind == "i_arty_junk")
		if (not zz_item_artefact.cond_t[item:id()] and junk) then
			cond = item:condition()
			zz_item_artefact.cond_t[item:id()] = cond
		end
		
		local arte = kind and (kind == "i_arty" or kind == "i_arty_cont")
		if (not zz_item_artefact.cond_t[item:id()] and item:condition() >= 1 and arte) then
			local cond = (math.random(minCondition + artefinder_bonus[arte_finder], maxCondition + artefinder_bonus[arte_finder]) / 100)
			if item:section() == "af_ah_f1" then
				cond = 0.98
			end
			item:set_condition(cond)
			zz_item_artefact.cond_t[item:id()] = cond
			pr("~randomizer set cond to: %s", r(cond))
		end
	end
end

--------------------------------------------------------------------------------------------------------------
----------------- [WIP] Arte-finder Rank 5 Mutant Looting Chance (1%)  (Credit to Orleon) --------------------
--------------------------------------------------------------------------------------------------------------
function monster_on_loot_init(victim, loot_table)
	if arte_finder == 5 then
		if math.random(100) > 1 then return end
		try_spawn_artefact(loot_table, "mutant")
	end
end

function try_spawn_artefact(box, typ)
    local allowed_artefacts = drx_da_main_artefacts.allowed_artefacts
	if not allowed_artefacts then return end
	
	local spawned_artefact = allowed_artefacts[rand(#allowed_artefacts)]
	if not spawned_artefact then return end

    if not box[spawned_artefact] then
        box[spawned_artefact] = {count = 0}
    end
	
    box[spawned_artefact].count = box[spawned_artefact].count + 1
end

--------------------------------------------------------------------------------------------------------------
---------------------- [WIP] Midas' Touch - Better Task Rewards  (Credit to Orleon) --------------------------
--------------------------------------------------------------------------------------------------------------
local GetEcoFactor = game_difficulties.get_eco_factor
game_difficulties.get_eco_factor = function(key)
	if (key == "rewards") and (midas_touch > 0) then
		return GetEcoFactor(key) + (0.05 * midas_touch)
	end
	return GetEcoFactor(key)
end

--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

function perk_loot_improvement(item)------------------> actor_on_item_take(item)		
	if midas_touch > 0 then
		local money_amount = parse_list(ini_sys,item:section(),"money_amount")
		if #money_amount > 0 then
			if used_wallet then
			used_wallet = false
				return
			end
			local mult = 1
            mult = 1 + (0.05 * midas_touch)
			if money_amount[2] then
				local min_amt = math.floor(tonumber(money_amount[1])) * mult or 10
				local max_amt = math.floor(tonumber(money_amount[2])) * mult or 30
				db.actor:give_money(rand(min_amt, max_amt))
			else
				local amount = math.floor(tonumber(money_amount[1])) * mult or 10
				db.actor:give_money(amount)
			end
			--db.actor:drop_item(item)
		end
    end
end

if arti_lootboxes then
	base_arti_money = arti_money.func_cash
	function arti_money.func_cash(obj)

		local money_range = SYS_GetParam(0, obj:section(), "money_value")
		if money_range then
			local mult = 1
            mult = 1 + (0.05 * midas_touch)
			money = arti_lootboxes.str_explode_num(money_range, ",")
			if money[2] then
				local min_amt = math.floor(tonumber(money[1])) * mult or 10
				local max_amt = math.floor(tonumber(money[2])) * mult or 30
				db.actor:give_money(math.random(min_amt, max_amt))
			else
				local amount = math.floor(tonumber(money[1])) * mult or 10
				db.actor:give_money(amount)
			end
			alife_release(obj)
		end
	end
end

--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
function build_weapon_list()
	if (zone_slayer < 1) then return end
	shotgun_list = {}
	weapon_list = {}
	local w1, w2, w3, w4 = db.actor:item_in_slot(3), db.actor:item_in_slot(2), db.actor:item_in_slot(1), db.actor:item_in_slot(5)
		
	if w1 and not IsValidMelee(w1) then
		weapon_list[#weapon_list + 1] = w1 
		local clip = ini_sys:r_float_ex(w1:section(), "ammo_mag_size") or 3
		if clip <= 2 then
			local ammo_table = parse_list(ini_sys,w1:section(),"ammo_class")
			if ammo_table and ammo_table[1] and shotgun_ammo_check[ammo_table[1]] then
				shotgun_list[#shotgun_list + 1] = w1
			end
		end
	end
	if w2 and not IsValidMelee(w2) then
		weapon_list[#weapon_list + 1] = w2 
		local clip = ini_sys:r_float_ex(w2:section(), "ammo_mag_size") or 3
		if clip <= 2 then
			local ammo_table = parse_list(ini_sys,w2:section(),"ammo_class")
			if ammo_table and ammo_table[1] and shotgun_ammo_check[ammo_table[1]] then
				shotgun_list[#shotgun_list + 1] = w2
			end
		end
	end
	if w3 and not IsValidMelee(w3) then
		weapon_list[#weapon_list + 1] = w3
		local clip = ini_sys:r_float_ex(w3:section(), "ammo_mag_size") or 3
		if clip <= 2 then
			local ammo_table = parse_list(ini_sys,w3:section(),"ammo_class")
			if ammo_table and ammo_table[1] and shotgun_ammo_check[ammo_table[1]] then
				shotgun_list[#shotgun_list + 1] = w3
			end
		end
	end
	if w4 and not IsValidMelee(w4) then
		weapon_list[#weapon_list + 1] = w4
		local clip = ini_sys:r_float_ex(w4:section(), "ammo_mag_size") or 3
		if clip <= 2 then
			local ammo_table = parse_list(ini_sys,w4:section(),"ammo_class")
			if ammo_table and ammo_table[1] and shotgun_ammo_check[ammo_table[1]] then
				shotgun_list[#shotgun_list + 1] = w4
			end
		end
	end
end
--
--

function on_game_start()
	if experience_potions then
		RegisterScriptCallback("experience_skill_on_update", experience_skill_on_update)
	else
		RegisterScriptCallback("experience_perk_on_update", experience_skill_on_update)
	end
	RegisterScriptCallback("save_state",					save_state)
    RegisterScriptCallback("load_state",					load_state)
	-- RegisterScriptCallback("npc_on_use",                     looting_enemy)
	RegisterScriptCallback("actor_on_item_take",			perk_loot_improvement)
	RegisterScriptCallback("actor_item_to_ruck",			perk_loot_improvement)
	RegisterScriptCallback("actor_on_first_update",			build_weapon_list)
	RegisterScriptCallback("actor_item_to_ruck",			build_weapon_list)
	RegisterScriptCallback("actor_item_to_slot",			build_weapon_list)
	RegisterScriptCallback("monster_on_loot_init",			monster_on_loot_init)
end

-- Weapon Parts Monkey Patching
local ini_parts   = itms_manager.ini_parts
local good_breakpoint = 60
EvaluateParts = item_parts.evaluate_parts

OrgPartEval = zzzz_arti_jamming_repairs.weapon_eval_parts
function zzzz_arti_jamming_repairs.weapon_eval_parts(wpn)
    local sec = ini_sys:r_string_ex(wpn:section(),"parent_section") or wpn:section()
    local parts = ini_parts:r_string_ex("con_parts_list", sec)
	parts = str_explode(parts,",")
	local base_chance = tonumber(a_arti_jamming_mcm.get_config("newdropschance")) or 50
	local adjusted = base_chance * wpn:condition()
	local parts_data = {}
	parts_data[sec] = math.ceil(wpn:condition() * 100)
	for i=1,#parts do
		local part = parts[i]
		local final_chance = math.ceil(adjusted)-- * parts_info[part].weight)
		arti_jamming.print_dbg("Part %s has a %s chance to be good.", part, final_chance)
		
		if wpn:condition() > 0.9 then
			arti_jamming.print_dbg("Short circuiting")
			parts_data[part] = rand(90, 99)
		elseif rand(100) < final_chance then
			parts_data[part] = rand(good_breakpoint, 99) + careful_handler_bonus
			parts_data[part] = clamp(parts_data[part], 0, 100)
		else
			parts_data[part] = rand(1, good_breakpoint - 1) + careful_handler_bonus
			parts_data[part] = clamp(parts_data[part], 0, 100)
		end
    end
	se_save_var( wpn:id(), wpn:name(), "parts", parts_data )
end