local berserker = 0
local berserker_resist = 0

local spiked = 0
local spiked_reflect_perc = 0

local anomaly_defense = 0
local anomaly_defense_resist = 0

local jump_man = 0
local jump_man_threshold = 0

local mutant_slayer = 0
local base_mutant_resist = 0

local lightweight_dodge = 0
local lightweight_dodge_chance = 0
local wick_mode = 0

local demo_expert = 0
local demo_expert_resist = 0

local floor = math.floor
local weaponCat = z_cxv_experience_perk_weapon_reload_hit_effects.sortK_of
local string_find   = string.find

local wick_inclusions = {
	"vz61",
	"kiparis",
}

local function experience_skill_on_update(id, data)
	if (id == "perk_berserker") then
		berserker = data["curr_level"]
		berserker_resist = berserker * 0.05
	end
	if (id == "perk_spiked") then
		spiked = data["curr_level"]
		spiked_reflect_perc = 0.05 * spiked
	end
	if (id == "perk_anomaly_defense") then
		anomaly_defense = data["curr_level"]
		anomaly_defense_resist = anomaly_defense * 0.09
	end
	if (id == "perk_mutant_slayer") then
		mutant_slayer = data["curr_level"]
		base_mutant_resist = mutant_slayer * 0.05
	end
	if (id == "perk_wick_mode") then
		wick_mode = data["curr_level"]
	end
	if (id == "perk_lightweight_dodge") then
		lightweight_dodge = data["curr_level"]
	end
	if (id == "perk_jump_man") then
		jump_man = data["curr_level"]
		jump_man_threshold = jump_man * 0.15
	end
	if (id == "perk_demo_expert") then
		demo_expert = data["curr_level"]
		demo_expert_resist = demo_expert * 0.05
	end
end

local difficulty_multiplier_enemy = {
	[1]  = 0.65,
	[2]  = 0.8,
	[3]  = 1.0,
	[4]  = 1.2,
}

local mutant_list = {
	[14] = true,
    [108] = true,
    [15] = true,
    [109] = true,
    [16] = true,
    [110] = true,
    [17] = true,
    [111] = true,
    [29] = true,
    [112] = true,
    [18] = true,
    [113] = true,
	[20] = true,
    [23] = true,
    [116] = true,
	[24] = true,
    [25] = true,
    [117] = true,
    [26] = true,
    [119] = true,
	[27] = true,
    [121] = true,
    [22] = true,
    [115] = true,
    [33] = true,
    [122] = true,
	[37] = true,
    [123] = true,
	[38] = true,
    [124] = true
}

local allowed_hit_types = {
    [5] = true,
    [6] = true,
    [7] = true,
    [8] = true
}

local get_time_hours = level.get_time_hours

function update_dodge_chance()
	if (lightweight_dodge <= 0) then
		lightweight_dodge_chance = 0
		printf("[RPG] LW Dodge Chance: %s %",lightweight_dodge_chance)
		return
	end
	
	local outfit_weight = 0
	local outfit = db.actor:item_in_slot(7)
	if (outfit) then
		local outfit_weight_upgraded = floor(outfit:weight()) or 12
		local outfit_weight_base = floor(ini_sys:r_float_ex(outfit:section(), "inv_weight")) or 12
		if outfit_weight_upgraded > 12 and outfit_weight_base > 12 then
			outfit_weight = 12
		elseif outfit_weight_upgraded < outfit_weight_base then
			outfit_weight = outfit_weight_upgraded
		else
			outfit_weight = outfit_weight_base
		end
	end
	
	lightweight_dodge_chance = ((12 - outfit_weight) * 0.5) * lightweight_dodge
	printf("[RPG - Player When Hit] LW Dodge Chance: %s %",lightweight_dodge_chance)
end
	
--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
local GActor_OnBeforeHitCallback = _G.CActor__BeforeHitCallback
_G.CActor__BeforeHitCallback = function(actor, shit, bone_id)
	rpg_damage_reduction(shit, bone_id)
	return GActor_OnBeforeHitCallback(actor, shit, bone_id)
end


--base_grok_shit = grok_actor_damage_balancer.shit_booster
--function grok_actor_damage_balancer.shit_booster (shit, bone_id, k_ap)
function rpg_damage_reduction(shit, bone_id)
	
	
	local player_weapon = db.actor:active_item()
	if shit.type == hit.fire_wound and ((wick_mode > 0) or (lightweight_dodge > 0)) then
		local dodge_chance = lightweight_dodge_chance * 10
		if z_cxv_experience_perk_weapon_reload_hit_effects and player_weapon then
			if (weaponCat(player_weapon) == "pistol") then
				dodge_chance = dodge_chance + 150
			elseif z_cxv_experience_perk_weapon_reload_hit_effects and (weaponCat(player_weapon) == "smg") then
				local is_exception = false
				for i=1,#wick_inclusions do
					if (string.find(player_weapon:section(), wick_inclusions[i])) and not is_exception then
						is_exception = true
						dodge_chance = dodge_chance + 150
					end
				end
			end
		end
		
		if math.random(1000) < dodge_chance then
			printf("///////////   RPG System: Damage reduction in progress  //////////////////")
			printf("[RPG - Player When Hit] Original Base Hit: %s of type %s", shit.power, shit.type)
			shit.power = shit.power * 0
			printf("[RPG - Player When Hit] Dodged hit!")
			return
		end
	end
	
	
	-- if shit.type == hit.telepatic then return end
    local base_power = shit.power
    local damage_mult = 1
    base_power = shit.power
    shit_type = shit.type
	local is_elemental = (((shit_type == hit.shock) or (shit_type == hit.burn) or (shit_type == hit.light_burn) or (shit_type == hit.chemical_burn)
	or string.find(shit.draftsman:id(),"field") or string.find(shit.draftsman:id(),"zone_mine")) and ((shit_type ~= hit.radiation) or (shit_type ~= hit.telepatic))) or false
	
------------------------------------------------------------> Anomaly Defense
    if anomaly_defense > 0 and is_elemental then
		damage_mult = damage_mult - (anomaly_defense_resist)
		--printf("[RPG - Player When Hit] Anomaly Defense %s% damage reduction!", anomaly_defense_resist)
    end

------------------------------------------------------------> Berserker
	if shit.draftsman and (berserker > 0) and not is_elemental then
		if player_weapon and IsMelee(player_weapon) then
			damage_mult = damage_mult - (berserker_resist)
			--printf("[RPG - Player When Hit] Berserker %s% damage reduction!", berserker_resist)
		end
	end

------------------------------------------------------------> Spiked
    if shit.draftsman and (shit.draftsman:id() ~= db.actor:id()) and (spiked > 0) and not is_elemental then
		
		local spike = base_power * spiked_reflect_perc
		
		shit.power = spike
		shit.draftsman:hit(shit)
			
		-- Make sure to return hit back to normal values for the true damage reduction
		shit.power = base_power
		
		--printf("[RPG - Player When Hit] Spiked %s% damage reflection (no damage reduction)!", spiked_reflect_perc)
    end
	
------------------------------------------------------------> Thick Skin	
	if shit.draftsman and mutant_slayer > 0 then
		if mutant_list[shit.draftsman:clsid()] and allowed_hit_types[shit_type] then
		
			local night_mult = 1
			if mutant_slayer >= 3 then
				local hours = get_time_hours()
				if hours >= 21 or hours <= 5 then
					night_mult = 1.50
				end
			end
			
			damage_mult = damage_mult - (base_mutant_resist * night_mult)
			--printf("[RPG - Player When Hit] Thick Skin %s% damage reduction!", (base_mutant_resist * night_mult))
		end
    end
	
------------------------------------------------------------> Jump Man/Acrobatics
	if shit.draftsman and (shit.draftsman:id() == db.actor:id()) and (not is_elemental) and (shit_type ~= hit.explosion) and 
	(shit_type ~= hit.radiation) and (jump_man > 0) then
		if shit.power < jump_man_threshold then
			damage_mult = 0
			--printf("[RPG - Player When Hit] Jump Man negating all fall damage!")
		elseif jump_man == 3 then	-- take half damage if over threshold at max rank
			damage_mult = damage_mult - 0.5
			--printf("[RPG - Player When Hit] Jump Man negating 50% of the fall damage!")
		end
	end
	
------------------------------------------------------------> Explosive Personality (Damage Reduction)
	if shit.draftsman and demo_expert > 0 and shit_type == hit.explosion then
		damage_mult = damage_mult - demo_expert_resist
		--printf("[RPG - Player When Hit] Explosive Personality %s% damage reduction!", demo_expert_resist)
	end
	
	if damage_mult < 1 then
		printf("///////////   RPG System: Damage reduction in progress  //////////////////")
		printf("[RPG - Player When Hit] Original Base Hit: %s of type %s (Is Elemental? %s)", shit.power, shit.type, is_elemental)
		shit.power = shit.power * damage_mult
		display_reduction = tonumber(100 - (damage_mult * 100))
		printf("[RPG - Player When Hit] New Base Hit: %s | Damage Reduction: %s%", shit.power, display_reduction)
	end
	-- Return reduced values back into Grok's equations
	-- base_grok_shit(shit, bone_id, k_ap)
end

function on_game_start()
	if experience_potions then
		RegisterScriptCallback("experience_skill_on_update", experience_skill_on_update)
	else
		RegisterScriptCallback("experience_perk_on_update", experience_skill_on_update)
	end	
	RegisterScriptCallback("actor_on_first_update", update_dodge_chance)
	--RegisterScriptCallback("actor_item_to_ruck", update_dodge_chance)
	RegisterScriptCallback("actor_item_to_slot", update_dodge_chance)
end