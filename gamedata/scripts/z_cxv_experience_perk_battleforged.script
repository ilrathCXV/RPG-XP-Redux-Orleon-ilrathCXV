local perks = x_cxv_perks_data.perks
local battleforged_threshold = 70

-- Needed for this copy-paste monkeypatch
cgd = arti_jamming.cgd
print_dbg =  arti_jamming.print_dbg
get_config = a_arti_jamming_mcm.get_config
local math_random = math.random
local math_floor = math.floor

-- Intercept "damaged" check
local avoided_damage = false

-- Randomly damage 1 part of the weapon by DAMAGE, skipping barrels
BaseDamagePart = arti_jamming.damage_part
function arti_jamming.damage_part(wpn)
	if perks["perk_battleforged"] == 0 then
		BaseDamagePart(wpn)
		return
	end
	
	-- A bit of a re-work: going to find a part to damage if an "invalid one" is picked
	-- valid parts (at or above 70% condition) will be added to a list by name (no specific order)
	local part_names = {}
	for k,v in pairs(cgd.parts) do
		if v >= battleforged_threshold then
			table.insert(part_names, k)
		end
	end
	
	-- find a valid part to damage
	local part_to_dmg
	
	-- if no valid parts are found, exit as we avoided all damage
	local total_part_names = #part_names
	if total_part_names < 1 then
		avoided_damage = true
		return
	elseif total_part_names == 1 then
		part_to_dmg = part_names[1]
	else
		part_to_dmg = part_names[math_random(1, total_part_names)]
	end
	
	printf("part_to_dmg (%s)", part_to_dmg)
	
	if part_to_dmg == nil then
		avoided_damage = true
		return
	end
	
	local part_con = cgd.parts[part_to_dmg]
	
	printf("part_con (%s)", part_con)
	
	local damage = math_random(5, 12)
	cgd.parts[part_to_dmg] = part_con > damage and (part_con - damage) or 1

	print_dbg("%s damaged to %s condition", part_to_dmg, cgd.parts[part_to_dmg])
	if (get_config("verbosity") > 1) then
		news_manager.send_tip(db.actor, gc("ui_st_parts_damage"), nil, "swiss_knife", 6000)
	end
end

-- still need to manage the "calculate_damage" function
BaseCalcDamage = arti_jamming.calculate_damage
function arti_jamming.calculate_damage(wpn, old_ammo, heat)
	
	if perks["perk_battleforged"] == 0 then
		BaseCalcDamage(wpn, old_ammo, heat)
		return
	end
	
	local cond = wpn and math_floor(wpn:condition()*100) or 100
	local damaged = false
	local roll = math_random(1000)
	local damage_chance = old_ammo and 6 or 2
	local threshold = get_config("threshold") or 85
	local overheat_modifier = arti_jamming.get_overheat_modifier(wpn)
	print_dbg("weapon %s, heat is %s. heat modifier is  %s", wpn:section(), cgd.heat, overheat_modifier)
	if (cond < threshold) then
		damage_chance = (threshold - cond) * cgd.current_gun_shot_dec * 2000 * overheat_modifier
		if old_ammo then damage_chance = damage_chance + 20 end
		print_dbg("Damage chance: %s. Condition: %s", damage_chance, cond)
	end

	if (roll < damage_chance) then
		avoided_damage = false
		arti_jamming.damage_part(wpn)
		if not avoided_damage then
			damaged = true
		end
	end
	
	if cgd.barrel_con >= 70 then
		local barrel_wear = old_ammo and 40 or 20
		barrel_wear = barrel_wear * overheat_modifier
		if (roll < barrel_wear) then
			print_dbg("Damaged barrel")
			cgd.barrel_con = cgd.barrel_con > 0 and cgd.barrel_con - 1 or 0
			damaged = true
		end
	end
	
	if damaged then 
		arti_jamming.persist_current_weapon()
	end
end

-- This is for ArtiGrok users
if cxv_artigrok_bo and arti_handlers then
	
	BaseConditionDegrade = arti_handlers.condition_degrade_on_fire
	function arti_handlers.condition_degrade_on_fire(amount, wpn, chance)
		if perks["perk_battleforged"] == 0 then
			BaseConditionDegrade(amount, wpn, chance)
			return
		end
		
		local chance_ceil = chance or 10
		local rand = math_random(1, chance_ceil)
		local weapon = wpn or db.actor:active_item()
		local dura_rip = amount or 0.0025
		if weapon and rand == 1 then
			if grok_gun_condition_fixed then
				if arti_jamming.has_parts(weapon) then
					local parts = se_load_var(weapon:id(), weapon:name(), "parts")
					if not parts then return end
					
					local part_names = {}
					for k,v in pairs(parts) do
						if v >= battleforged_threshold then
							table.insert(part_names, k)
						end
					end
					
					local total_part_names = #part_names
					if total_part_names < 1 then return end
					
					local part_to_dmg
					
					for i = 1, total_part_names do
						part_index = math_random(1, #part_names)
						part_to_dmg = part_names[part_index]
						-- printf("Part to damage: %s", part_to_dmg)
						if arti_jamming.is_part(part_to_dmg) then
							if (not arti_jamming.is_barrel(part_to_dmg)) or (arti_jamming.is_barrel(part_to_dmg) and math_random(1, 2) == 1) then	-- if barrel is picked, 50% chance to not damage it --> choose a new part to damage
								break
							end
						end
						table.remove(part_names, part_index)
						part_to_dmg = nil
					end
					
					if not part_to_dmg then return end
					
					parts[part_to_dmg] = clamp(parts[part_to_dmg] - ((dura_rip == 0.0105 and 3) or (dura_rip == 0.0025 and 2) or 2), 1, parts[part_to_dmg])

					item_parts.set_parts_con(weapon:id(), parts)
					
--					se_save_var( weapon:id(), weapon:name(), "parts", parts )
					arti_jamming.persist_current_weapon()
				end
			else
				weapon:set_condition(clamp(weapon:condition() - dura_rip, 0, 1))	-- Lose 0.25% condition when using variants
			end
		end
	end
end	