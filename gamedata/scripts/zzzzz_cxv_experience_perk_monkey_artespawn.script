local arte_finder = 0
local arte_hunter_bonus = 0

local function experience_perk_on_update(id, data)
	if (id == "perk_artefinder") then
		arte_finder = data["curr_level"]
		arte_hunter_bonus = arte_finder * 3
	end
end


local random = math.random
local ceil = math.ceil

-- Shuffle table, Fisher-Yates shuffle with preserving original table
local function shuffle(t)
   local s = {}
   for i = 1, #t do s[i] = t[i] end
   for i = #t, 2, -1 do
     local j = random(i)
     s[i], s[j] = s[j], s[i]
   end
   return s
end

local function load_defaults()
	local t = {}
	local op = drx_da_main_mcm.op
	for i, v in ipairs(op.gr) do
		if v.def ~= nil then
			t[v.id] = v.def
		end
	end
	return t
end

local function load_settings()
	settings = load_defaults()
	if ui_mcm then
		for k, v in pairs(settings) do
			settings[k] = ui_mcm.get("drx_da/" .. k)
		end
	end
end

base_drx_artefact_spawn = drx_da_main.spawn_artefacts_on_level

function drx_da_main.spawn_artefacts_on_level(level_name)
	if arte_finder <= 0 then base_drx_artefact_spawn(level_name) return end
	
	local settings = load_defaults()
	local level_name = level_name or level.name()

	local level_data = drx_da_main.get_level_data(level_name)
	if not level_data then
		printf("Error, unable to get data for %s", level_name)
		return
	end

	local level_file = level_data.level_file

	-- Build a list of available smart terrains:
	local smart_list = {}
	for k, v in pairs(drx_da_main.updated_anomaly_levels[level_name].anomaly_types_by_smart) do
		if not drx_da_main.updated_anomaly_levels[level_name].available_smarts_reduced[k] then
			smart_list[#smart_list + 1] = k
		end
	end
	smart_list = invert_table(smart_list)

	local pairs = pairs
	local collect_section = utils_data.collect_section
	local size_table = size_table

	local allowed_artefacts = drx_da_main_artefacts.allowed_artefacts
	local allowed_artefacts_flipped = invert_table(allowed_artefacts)
	local anomaly_type_to_artefacts = drx_da_main_artefacts.anomaly_type_to_artefacts
	local artefacts_map_tiers = drx_da_main_artefacts.artefacts_map_tiers[level_name] and shuffle(drx_da_main_artefacts.artefacts_map_tiers[level_name])
	local artefacts_map_chances = drx_da_main_artefacts.artefacts_map_chances and drx_da_main_artefacts.artefacts_map_chances[level_name]
	if artefacts_map_chances then artefacts_map_chances = artefacts_map_chances + arte_hunter_bonus end

	-- Build anomalies table
	if is_not_empty(smart_list) then
		printf("%s has smarts with anomalies, try to spawn artefacts", level_name)
		local artefacts = drx_da_main.updated_anomaly_levels[level_name].artefacts or {}
		local anomalies_by_smart = drx_da_main.updated_anomaly_levels[level_name].anomalies_by_smart
		for smart_name, _ in pairs(anomalies_by_smart) do
			printf("checking smart %s for spawning artefacts", smart_name)
			if is_not_empty(anomalies_by_smart[smart_name]) and smart_list[smart_name] then
				printf("try to spawn artefacts on smart %s", smart_name)
				for i = 1, settings.max_artefacts_per_zone do

					-- Increased chance by 2 times for underground levels
					local dice_roll = random(100)
					local chance = artefacts_map_chances or ceil((settings.artefacts_spawn_chance + arte_hunter_bonus) * ((level_weathers.bLevelUnderground or drx_da_main.small_levels[level_name]) and 2 or 1))
					printf("artefacts dice roll %s, chance %s, spawn %s", dice_roll, chance, dice_roll <= chance)
					if dice_roll <= chance then
						-- Choose an artefact to spawn:
						local anomaly_type = drx_da_main.updated_anomaly_levels[level_name].anomaly_types_by_smart[smart_name]
						local picked_artefact = (function()

							local res
							if artefacts_map_tiers and random(100) > settings.random_artefact_spawn_chance then
								local tries = 40
								while tries > 0 and (not res or not allowed_artefacts_flipped[res]) do
									if anomaly_type_to_artefacts[anomaly_type] then
										local t = {}
										for k, v in pairs(artefacts_map_tiers) do
											if anomaly_type_to_artefacts[anomaly_type][v] then
												t[#t + 1] = v
											end
										end
										printf("picking artefact by level %s, anomaly zone %s has defined arty list", level_name, anomaly_type)
										res = t[random(#t)]
									else
										printf("picking artefact by level %s", level_name)
										res = artefacts_map_tiers[random(#artefacts_map_tiers)]
									end

									if not allowed_artefacts_flipped[res] then
										printf("artefact is not allowed to spawn, repicking")
									end

									tries = tries - 1
								end
							else
								printf("picking random artefacts")
								res = allowed_artefacts[random(#allowed_artefacts)]
							end

							if not res then
								printf("failed to pick artefact by level, pick random from allowed, level_name %s, anomaly_type %s, has artefacts_map_tiers %s, has anomaly_type_to_artefacts %s", level_name, anomaly_type, artefacts_map_tiers ~= nil, anomaly_type_to_artefacts[anomaly_type] ~= nil)
								res = allowed_artefacts[random(#allowed_artefacts)]
							end

							return res
						end)()

						-- Artefact Variationizer compatibility
						if artefact_variationizer then
							local av = artefact_variationizer
							picked_artefact = av.get_artefact_base(picked_artefact)
							if av.valid_artys[picked_artefact] then
								local variationizer_tier = av.artefact_chances[random(#av.artefact_chances)]
								local arty = av.artefact_by_variationizer_tier[picked_artefact][variationizer_tier]
								picked_artefact = arty[random(#arty)]
							end
						end

						printf("picked artefact to spawn %s, anomaly_type %s, smart %s level %s", picked_artefact, anomaly_type, smart_name, level_name)
						local artefact_id = drx_da_main.spawn_artefact_on_smart(level_file, smart_name, picked_artefact, level_name)
						if artefact_id then
							artefacts[artefact_id] = picked_artefact
						else
							printf("error, unabled to spawn artefact %s, anomaly_type %s, smart %s level %s", picked_artefact, anomaly_type, smart_name, level_name)
						end
					end
				end
			end
		end
		return size_table(artefacts) > 0
	else
		printf("%s has no smarts with anomalies, dont spawn artefacts", level_name)
	end
end

function on_game_start()
	RegisterScriptCallback("experience_perk_on_update", experience_perk_on_update)
end