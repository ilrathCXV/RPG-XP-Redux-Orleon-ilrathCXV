local perks = x_cxv_perks_data.perks
local gunner_damage_multiplier = 0.05
local gunner_ap_additions = {[0] = 0, [1] = 0.002, [2] = 0.004, [3] = 0.006, [4] = 0.008, [5] = 0.010 }

local jamming_bones = {
	[20] = true, 
	[21] = true, 
	[22] = true,
	[33] = true,
	[34] = true, 
	[35] = true,
}

local disarming_bones = {
	[23] = true, 
	[24] = true, 
	[25] = true, 
	[26] = true,  
	[27] = true, 
	[28] = true,  
	[29] = true,  
	[30] = true, 
	[31] = true,  
	[32] = true,
	[36] = true,
	[37] = true,
	[38] = true, 
	[39] = true, 
	[40] = true,
	[41] = true, 
	[42] = true, 
	[43] = true,
	[44] = true, 
	[45] = true, 	
}

local fourth_times_timer_add = {[0] = 0, [1] = 0, [2] = 5, [3] = 10 } -- Each subsequent rank adds 0.5s to the grace timer
local glass_cannon_exp = { [1] = 0.85, [2] = 1.1, [3] = 1.35 }

local string_find = string.find

local golden = true	-- will be used to determine if old GBO or re-coded GBO
--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

local sms = actor_menu.set_msg
fourth_times_counter = 0
local fourth_times_grace = 0

local play_sound_on_actor = x_cxv_perks_data.play_sound_on_actor

local difficulty_multiplier_player = {
	[1]  = 1.3,
	[2]  = 1.05,
	[3]  = 0.90,		--[3]  = 1.0,
	[4]  = 0.80,		--[4]  = 1.0,
}

--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

function get_object_by_id(id) -- same as _g.script one but without spamming in console
    if not id then return end
    if (id == AC_ID) then return db.actor end

    local obj = db.storage[id] and db.storage[id].object or level.object_by_id(id)
    if not obj then return end
    return obj
end

--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

local time_g
local update_1000ms_timer = 0
local update_1000ms_timer_interval = 10	-- update every 1 second
local fourth_timer = 0

local math_floor = math.floor

function actor_on_update()
	time_g = math_floor(time_global() * 0.01)
	
	if (time_g > update_1000ms_timer) then
		if (perks["perk_fourth_times"] > 0) and (time_g > fourth_timer) and (fourth_times_counter > 0) and (fourth_timer > 0) then
			-- printf("[RPG - Hit Effects] On Your Mark removed: %s of 8 hits", fourth_times_counter)
			fourth_times_counter = 0
			fourth_timer = 0
			play_sound_on_actor("rpg_skills\\garand_ping", 0.45, random_float(0.8, 1.0))
		end
		update_1000ms_timer = time_g + update_1000ms_timer_interval
	end
end

--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

function process_perk_effects(victim, weapon, bone_id)
	
	local damage_multiplier = 1
	
	local criticalChance = 0
	local criticalMultiplier = 1
	
    local weapon_class = x_cxv_perks_data.sortK_of(weapon)
	local head_shot = perk_based_artefacts_bone_mapper.is_critical_bone(victim:clsid(), bone_id)
	
	if (string_find(weapon:section(), "_ppsh")) then weapon_class = "smg" end
	
	local ammo_type_number
	local ammo_list
	local ammo_section
	local pellet_count
	local fourth_mult = 1
	
	-- Need to account for Game Difficulty
	local gameplay = alife_storage_manager.get_state().diff_game
	if not (type(gameplay) == "table") then -- for old saves
		alife_storage_manager.get_state().diff_game = {}
		alife_storage_manager.get_state().diff_game["type"] = game_num
		gameplay = alife_storage_manager.get_state().diff_game
	end

	local game_num = gameplay["type"] or game_num
	
	if (perks["perk_fourth_times"] > 0) then
		ammo_list = utils_item.get_ammo(weapon:section(), weapon:id())
		ammo_type_number = weapon:get_ammo_type()
		ammo_section = ammo_list[ammo_type_number+1]
		pellet_count = SYS_GetParam(2, ammo_section, "buck_shot") or 1
	end
	
	-------------------------------------------------------------------
	-- Lucky Strike + Deadeye: 	Critical damage and chance modifiers --
	-------------------------------------------------------------------

	if (perks["perk_lucky_strike"] <= 0) and (perks["perk_deadeye"] > 0) then	-- if you have DE but don't have LS...
		criticalChance = 1							-- Crit Chance is 0.1%
	elseif (perks["perk_lucky_strike"] > 0) then
		criticalChance = (perks["perk_lucky_strike"] ^ 2) * 10	-- Crit Chance is (LS^2)%
	end
	
	if head_shot then
		criticalChance = criticalChance * 1.5
		fourth_mult = 2
	end
	
	------------------------------------------------------------------------------------------------
	-- GLASS CANNON: While lower than 80% health, gain exp. damage bonus the lower your health is --
	------------------------------------------------------------------------------------------------
	
	if (perks["perk_glass_cannon"] > 0) and (db.actor.health < 0.80) then
		damage_multiplier = damage_multiplier * (2 - db.actor.health)^(glass_cannon_exp[perks["perk_glass_cannon"]])
	end
	
	-------------------------------------------------------------------
	-- Lucky Strike + Deadeye: 	Critical damage and chance modifiers --
	-------------------------------------------------------------------
	
	if (math.random(1000) <= criticalChance) then
		
		fourth_mult = 2
		
		if (perks["perk_lucky_strike"] > 0) and (perks["perk_deadeye"] <= 0) then	-- if you have LS but don't have DE...
			criticalMultiplier = 1.1					-- Crit Multiplier is 10%
		elseif (perks["perk_deadeye"] > 0) then
			criticalMultiplier = 1 + (0.25 * perks["perk_deadeye"])	-- Crit Multiplier is (25  * DE)%
		end
	
		txt = game.translate_string("st_critical_hit_1") .. " " .. criticalMultiplier .. game.translate_string("st_critical_hit_2")
		sms(2, txt, 5)
		play_sound_on_actor("material\\bullet\\collide\\metall04gr", 1, criticalMultiplier)
		damage_multiplier = damage_multiplier * criticalMultiplier
	end
	
	-----------------------------------------------------------------------------------------------------------
	-- Jamming Shot (also works with melees): Shooting an enemy's arms "jams" their weapon (5 sec. cooldown) --
	-----------------------------------------------------------------------------------------------------------
	if perks["perk_jamming_shot"] > 0 and IsStalker(victim) and jamming_bones[bone_id] and x_cxv_perks_data.can_jam then
		local enemy_weapon = victim:active_item()
		if enemy_weapon and IsWeapon(enemy_weapon) then 
			x_cxv_perks_data.can_jam = false
			CreateTimeEvent("can_jam_reset"..victim:id(), db.actor:id(), 5.0, reset_shot_conditions, 0)
			enemy_weapon:unload_magazine()
		end
	end
	
	-----------------------------------------------------------------------------------------------------------------------------------
	-- Disarming Shot: 30% chance to make an NPC drop their weapon when shot in the hands (condition and ammo will be set correctly) --
	-- 				   								[[[ 10 sec. cooldown ]]]														 --
	-----------------------------------------------------------------------------------------------------------------------------------
	if perks["perk_disarming_shot"] > 0 and IsStalker(victim) and disarming_bones[bone_id] and x_cxv_perks_data.can_disarm  then
		local enemy_weapon = victim:best_weapon()
		local dropChance = math.random(100) <= 30
		if dropChance and weapon and enemy_weapon and IsWeapon(enemy_weapon) then
			-- Credit to Banjaji's Nutcracker Mayhem for weapon condition
			-- Added bonus that the weapon will have the same ammo in its mag when it is dropped
			x_cxv_perks_data.can_disarm = false
			local get_current_ammo = enemy_weapon:get_ammo_in_magazine() or 0
			local cls = enemy_weapon:clsid()
			if (not (cls == clsid.wpn_grenade_rgd5_s or cls == clsid.wpn_grenade_f1_s)) then
				death_manager.set_weapon_drop_condition(victim,enemy_weapon)
			end
			
			local mag_size = utils_item.get_param(enemy_weapon:section(), enemy_weapon and enemy_weapon:id(), "ammo_mag_size", "float", true)
			if not mag_size then
				mag_size = ini_sys:r_u32(enemy_weapon:section(), "ammo_mag_size") or 0
			end
			
			-- set random amount of ammo in the magazine
			enemy_weapon:set_ammo_elapsed(get_current_ammo)
			victim:drop_item(enemy_weapon)
			CreateTimeEvent("can_disarm_reset"..victim:id(), db.actor:id(), 10.0, reset_shot_conditions, 1)
		end
	end
	
	if IsMonster(victim) then
		-----------------------------------------------------------
		-- Gunslinger/Rifleman/Heavy Gunner: 	Damage modifiers --
		-----------------------------------------------------------
		if (perks["perk_gunslinger"] > 0) and ((weapon_class == "smg") or (weapon_class == "pistol")) then
			damage_multiplier = damage_multiplier * (1 + (gunner_damage_multiplier * perks["perk_gunslinger"]))
		end
			
		if (perks["perk_rifleman"] > 0) and (weapon_class == "rifle") then
			damage_multiplier = damage_multiplier * (1 + (gunner_damage_multiplier * perks["perk_rifleman"]))
		end
		------------------------------------------------------------> Heavy Weapons
		if (perks["perk_heavy_gunner"] > 0) and ((weapon_class == "heavy") or (weapon_class == "shotgun") or (weapon_class == "sniper")) then
			damage_multiplier = damage_multiplier * (1 + (gunner_damage_multiplier * perks["perk_heavy_gunner"]))
		end
	end
	
	-----------------------------------------------
	-- Wick Mode/Zone Slayer: 	Damage modifiers --
	-----------------------------------------------
	if (perks["perk_wick_mode"] > 0) and IsStalker(victim) then
		if (weapon_class == "pistol") then
			damage_multiplier = damage_multiplier * 1.05
		elseif weapon_class ~= "melee" and weapon_class ~= "explosive" and weapon_class ~= "misc" and weapon_class ~= "heavy" then
			if SYS_GetParam(2, weapon:section(), "single_handed") == 1 then
				damage_multiplier = damage_multiplier * 1.05
			end
		end
	end
	
	if (perks["perk_zone_slayer"] > 0) and IsMonster(victim) and (weapon_class == "shotgun") then
		local mag_size = ini_sys:r_u32(weapon:section(), "ammo_mag_size") or 3
		if mag_size < 3 then
			damage_multiplier = damage_multiplier * 1.05
		end
	end	
	
	-------------------------------------------------------------
	-- "The End": 30% more damage with snipers when hip-firing --
	-------------------------------------------------------------
	if perks["perk_the_end"] > 0 and weapon_class == "sniper" then
		if not string_find(weapon:section(), "_gauss") and not string_find(weapon:section(), "_wa2000") then
			local weapon_rpm = ini_sys:r_u32(weapon:section(), "rpm") or 60
				if weapon_rpm < 60 and not axr_main.weapon_is_zoomed then
				damage_multiplier = damage_multiplier * 1.3
			end
		end
	end
	
	---------------------------------------------------------------------------------
	-- Keen Eye: 10/20/30% more headshot damage with iron sights or 1x scopes/kits --
	---------------------------------------------------------------------------------
	if head_shot and perks["perk_keen_eye"] > 0 and not IsMelee(weapon) then
		-- local check_zoom_factor = ini_sys:r_u32(weapon:section(), "scope_zoom_factor") or 1
		
		local check_zoom_factor = SYS_GetParam(2, weapon:section(), "scope_zoom_factor") or 1
		
		-- local has_scope = utils_item.has_attached_scope(weapon) or true
		printf('[RPG CXV] Keen Eye checking ... Zoom Factor : %s | Is Perk Active?: %s', check_zoom_factor, (check_zoom_factor == 0))
		if check_zoom_factor == 0 then
			damage_multiplier = damage_multiplier * (1 + (0.1 * perks["perk_keen_eye"]))
		end
	end
	
	--------------------------------------------------------------------------------------------------------
	-- On Your Mark: Returns ammo to the mag if landing enough successful shots in a short period of time --
	--------------------------------------------------------------------------------------------------------	
	
	if (perks["perk_fourth_times"] > 0) and (ammo_type_number) and (ammo_list) and (ammo_section) then
		if not IsMelee(weapon) then
				
			if (pellet_count == 1) then
				fourth_times_counter = fourth_times_counter + (1 * fourth_mult)
				fourth_timer = time_g + 60 + fourth_times_timer_add[perks["perk_fourth_times"]]			-- 6 seconds baseline
			end
			if (pellet_count > 1) then
				fourth_times_counter = fourth_times_counter + ((1 / pellet_count) * fourth_mult)
				fourth_timer = time_g + 60 + fourth_times_timer_add[perks["perk_fourth_times"]]			-- 6 seconds baseline
			end
			
			-- printf("[RPG - Hit Effects] On Your Mark stacks: %s of 8", fourth_times_counter)
			
		end
	end
	
	if (fourth_times_counter >= 8) then
		-- alife_create_item(ammo_section, db.actor, {ammo = perks["perk_fourth_times"]})
		
		local ammo_to_load = 0
		local ammo_counter = perks["perk_fourth_times"]
		-- Mags Patch
		if magazine_binder then
			local mag_data = magazine_binder.get_data(weapon:id())
			if (mag_data) then
				local ammo_cap = SYS_GetParam(2, mag_data["section"], "max_mag_size")
						
				for i=1, ammo_cap do
					if (mag_data["loaded"][i] == ammo_section) then
						ammo_to_load = ammo_to_load + 1
					end
					if (mag_data["loaded"][i] ~= ammo_section) and (ammo_counter > 0) then 
						mag_data["loaded"][i] = ammo_section
						ammo_to_load = ammo_to_load + 1
						ammo_counter = ammo_counter - 1
					end
				end
				
				if (ammo_counter > 0) then
					alife_create_item(ammo_section, db.actor, { ammo = ammo_counter })
				end		
				
				magazine_binder.set_data(weapon:id(), mag_data)
			end
			weapon:set_ammo_elapsed(ammo_to_load)
		end
		-- End Patch --
		
		if not magazine_binder then
			local ammo_total = weapon:get_ammo_in_magazine()
			local mag_size = utils_item.get_param(weapon:section(), weapon and weapon:id(), "ammo_mag_size", "float", true)
			if not mag_size then
				mag_size = ini_sys:r_u32(weapon:section(), "ammo_mag_size")
			end
			ammo_total = ammo_total + perks["perk_fourth_times"]
			if (ammo_total > mag_size) then
				ammo_counter = ammo_total - mag_size
				alife_create_item(ammo_section, db.actor, { ammo = ammo_counter })
				ammo_total = mag_size
			end
			weapon:set_ammo_elapsed(ammo_total)
		end
		
		printf("[RPG - Hit Effects] On Your Mark proc: %s", ammo_section)
		play_sound_on_actor("interface\\item_usage\\pickup", 1.2, random_float(0.85, 1.15))
		fourth_times_counter = 0
		fourth_timer = 0
	end
	
	return damage_multiplier
end

--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
function perk_damage_effects(victim, shit, bone_id, flags)
	
	if not victim:alive() then return end
	
	if shit.draftsman:id() ~= db.actor:id() then
		return
	end
	
	if bone_id == 65535 then
		return
	end
	
	if shit.power >= 50 then return end
	
	local isCompanion = victim:has_info("npcx_is_companion")
	if isCompanion then return end

    local weapon = level.object_by_id(shit.weapon_id)
	
    if weapon == nil then 
		return 
	end
	
	-- printf("[RPG - Hit Effects] Weapon registered: %s", weapon:section())
	
	if (not IsWeapon(weapon)) and (not IsGrenade(weapon)) and (not IsMelee(weapon)) then
		printf("[RPG - Hit Effects] Not legit: W - %s, G - %s, M - %s", IsWeapon(weapon), IsGrenade(weapon), IsMelee(weapon))
		return
	end
	
	local base_shit = shit.power
	
	local damage_multiplier = process_perk_effects(victim, weapon, bone_id) or 1
	
	shit.power = shit.power * damage_multiplier
	
	local damage_bonus = shit.power - base_shit
	local damage_bonus_news = tonumber(string.format("%.3f", damage_bonus))
	if damage_bonus_news >= 0.0001 then
		--printf("///////////   RPG System: Damage increase in progress  //////////////////")
		--printf('RPG Damage increase - Extra damage to the victim: %s', damage_bonus)
	end
end

if grok_bo and not cxv_artigrok_bo then	
-- only if not using ArtiGrok (grok_bo exists inside it - but empty - just for compat.)
	golden = grok_bo.golden

	if not golden then
		base_grok_PBA = grok_bo.PBA_obh
		function grok_bo.PBA_obh(npc, shit, bone_id, flags)
			printf("[TEST] Using old GBO...")
			
			base_grok_PBA(npc, shit, bone_id, flags)
			
			if shit.draftsman:id() == db.actor:id() then
			
				local weapon = get_object_by_id(shit.weapon_id)
				if not weapon or weapon == nil then
					-- printf("[RPG - Hit Effects]: No weapon/damage source found")
					return
				end
				
				local damage_multiplier = process_perk_effects(npc, weapon, bone_id) or 1
				
				if damage_multiplier > 1 then
					printf("[Reload Hit Effects] RPG Damage Bonuses in effect: %s% | Base Damage: %s", (damage_multiplier * 100) - 100, shit.power)
					shit.power = damage_multiplier * shit.power
					printf("[Reload Hit Effects] New Damage after RPG Bonuses: %s", shit.power)
				end
			end
		end
	end
end
--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

function perk_kill_effects(victim, killer)
    if not killer then return end
    if killer:id() ~= db.actor:id() then return end
	
-------------------------------------------------------------------------> Vampirism
	if perks["perk_vampirism"] > 0 then
		if killer.health < 1 then
			killer:change_health(0.025 * perks["perk_vampirism"])
		end
		if killer.power < 1 then
			killer:change_power(0.025 * perks["perk_vampirism"])
		end
	end
end
--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

hide_anims = {
	anm_hide = true,
	anm_hide_0 = true,
	anm_hide_1 = true,
	anm_hide_2 = true,
	anm_hide_empty = true,
	anm_hide_g = true,
	anm_hide_w_gl = true,
	anm_show = true,
	anm_show_0 = true,
	anm_show_1 = true,
	anm_show_2 = true,
	anm_show_empty = true,
	anm_show_g = true,
	anm_show_w_gl = true,
}

-- function fourth_times_swap_reset(anim_table,obj)

function fourth_times_swap_reset(obj, hud_sec, anm_name, unknown_1, unknown_2)
	if (not IsWeapon(obj)) then return end
	
	-- For actor_on_hud_animation_end callback
	if hide_anims[anm_name] and (fourth_times_counter > 0) then
		play_sound_on_actor("rpg_skills\\garand_ping", 0.45, random_float(0.8, 1.0))
		printf("On Your Mark resetting... | Counter before reset: %s", fourth_times_counter)
		fourth_times_counter = 0
		fourth_timer = 0
	end
	
	-- For actor_on_hud_animation_play callback
--	if hide_anims[anim_table.anm_name] and (fourth_times_counter > 0) then
--		play_sound_on_actor("rpg_skills\\garand_ping", 0.45, random_float(0.8, 1.0))
--		printf("On Your Mark resetting... | Counter before reset: %s", fourth_times_counter)
--		fourth_times_counter = 0
--		fourth_timer = 0
--	end
	
end

-- 0 == jamming shot | 1 == disarming shot
function reset_shot_conditions(perk_type)
	if perk_type == 0 then
		x_cxv_perks_data.can_jam = true
		return true
	end
	
	if perk_type == 1 then
		x_cxv_perks_data.can_disarm = true
		return true
	end
	
	return true
end

function on_game_start()
	if (not grok_bo) or (cxv_artigrok_bo) or golden then
		RegisterScriptCallback("npc_on_before_hit",             perk_damage_effects)
	end
	
    RegisterScriptCallback("monster_on_before_hit",         perk_damage_effects)
	
	RegisterScriptCallback("monster_on_death_callback",     perk_kill_effects)
    RegisterScriptCallback("npc_on_death_callback",         perk_kill_effects)
    RegisterScriptCallback("actor_on_update",         		actor_on_update)
	
--	RegisterScriptCallback("actor_on_hud_animation_play", 	fourth_times_swap_reset)
	RegisterScriptCallback("actor_on_hud_animation_end", 	fourth_times_swap_reset)
	
--	RegisterScriptCallback("actor_on_weapon_reload",         test_reload_callback)

end

--------------------------------------------------------------------------------------------------------------
-- Damage UI adjustment
--------------------------------------------------------------------------------------------------------------

if momopate_accurate_stats then
	original_weapon_damage = momopate_accurate_stats.get_weapon_damage
	function momopate_accurate_stats.get_weapon_damage(obj, sec)
		
		if (perks["perk_gunslinger"] == 0) and (perks["perk_rifleman"] == 0) and (perks["perk_heavy_gunner"] == 0) and (perks["perk_wick_mode"] == 0) then
			return original_weapon_damage(obj, sec)
		end
		
		local id = obj and obj:id()
		local hit_power = utils_item.get_wpn_param(obj, sec, "hit_power", 0)
		local ammo_list = utils_item.get_ammo(sec, id)
		
		if (momopate_accurate_stats.ammo_affects_dmg == true) then
			if ammo_list[1] then
				local k_hit = ini_sys:r_float_ex(ammo_list[1], "k_hit") or 1
				hit_power = (hit_power ~= 0) and (k_hit * hit_power) or k_hit
				
				local buck = SYS_GetParam(2, ammo_list[1], "buck_shot") or 1
				
				if (buck >= 2) then
					hit_power = hit_power * SYS_GetParam(2, ammo_list[1], "buck_shot")
				else
					hit_power = (momopate_accurate_stats.purist_damage == true) and (hit_power / 1.5) or hit_power
				end
			end
		end
		
		hit_power = hit_power * 100
		
		-----------------------------------------------------------
		-- Gunslinger/Rifleman/Heavy Gunner: 	Damage modifiers --
		-----------------------------------------------------------
		local weapon_class = x_cxv_perks_data.sortK_of(obj)
		if (perks["perk_gunslinger"] > 0) and ((weapon_class == "smg") or (weapon_class == "pistol")) then
				hit_power = hit_power * (1 + (gunner_damage_multiplier * perks["perk_gunslinger"]))
			end
			
		if (perks["perk_rifleman"] > 0) and (weapon_class == "rifle") then
			hit_power = hit_power * (1 + (gunner_damage_multiplier * perks["perk_rifleman"]))
		end
		------------------------------------------------------------> Heavy Weapons
		if (perks["perk_heavy_gunner"] > 0) and ((weapon_class == "heavy") or (weapon_class == "shotgun") or (weapon_class == "sniper")) then
			hit_power = hit_power * (1 + (gunner_damage_multiplier * perks["perk_heavy_gunner"]))
		end
		
		if (hit_power < 10) then
			return round_idp(hit_power, 2)
		else
			return round_idp(hit_power, 1)
		end
		
		return 0
	end
end

orig_prop_damage = utils_ui.prop_damage
function utils_ui.prop_damage(obj,sec)

	if (perks["perk_gunslinger"] == 0) and (perks["perk_rifleman"] == 0) and (perks["perk_heavy_gunner"] == 0) and (perks["perk_wick_mode"] == 0) then
		return orig_prop_damage(obj, sec)
	end
	
	local id = obj and obj:id()
	local hit_power = utils_item.get_wpn_param(obj, sec, "hit_power", 0)
	local ammo_list = utils_item.get_ammo(sec, id)
	if ammo_list[1] then
		local k_hit = ini_sys:r_float_ex(ammo_list[1], "k_hit") or 1
		hit_power = (hit_power ~= 0) and (k_hit*hit_power) or k_hit
	end
	
	-----------------------------------------------------------
	-- Gunslinger/Rifleman/Heavy Gunner: 	Damage modifiers --
	-----------------------------------------------------------
	local weapon_class = x_cxv_perks_data.sortK_of(obj)
	if (perks["perk_gunslinger"] > 0) and ((weapon_class == "smg") or (weapon_class == "pistol")) then
		hit_power = hit_power * (1 + (gunner_damage_multiplier * perks["perk_gunslinger"]))
	end
		
	if (perks["perk_rifleman"] > 0) and (weapon_class == "rifle") then
		hit_power = hit_power * (1 + (gunner_damage_multiplier * perks["perk_rifleman"]))
	end
	------------------------------------------------------------> Heavy Weapons
	if (perks["perk_heavy_gunner"] > 0) and ((weapon_class == "heavy") or (weapon_class == "shotgun") or (weapon_class == "sniper")) then
		hit_power = hit_power * (1 + (gunner_damage_multiplier * perks["perk_heavy_gunner"]))
	end
	
	return normalize(hit_power, 0, 1.5)
end

local ap_weapon_class
local ignore_increase = false

local find_float = ini_sys.r_float_ex
local function modify_ap(ini,sec,stat,def)
	-- Do nothing if not dealing with the "k_ap" stat
	if stat ~= "k_ap" then
--		printf("stat (%s) is not k_ap", stat)
		return find_float(ini,sec,stat,def)
	end
	
	-- Increase AP against Stalkers based on weapon type
	local return_stat = find_float(ini,sec,stat,def)
	if type(return_stat) == "number" and ap_weapon_class and (not ignore_increase) then
--		printf("[AP] old stat: %s, ap_weapon_class: %s", return_stat, ap_weapon_class)
		if (perks["perk_gunslinger"] > 0) and ((ap_weapon_class == "smg") or (ap_weapon_class == "pistol")) then
			return_stat = return_stat + gunner_ap_additions[perks["perk_gunslinger"]]
		end
			
		if (perks["perk_rifleman"] > 0) and (ap_weapon_class == "rifle") then
			return_stat = return_stat + gunner_ap_additions[perks["perk_rifleman"]]
		end
		
--		if (perks["perk_heavy_gunner"] > 0) and ((ap_weapon_class == "heavy") or (ap_weapon_class == "shotgun") or (ap_weapon_class == "sniper")) then 
--			return_stat = return_stat + gunner_ap_additions[perks["perk_heavy_gunner"]]
--		end

		if (perks["perk_heavy_gunner"] > 0) then
			if (ap_weapon_class == "heavy") or (ap_weapon_class == "sniper") then 
				return_stat = return_stat + gunner_ap_additions[perks["perk_heavy_gunner"]]
			elseif (ap_weapon_class == "shotgun") then
				return_stat = return_stat * (1 + gunner_damage_multiplier[perks["perk_heavy_gunner"]])
			end
		end
		
		if (perks["perk_berserker"] > 0) and (ap_weapon_class == "melee") then
			return_stat = return_stat + gunner_ap_additions[perks["perk_berserker"]]
		end
	end
	
--	printf("[AP] new stat: %s", return_stat)
	return return_stat
end

if grok_bo then
	grok_bo.ini_sys.r_float_ex = modify_ap 
	
	if grok_bo.npc_on_before_hit then
		local baseGrokNPC = grok_bo.npc_on_before_hit
		function grok_bo.npc_on_before_hit(npc, shit, bone_id, flags)
			
			-- Null the class variable to avoid any issues if not the player
			if shit.draftsman:id() ~= db.actor:id() then
				ignore_increase = true
				return
			end
			
			local shooter = shit.draftsman
			wpn = level.object_by_id(shit.weapon_id)
			sec = wpn:section()
			
			-- This will be fed to the modify_ap function so that it gets the correct bonus
			ap_weapon_class = x_cxv_perks_data.get_weapon_perk_class(sec) or nil
			ignore_increase = false
			
			-- Allow the original function to do its work, the AP will be modified based on the weapon class and perk levels
			baseGrokNPC(npc, shit, bone_id, flags)
		end
	end
end

if cxv_artigrok_bo then
	cxv_artigrok_bo.ini_sys.r_float_ex = modify_ap
	
	if cxv_artigrok_bo.validate_hit then
		BaseAGValidate = cxv_artigrok_bo.validate_hit
		function cxv_artigrok_bo.validate_hit(shit, bone_id, npc_id)
			-- Allow the original function to run to get the needed info
			local return_data = BaseAGValidate(shit, bone_id, npc_id)
			
			-- Return if not a valid hit
			if not return_data then
				ignore_increase = true				
				return
			end
			
			-- Null the class variable to avoid any issues if not the player
			if shit.draftsman:id() ~= db.actor:id() then
				ignore_increase = true	
				return return_data
			end
			
			-- This will be fed to the modify_ap function so that it gets the correct bonus
			ap_weapon_class = x_cxv_perks_data.get_weapon_perk_class(return_data.sec) or nil
			ignore_increase = false
			
			-- return the valid data so damage calculations can continue + have the AP modification take effect
			return return_data
			
		end
	end
end

if momopate_knife_stats then

	function  momopate_knife_stats.prop_ap(obj, sec)
		local ammo_sec = SYS_GetParam(0, obj and obj:section() or sec, "ammo_class") or "nil"
		if ammo_sec ~= "nil" then
			k_ap = SYS_GetParam(2, ammo_sec, "k_ap") or 0
			k_ap = k_ap + gunner_ap_additions[perks["perk_berserker"]]
			return round_idp(k_ap * 1000, 0)
		end
		
		return 0
	end
	
end