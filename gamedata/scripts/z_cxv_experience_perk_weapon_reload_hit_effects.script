-- local ghost_ammo = 0
local gunslinger = 0
local rifleman = 0
local heavy_gunner = 0
local reload_bonuses = {[0] = 0, [1] = 11, [2] = 16, [3] = 25, [4] = 37, [5] = 55} 

local berserker = 0
local jamming_shot = 0
local disarming_shot = 0
local mutant_slayer = 0
local deadeye = 0
local lucky_strike = 0

local vampirism = 0

local zone_slayer = 0
local fourth_times = 0
local fourth_times_timer_add = {[0] = 0, [1] = 0, [2] = 5, [3] = 10 } -- Each subsequent rank adds 0.5s to the grace timer

local glass_cannon = 0
local glass_cannon_exp = { [1] = 0.5, [2] = 0.85, [3] = 1.2 } -- At 0 HP (lol): 32.3% | 60.91% | 95.7%

local wick_mode = 0
local string_find = string.find
local wick_inclusions = {
	"vz61",
	"kiparis",
}


local function experience_skill_on_update(id, data)	-- messy I know (will look into a cleaner solution later to avoid YandereDev coding trash)
	--[[
	if (id == "perk_ghost_ammo") then
		ghost_ammo = data["curr_level"]
	end
	--]]
	if (id == "perk_gunslinger") then
		gunslinger = data["curr_level"]
	end
	if (id == "perk_rifleman") then
		rifleman = data["curr_level"]
	end
	if (id == "perk_heavy_gunner") then
		heavy_gunner = data["curr_level"]
	end
	if (id == "perk_berserker") then
		berserker = data["curr_level"]
	end
	if (id == "perk_jamming_shot") then
		jamming_shot = data["curr_level"]
	end
	if (id == "perk_disarming_shot") then
		disarming_shot = data["curr_level"]
	end
	if (id == "perk_mutant_slayer") then
		mutant_slayer = data["curr_level"]
	end
	if (id == "perk_vampirism") then
		vampirism = data["curr_level"]
	end
	if (id == "perk_deadeye") then
		deadeye = data["curr_level"]
	end
	if (id == "perk_lucky_strike") then
		lucky_strike = data["curr_level"]
	end
	
	if (id == "perk_zone_slayer") then
		zone_slayer = data["curr_level"]
	end
	if (id == "perk_fourth_times") then
		fourth_times = data["curr_level"]
	end

	if (id == "perk_glass_cannon") then
		glass_cannon = data["curr_level"]
	end
	if (id == "perk_wick_mode") then
		wick_mode = data["curr_level"]
	end
end

--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

local sms = actor_menu.set_msg
local criticalChance = 0
local criticalMultiplier = 1
local fourth_times_counter = 0
local fourth_times_grace = 0

local get_safe_sound_object = xr_sound.get_safe_sound_object

local function play_sound_on_actor(snd, volume, frequency)
	if not snd then
		trace("snd is nil")
		return
	end
	local actor = db.actor
	local snd = get_safe_sound_object(snd)
	if snd then
		snd:play(actor, 0, sound_object.s2d)
		snd.volume = volume or 1
		snd.frequency = frequency or 1
		return snd
	end
end

local difficulty_multiplier_player = {
	[1]  = 1.3,
	[2]  = 1.05,
	[3]  = 0.90,		--[3]  = 1.0,
	[4]  = 0.80,		--[4]  = 1.0,
}

--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

local wp_table 				= {}
wp_table.w_explosive        = "explosive"
wp_table.w_misc           	= "misc"
wp_table.w_melee          	= "melee"
wp_table.w_smg          	= "smg"
wp_table.w_pistol          	= "pistol"
wp_table.w_rifle            = "rifle"
wp_table.w_sniper           = "sniper"
wp_table.w_shotgun          = "shotgun"
wp_table.w_heavy			= "heavy"

--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

function sortK_of(weapon)
    if not weapon then return "empty hands" end
    local kind = ini_sys:r_string(weapon:section(), "kind") or nil
	if kind == "w_explosive" then
		local slot = ini_sys:r_string(weapon:section(), "slot")
		if slot ~= "3" then
			local class = ini_sys:r_string(weapon:section(), "weapon_class")
			if class == "heavy_weapon" then
				kind = "w_heavy"
			end	
		end
	end
    return wp_table[kind]
end

--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
--[[
function kaboom(npc, dice)
	if not dice then return end
    local boom = "mine_new_blow"
    local npc_id = npc:id()
    local npc_position = npc:position()
    local npc_level_vertex_id = npc:level_vertex_id()
    local npc_game_vertex_id = npc:game_vertex_id()
    if dice then 
        function explode(explode_id)
            local explode_obj = get_object_by_id(explode_id)
            if explode_obj then
                local sim = alife()
                sim:release(sim:object(npc_id))
                explode_obj:explode(0)
                return true
            end
            return false
        end
        printf("Dice is %s, let's boom", dice)
        local explode_obj = alife_create_item(boom, {npc_position, npc_level_vertex_id, npc_game_vertex_id, nil})
        CreateTimeEvent(explode_obj.id, explode_obj.id, 0, explode, explode_obj.id)
    else
        printf("No luck this time, dice is %s", dice)
    end
end
--]]

local function get_object_by_id(id) -- same as _g.script one but without spamming in console
    if not id then return end
    if (id == AC_ID) then return db.actor end

    local obj = db.storage[id] and db.storage[id].object or level_object_by_id(id)
    if not obj then return end
    return obj
end

--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

local time_g
local update_1000ms_timer = 0
local update_1000ms_timer_interval = 10	-- update every 1 second
local fourth_timer = 0

local math_floor = math.floor

function actor_on_update()
	time_g = math_floor(time_global() * 0.01)
	
	if (time_g > update_1000ms_timer) then
		if (fourth_times > 0) and (time_g > fourth_timer) and (fourth_times_counter > 0) and (fourth_timer > 0) then
			fourth_times_counter = 0
			fourth_timer = 0
			play_sound_on_actor("rpg_skills\\garand_ping", 0.45, random_float(0.8, 1.0))
		end
		update_1000ms_timer = time_g + update_1000ms_timer_interval
	end
end
--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

function perk_damage_effects(monster, shit, bone_id, flags)
	
	if not monster:alive() then return end
	
	if shit.draftsman:id() ~= db.actor:id() then
		return
	end
	
	if bone_id == 65535 then
		return
	end
	
	if shit.power >= 50 then return end
	
	local isCompanion = monster:has_info("monsterx_is_companion")
	if isCompanion then return end
	
    if not (shit.draftsman and shit.draftsman:id() == 0) then return end
    if shit.draftsman:id() ~= db.actor:id() then return end

    local weapon = level.object_by_id(shit.weapon_id)
	
    if weapon == nil then 
		return 
	end
	
	printf("[RPG - Hit Effects] Weapon registered: %s", weapon:section())
	
	if (not IsWeapon(weapon)) and (not IsGrenade(weapon)) and (not IsMelee(weapon)) then
		printf("[RPG - Hit Effects] Not legit: W - %s, G - %s, M - %s", IsWeapon(weapon), IsGrenade(weapon), IsMelee(weapon))
		return
	end

    local weapon_class = sortK_of(weapon)
	local head_shot = perk_based_artefacts_bone_mapper.is_critical_bone(monster:clsid(), bone_id)
	
	local is_breaked = ((bone_id >=20) and (bone_id <= 45))
    local is_breaked2 = bone_id >=36

    local base_shit = shit.power
	
	local ammo_type_number
	local ammo_list
	local ammo_section
	local pellet_count
	local fourth_mult = 1
	
	-- Need to account for Game Difficulty
	local gameplay = alife_storage_manager.get_state().diff_game
	if not (type(gameplay) == "table") then -- for old saves
		alife_storage_manager.get_state().diff_game = {}
		alife_storage_manager.get_state().diff_game["type"] = game_num
		gameplay = alife_storage_manager.get_state().diff_game
	end

	local game_num = gameplay["type"] or game_num
	
	if (fourth_times > 0) then
		ammo_list = utils_item.get_ammo(weapon:section(), weapon:id())
		ammo_type_number = weapon:get_ammo_type()
		ammo_section = ammo_list[ammo_type_number+1]
		pellet_count = SYS_GetParam(2, ammo_section, "buck_shot") or 1
	end
	
	-------------------------------------------------------------------
	-- Lucky Strike + Deadeye: 	Critical damage and chance modifiers --
	-------------------------------------------------------------------

	if (lucky_strike <= 0) and (deadeye > 0) then	-- if you have DE but don't have LS...
		criticalChance = 1							-- Crit Chance is 0.1%
	elseif (lucky_strike > 0) then
		criticalChance = (lucky_strike ^ 2) * 10	-- Crit Chance is (LS^2)%
	end
	
	if head_shot then
		criticalChance = criticalChance * 1.5
		fourth_mult = 2
	end
	
	------------------------------------------------------------------------------------------------
	-- GLASS CANNON: While lower than 65% health, gain exp. damage bonus the lower your health is --
	------------------------------------------------------------------------------------------------
	
	if (db.actor.health < 0.65) and (glass_cannon > 0) then
		shit.power = shit.power * (2 - db.actor.health)^(glass_cannon_exp[glass_cannon])
	end
	
	-------------------------------------------------------------------
	-- Lucky Strike + Deadeye: 	Critical damage and chance modifiers --
	-------------------------------------------------------------------
	
	if (math.random(1000) <= criticalChance) then
		
		fourth_mult = 2
		
		if (lucky_strike > 0) and (deadeye <= 0) then	-- if you have LS but don't have DE...
			criticalMultiplier = 1.1					-- Crit Multiplier is 10%
		elseif (deadeye > 0) then
			criticalMultiplier = 1 + (0.25 * deadeye)	-- Crit Multiplier is (25  * DE)%
		end
	
		txt = "Critical hit for " .. criticalMultiplier .. "x damage!"
		sms(2, txt, 5)
		play_sound_on_actor("material\\bullet\\collide\\metall04gr", 0.75, criticalMultiplier)
		shit.power = shit.power * criticalMultiplier
	end
	--------------------------------------------------------------------------------------------------------
	-- On Your Mark: Returns ammo to the mag if landing enough successful shots in a short period of time --
	--------------------------------------------------------------------------------------------------------	
	
	if (fourth_times > 0) and (ammo_type_number) and (ammo_list) and (ammo_section) then
		if not IsMelee(weapon) then
				
			if (pellet_count == 1) then
				fourth_times_counter = fourth_times_counter + (1 * fourth_mult)
				fourth_timer = time_g + 60 + fourth_times_timer_add[fourth_times]			-- 6 seconds baseline
			end
			if (pellet_count > 1) then
				fourth_times_counter = fourth_times_counter + ((1 / pellet_count) * fourth_mult)
				fourth_timer = time_g + 60 + fourth_times_timer_add[fourth_times]			-- 6 seconds baseline
			end
		end
	end
	
	if (fourth_times_counter >= 8) then
		-- alife_create_item(ammo_section, db.actor, {ammo = fourth_times})
		
		local ammo_to_load = 0
		local ammo_counter = fourth_times
		-- Mags Patch
		if magazine_binder then
			local mag_data = magazine_binder.get_data(weapon:id())
			if (mag_data) then
				local ammo_cap = SYS_GetParam(2, mag_data["section"], "max_mag_size")
						
				for i=1, ammo_cap do
					if (mag_data["loaded"][i] == ammo_section) then
						ammo_to_load = ammo_to_load + 1
					end
					if (mag_data["loaded"][i] ~= ammo_section) and (ammo_counter > 0) then 
						mag_data["loaded"][i] = ammo_section
						ammo_to_load = ammo_to_load + 1
						ammo_counter = ammo_counter - 1
					end
				end
				
				if (ammo_counter > 0) then
					alife_create_item(ammo_section, db.actor, { ammo = ammo_counter })
				end		
				
				magazine_binder.set_data(weapon:id(), mag_data)
			end
			weapon:set_ammo_elapsed(ammo_to_load)
		end
		-- End Patch --
		
		if not magazine_binder then
			local ammo_total = weapon:get_ammo_in_magazine()
			local mag_size = ini_sys:r_u32(weapon:section(), "ammo_mag_size")
			ammo_total = ammo_total + fourth_times
			if (ammo_total > mag_size) then
				ammo_counter = ammo_total - mag_size
				alife_create_item(ammo_section, db.actor, { ammo = ammo_counter })
				ammo_total = mag_size
			end
			weapon:set_ammo_elapsed(ammo_total)
		end
		
		play_sound_on_actor("interface\\item_usage\\pickup", 1.2, random_float(0.85, 1.15))
		fourth_times_counter = 0
		fourth_timer = 0
	end
	
	local damage_bonus = shit.power - base_shit
	local damage_bonus_news = tonumber(string.format("%.3f", damage_bonus))
	if damage_bonus_news >= 0.0001 then
		printf("///////////   RPG System: Damage increase in progress  //////////////////")
		printf('RPG Damage increase - Extra damage to the monster: %s', damage_bonus)
	end
end

if grok_bo then
	base_grok_npc = grok_bo.npc_on_before_hit
	grok_bo.npc_on_before_hit = function(npc, shit, bone_id, flags)
		
		if shit.draftsman:id() ~= db.actor:id() then
			return
		end
		
		if bone_id == 65535 then
			return
		end
		
		if not (shit.draftsman and shit.draftsman:id() == 0) then return end
		if shit.draftsman:id() ~= db.actor:id() then return end
		
		local weapon = level.object_by_id(shit.weapon_id)
		if not weapon or weapon == nil then
			printf("[RPG - Hit Effects]: No weapon/damage source found")
			return
		end
		
		local base_npc_health = npc and npc.health or 0
		base_grok_npc(npc, shit, bone_id, flags)
		local true_damage = (base_npc_health - (npc and npc.health)) or 0
		
		if true_damage <= 0 then return end

		local weapon_class = sortK_of(weapon)
		local head_shot = perk_based_artefacts_bone_mapper.is_critical_bone(npc:clsid(), bone_id)
		
		local is_breaked = ((bone_id >=20) and (bone_id <= 45))
		local is_breaked2 = bone_id >=36
		
		if base_npc_health > 0 then
		
			local ammo_type_number
			local ammo_list
			local ammo_section
			local pellet_count
			local fourth_mult = 1

			if (fourth_times > 0) then
				ammo_list = utils_item.get_ammo(weapon:section(), weapon:id())
				ammo_type_number = weapon:get_ammo_type()
				ammo_section = ammo_list[ammo_type_number+1]
				pellet_count = SYS_GetParam(2, ammo_section, "buck_shot") or 1
			end

			-------------------------------------------------------------------
			-- Lucky Strike + Deadeye: 	Critical damage and chance modifiers --
			-------------------------------------------------------------------

			if (lucky_strike <= 0) and (deadeye > 0) then	-- if you have DE but don't have LS...
				criticalChance = 1							-- Crit Chance is 0.1%
			elseif (lucky_strike > 0) then
				criticalChance = (lucky_strike ^ 2) * 10	-- Crit Chance is (LS^2)%
			end

			if head_shot then
				criticalChance = criticalChance * 1.5
				fourth_mult = 2
			end

			------------------------------------------------------------------------------------------------
			-- GLASS CANNON: While lower than 65% health, gain exp. damage bonus the lower your health is --
			------------------------------------------------------------------------------------------------
			
			if (db.actor.health < 0.65) and (glass_cannon > 0) then
				shit.power = shit.power * (2 - db.actor.health)^(glass_cannon_exp[glass_cannon])
			end
			
			-------------------------------------------------------------------
			-- Lucky Strike + Deadeye: 	Critical damage and chance modifiers --
			-------------------------------------------------------------------
			
			if (math.random(1000) <= criticalChance) then
				
				fourth_mult = 2
				
				if (lucky_strike > 0) and (deadeye <= 0) then	-- if you have LS but don't have DE...
					criticalMultiplier = 1.1					-- Crit Multiplier is 10%
				elseif (deadeye > 0) then
					criticalMultiplier = 1 + (0.25 * deadeye)	-- Crit Multiplier is (25  * DE)%
				end
			
				txt = "Critical hit for " .. criticalMultiplier .. "x damage!"
				sms(2, txt, 5)
				play_sound_on_actor("material\\bullet\\collide\\metall04gr", 0.75, criticalMultiplier)
			end
			
			-----------------------------------------------------------------------------------------
			-- Jamming Shot (also works with melees): Shooting an enemy's arms "jams" their weapon --
			-----------------------------------------------------------------------------------------

			if is_breaked and jamming_shot > 0 then
				local weapon2 = npc:active_item() --Багает оружие противника
				if weapon2 then weapon2:unload_magazine(false) end
			end
			
			--------------------------------------------------------------------------------------------------------------------------
			-- Disarming Shot: 15% chance to make an NPC drop their weapon when shot in the hands (condition forced to 15%) --
			--------------------------------------------------------------------------------------------------------------------------

			if disarming_shot > 0 and is_breaked2 then
				local weapon2 = npc:active_item()
				local dropChance = math.random(100) <= 15
				if weapon and weapon2 and dropChance then
					weapon2:set_condition(0.15)
					npc:drop_item(weapon2)
				end
			end

			--------------------------------------------------------------------------------------------------------
			-- On Your Mark: Returns ammo to the mag if landing enough successful shots in a short period of time --
			--------------------------------------------------------------------------------------------------------	

			if (fourth_times > 0) and (ammo_type_number) and (ammo_list) and (ammo_section) then
				if not IsMelee(weapon) then
						
					if (pellet_count == 1) then
						fourth_times_counter = fourth_times_counter + (1 * fourth_mult)
						fourth_timer = time_g + 60 + fourth_times_timer_add[fourth_times]			-- 6 seconds baseline
					end
					if (pellet_count > 1) then
						fourth_times_counter = fourth_times_counter + ((1 / pellet_count) * fourth_mult)
						fourth_timer = time_g + 60 + fourth_times_timer_add[fourth_times]			-- 6 seconds baseline
					end
				end
			end

			if (fourth_times_counter >= 8) then
				-- alife_create_item(ammo_section, db.actor, {ammo = fourth_times})
				
				local ammo_to_load = 0
				local ammo_counter = fourth_times
				-- Mags Patch
				if magazine_binder then
					local mag_data = magazine_binder.get_data(weapon:id())
					if (mag_data) then
						local ammo_cap = SYS_GetParam(2, mag_data["section"], "max_mag_size")
								
						for i=1, ammo_cap do
							if (mag_data["loaded"][i] == ammo_section) then
								ammo_to_load = ammo_to_load + 1
							end
							if (mag_data["loaded"][i] ~= ammo_section) and (ammo_counter > 0) then 
								mag_data["loaded"][i] = ammo_section
								ammo_to_load = ammo_to_load + 1
								ammo_counter = ammo_counter - 1
							end
						end
						
						if (ammo_counter > 0) then
							alife_create_item(ammo_section, db.actor, { ammo = ammo_counter })
						end		
						
						magazine_binder.set_data(weapon:id(), mag_data)
					end
					weapon:set_ammo_elapsed(ammo_to_load)
				end
				-- End Patch --
				
				if not magazine_binder then
					local ammo_total = weapon:get_ammo_in_magazine()
					local mag_size = ini_sys:r_u32(weapon:section(), "ammo_mag_size")
					ammo_total = ammo_total + fourth_times
					if (ammo_total > mag_size) then
						ammo_counter = ammo_total - mag_size
						alife_create_item(ammo_section, db.actor, { ammo = ammo_counter })
						ammo_total = mag_size
					end
					weapon:set_ammo_elapsed(ammo_total)
				end
				
				play_sound_on_actor("interface\\item_usage\\pickup", 1.2, random_float(0.85, 1.15))
				fourth_times_counter = 0
				fourth_timer = 0
			end

			local damage_bonus = true_damage * criticalMultiplier
			if damage_bonus > true_damage then
				local damage_bonus_news = tonumber(string.format("%.3f", damage_bonus))
				printf("///////////   RPG System: Damage increase in progress  //////////////////")
				printf('RPG Damage increase - Extra damage to the enemy: %s', damage_bonus)
				local life_removed = npc.health - damage_bonus
				printf('Enemy Health after hit: %s', npc.health)
				npc:set_health_ex(life_removed)
			end
		end
	end
end
--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

function perk_kill_effects(victim, killer)
    if not killer then return end
    if killer:id() ~= db.actor:id() then return end
	
-------------------------------------------------------------------------> Vampirism
	if vampirism > 0 then
		if killer.health < 1 then
			killer:change_health(0.025 * vampirism)
		end
		if killer.power < 1 then
			killer:change_power(0.025 * vampirism)
		end
	end
end
--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

reload_anims = {
	anm_reload = true,
	anm_reload_1 = true,
	anm_reload_2 = true,
	anm_reload_empty = true,
	anm_add_cartridge = true,
	anm_close = true,
	anm_open = true,
	anm_reload_g = true,
	anm_reload_w_gl = true,
	anm_reload_empty_w_gl = true,
}

hide_anims = {
	anm_hide = true,
	anm_hide_0 = true,
	anm_hide_1 = true,
	anm_hide_2 = true,
	anm_hide_empty = true,
	anm_hide_g = true,
	anm_hide_w_gl = true,
	anm_show = true,
	anm_show_0 = true,
	anm_show_1 = true,
	anm_show_2 = true,
	anm_show_empty = true,
	anm_show_g = true,
	anm_show_w_gl = true,
}

function animation_weapons(anim_table,obj)
	if (not IsWeapon(obj)) then return end
	
	if hide_anims[anim_table.anm_name] and (fourth_times_counter > 0) then
		play_sound_on_actor("rpg_skills\\garand_ping", 0.45, random_float(0.8, 1.0))
		fourth_times_counter = 0
		fourth_timer = 0
	end
	
	if not reload_anims[anim_table.anm_name] then return end
	if (gunslinger < 1) and (rifleman < 1) and (heavy_gunner < 1) and (zone_slayer < 1) then return end
	
	local weapon_class = sortK_of(obj)
	
	local reload_string = tostring(anim_table.anm_name)
	local wpn_sec = obj:section()
	local hud_sec = ini_sys:r_string_ex(wpn_sec,"hud")

	local reload_val = parse_list(ini_sys,hud_sec,reload_string)

	local animation_speed = anim_table.anm_speed
	for k, v in pairs(reload_val) do
		if tonumber(v) then
			animation_speed = tonumber(v)
			break
		end
	end
	
	local anm_bonus = 1
------------------------------------------------------------> Gunslinger
	if (gunslinger > 0) and ((weapon_class == "smg") or (weapon_class == "pistol")) then
        anm_bonus = anm_bonus + (reload_bonuses[gunslinger] * 0.01)		-- 11 | 16 | 25 | 37 | 55
		--printf("SMG Reload")
	end
------------------------------------------------------------> Rifleman
	if (rifleman > 0) and (weapon_class == "rifle") then
        anm_bonus = anm_bonus + (reload_bonuses[rifleman] * 0.01)		-- 11 | 16 | 25 | 37 | 55
		--printf("Rifle Reload")
	end
------------------------------------------------------------> Heavy Weapons
	if (heavy_gunner > 0) and ((weapon_class == "heavy") or (weapon_class == "shotgun") or (weapon_class == "sniper")) then
        anm_bonus = anm_bonus + (reload_bonuses[heavy_gunner] * 0.01)	-- 11 | 16 | 25 | 37 | 55
		--printf("Heavy Reload")
	end
------------------------------------------------------------> Zone Slayer
	if (zone_slayer > 0) and (weapon_class == "shotgun") then
		local clip = ini_sys:r_float_ex(obj:section(), "ammo_mag_size") or 3
		if clip <= 2 then
			anm_bonus = anm_bonus + 0.15
		end
	end
------------------------------------------------------------> Wick Mode
	if wick_mode > 0 then
		for i=1,#wick_inclusions do
			if (string_find(wpn_sec, wick_inclusions[i])) or (weapon_class == "pistol") then
				anm_bonus = anm_bonus + 0.15
				break
			end
		end
	end
	
	if reload_anims[anim_table.anm_name] then
		anim_table.anm_speed = animation_speed * anm_bonus
	end
	
end


function on_game_start()
	if experience_potions then
		RegisterScriptCallback("experience_skill_on_update", experience_skill_on_update)
	else
		RegisterScriptCallback("experience_perk_on_update", experience_skill_on_update)
	end	

	--if not grok_bo then
	--	RegisterScriptCallback("npc_on_before_hit",             perk_damage_effects)
	--end
	
    RegisterScriptCallback("monster_on_before_hit",         perk_damage_effects)
	
    RegisterScriptCallback("npc_on_death_callback",         perk_kill_effects)
    RegisterScriptCallback("actor_on_update",         		actor_on_update)
	
	--[NEW] Reload Speed
	RegisterScriptCallback("actor_on_hud_animation_play", animation_weapons)
end
