local zone_gunsmith = 0

local function experience_skill_on_update(id, data)
	if (id == "perk_zone_gunsmith") then
		zone_gunsmith = data["curr_level"]
	end	
end

------------------------------------------------------------------------------
------------------------------------------------------------------------------

base_repair_inventory = item_repair.UIRepair.InitInventory

item_repair.UIRepair.InitInventory = function(self, n)
	
	if (zone_gunsmith <= 0) then 
		base_repair_inventory(self,n)
		
	else
		local inv = {}
		local size_t = 0
	
		-- Compatible weapons list to repair
		if n == 1 then
			db.actor:iterate_inventory( function(owner, obj)
				local sec = obj:section()
				local main_section = ini_sys:r_string_ex(sec,"repair_type") or sec
				if (self.repair_only and self.repair_only[main_section]) then
					local con = math.ceil(obj:condition() * 100)
					if (con and con >= (self.min_condition * 100) and con <= self.max_condition * 100) then
						size_t = size_t + 1
						inv[size_t] = obj
					end
				end
			end)
		
			self.CC[1]:Reinit(inv)

		-- Compatible part list to use
		elseif n == 2 then
			local obj_s = self.CC[1]:GetCell_Selected(true)
			if (not obj_s) then
				return
			end
		
			local inf = {}
			local ItemListSec_2 = {} -- to show only one copy of bonus items
			db.actor:iterate_inventory( function(owner, obj)
				local sec = obj:section()
				if (not ItemListSec_2[sec]) and (obj) and (obj:id() ~= obj_s:id()) and (obj:id() ~= self.obj:id()) then
					ItemListSec_2[sec] = true
					
					if (self.parts_match and sec == obj_s:section()) then
						local part_bonus = obj:condition()
						part_bonus = (game_achievements.has_achievement("mechanized_warfare")) and (part_bonus + 0.02) or part_bonus
						part_bonus = clamp(math.floor(part_bonus*100)*self.parts_multi , 0 , 100)
				
						size_t = size_t + 1
						inv[size_t] = obj
						inf[size_t] = part_bonus
				
					elseif (self.parts_sections and self.parts_sections[sec]) then
						local part_bonus = ini_sys:r_float_ex(sec,"repair_part_bonus") or self.part_bonus
						part_bonus = (game_achievements.has_achievement("mechanized_warfare")) and (part_bonus + 0.02) or part_bonus
						part_bonus = clamp(math.floor(part_bonus*100)*self.parts_multi , 0 , 100)
				
						size_t = size_t + 1
						inv[size_t] = obj
						inf[size_t] = part_bonus
					
					elseif (sec == "prt_i_scrap") then
						local part_bonus = 0.02 + (0.01 * zone_gunsmith)
						part_bonus = (game_achievements.has_achievement("mechanized_warfare")) and (part_bonus + 0.02) or part_bonus
						part_bonus = clamp(math.floor(part_bonus*100) , 0 , 100)
				
						size_t = size_t + 1
						inv[size_t] = obj
						inf[size_t] = part_bonus
					end
				end
			end)
		
			self.CC[2]:Reinit(inv,inf)
		
			local clr_b = utils_xml.get_color("pda_blue",true)
			local fnt = GetFontSmall()
			for idx,ci in pairs(self.CC[2].cell) do
				if ci:IsShown() then
					local con100 = ci.flags.info
					local con = ci.flags.info / 100
					ci:Add_CustomText( ("+"..con100), nil, nil, clr_b, fnt)
				end
			end
		end
	end
end

base_repair_item_select = item_repair.UIRepair.OnItemSelect
item_repair.UIRepair.OnItemSelect = function(self, n)

	if (zone_gunsmith <= 0) then 
		base_repair_item_select(self,n)
		
	else
		local obj_1 = self.CC[1]:GetCell_Selected(true)
		local obj_n = self.CC[n]:GetCell_Selected(true)
		if not (obj_1 and obj_n) then
			return
		end

		local sec = obj_n:section()
		local id = obj_n:id()
		local con = 0
		if n == 2 and (sec ~= "prt_i_scrap") then
			local is_part_match = (self.parts_match and sec == obj_1:section())
			con = is_part_match and obj_n:condition() or ini_sys:r_float_ex(sec,"repair_part_bonus") or self.part_bonus
			con = (game_achievements.has_achievement("mechanized_warfare")) and (con + 0.02) or con
			con = clamp(math.floor(con*100)*self.parts_multi , 0 , 100)
		elseif n == 2 and (sec == "prt_i_scrap") then
			con = 0.02 + (0.01 * zone_gunsmith)
			con = (game_achievements.has_achievement("mechanized_warfare")) and (con + 0.02) or con
			con = clamp(math.floor(con*100) , 0 , 100)
		end
	
		-- Text (Name)
		local name = ui_item.get_sec_name(sec)
		self.text_item[n]:SetText(name)
	
		-- Text (Condition)
		self.con_val[1] = math.ceil((obj_1:condition())*100)
		self.con_val[2] = ((n == 2) and con) or 0
		self.con_val[3] = math.floor((self.add_condition)*100)
		self.con_val[4] = clamp(self.con_val[1] + self.con_val[2] + self.con_val[3], 0, 100)
		if IsItem("part",nil,obj_1) then
			self.con_val[4] = utils_item.get_cond_static(self.con_val[4])
		end
	
		self.con_txt[1]:SetText(utils_xml.get_color_con(self.con_val[1]) .. game.translate_string("st_ui_oldcon") .. ": +" .. self.con_val[1] .. "%")
		self.con_txt[2]:SetText(self.clr_b .. game.translate_string("st_ui_bonus") .. ": +" .. self.con_val[2] .. "%")
		self.con_txt_base:SetText(game.translate_string("st_ui_repair") .. ": +" .. self.con_val[3] .. "%")
		self.con_txt_new:SetText(utils_xml.get_color_con(self.con_val[4]) .. game.translate_string("st_ui_total") .. ": +" .. self.con_val[4] .. "%")
	
		-- Icon
		self.cell_item[n]:Set(obj_n)

		-- Reset supportive item when you choose main item
		if (n == 1) and self.use_parts then
			self.cell_item[2]:Reset()
			self.text_item[2]:SetText("")
			--self.con_txt[1]:SetText("")
			--self.con_txt[2]:SetText("")
			--self.con_txt_base:SetText("")
		end
	
		self.btn_repair:Enable(true)
	end
end
------------------------------------------------------------------------------
------------------------------------------------------------------------------

function on_game_start()
	if experience_potions then
		RegisterScriptCallback("experience_skill_on_update", experience_skill_on_update)
	else
		RegisterScriptCallback("experience_perk_on_update", experience_skill_on_update)
	end	
end