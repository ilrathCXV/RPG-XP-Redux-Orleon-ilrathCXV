local battle_runner_speed = { [1] = 1.10, [2] = 1.20, [3] = 1.35 }		-- 10%, 20%, 30%

local time_g
local update_1000ms_timer = 0
local update_1000ms_timer_interval = 10	-- update every 1 second
local battle_runner_timer = 0
local battle_runner_orig = 0
local time_g_orig = 0
local battle_runner_active = false

local add_speed = speed.add_speed
local remove_speed = speed.remove_speed
local play_sound_on_actor = x_cxv_perks_data.play_sound_on_actor
local math_floor = math.floor

function actor_on_first_update()
	remove_speed("perk_battle_runner")
end

function actor_on_update()
	time_g = math_floor(time_global() * 0.01)
	
	
	if (time_g > update_1000ms_timer) then
		if (x_cxv_perks_data.perks["perk_battle_runner"] >= 1) and (time_g > battle_runner_timer) and (battle_runner_active) then
			remove_speed("perk_battle_runner")
			printf("[RPG] Battle Runner ended")
			play_sound_on_actor("anomaly\\electra_hit",0.5)
			battle_runner_active = false
			battle_runner_timer = 0
		end
		update_1000ms_timer = time_g + update_1000ms_timer_interval
	end
end

function actor_on_kill(victim, killer)
	if not killer then return end
    if killer:id() ~= db.actor:id() then return end
	
	if (x_cxv_perks_data.perks["perk_battle_runner"] >= 1) then
		if (battle_runner_active) then										-- only refresh the timer back to 10 seconds if active
			local time_limit = math_floor(time_global() * 0.01) - time_g_orig
			time_g_orig = math_floor(time_global() * 0.01)
			battle_runner_timer = battle_runner_timer + time_limit
			printf('[RPG] Battle Runner refreshed by %s second(s)', time_limit * 0.1)
		end
		if (battle_runner_timer == 0) and not (battle_runner_active) then	-- BR not active; grant 10 seconds of speed
			time_g_orig = math_floor(time_global() * 0.01)
			battle_runner_timer = time_g_orig + 100
			add_speed("perk_battle_runner", battle_runner_speed[ x_cxv_perks_data.perks["perk_battle_runner"] ], false, true)
			play_sound_on_actor("anomaly\\gravity_entrance",0.8)
			battle_runner_active = true
			printf("[RPG] Battle Runner started (%s)", time_g_orig)
		end
	end
end

function on_game_start()
	RegisterScriptCallback("actor_on_first_update", 		actor_on_first_update)
	RegisterScriptCallback("actor_on_update", 				actor_on_update)
	RegisterScriptCallback("npc_on_death_callback", 		actor_on_kill)
	RegisterScriptCallback("monster_on_death_callback", 	actor_on_kill)
end

if outfit_speed_mcm then
	BaseOutfitSpeed = outfit_speed_mcm.get_outfit_speed
	function outfit_speed_mcm.get_outfit_speed(obj, sec, sprint)
		
		local outfit_speed = BaseOutfitSpeed(obj, sec, sprint)
		if sprint and x_cxv_perks_data.perks["perk_battle_runner"] > 0 and outfit_speed and outfit_speed > 0 then
			return (outfit_speed + (x_cxv_perks_data.perks["perk_battle_runner"] * 0.05))
		end
		
		return outfit_speed
	end
end

--[[
if momopate_accurate_stats then
	BaseMomoSpeed = momopate_accurate_stats.get_outfit_speed
	function momopate_accurate_stats.get_outfit_speed(obj, sec)
		local outfit_speed = BaseMomoSpeed(obj,sec)
		if x_cxv_perks_data.perks["perk_battle_runner"] > 0 and outfit_speed > 0 then
			return (outfit_speed + (x_cxv_perks_data.perks["perk_battle_runner"] * 5))
		end
		
		return outfit_speed
	end
end
]]